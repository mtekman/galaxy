{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","require","mod_utils","define","cssLoadFile","Base","initialize","TracksterUI","_","tracks","visualization","mod_icon_btn","query_string","GridView","save_viz","this","Galaxy","modal","title","arguments","extend","bookmarks","Model","baseURL","chrom","end","body","$","each","push","position","children","root","annotation","text","vis_json","stringify","viz_config","overview_drawable","config","get_value","vis_id","vis_info","has_changes","start","low","history","pushState","overview","overview_track_name","Cancel","type","dataType","data","id","dbkey","JSON","self","create_icon_buttons_menu","icon_class","new_tracks","url","window","location","hash","on_click","show","add_drawable","name","buttons","hide","menu","select_datasets","track","object_from_template","bookmarks_container","addClass","DrawableGroup","appendTo","delete_icon_container","slideUp","css","use_textarea","load_chroms_deferred","viewport_config","undefined","buttonMenu","add_bookmark","editable","drawables_config","new_bookmark","drawable_config","position_div","annotation_div","i","drawables","set_overview","bookmark","bookmarks_config","prependTo","click","remove","make_text_editable","num_rows","help_text","TrackBrowserRouter","create_visualization","view_config","TracksterView","header","viewport_container","when","then","chrom_info","move_fraction","change","scrollTop","change_chrom","length","overview_drawable_name","Backbone","createButtonMenu","attr","set_up_router","get","choose_existing_or_new","options","init_keyboard_nav","listTracksParams","e","srcElement","is","which","Math","round","height","view_in_saved","dataset_params","tracks_grid","Leave without Saving","off","Save","View","ajax","$el","error","append","alert","Create","force_right_panel","galaxy_config","app","dbkeys_in_genomes","focus","dataset_id","hda_ldda","gene_region","template_view_new","url_base","init_editor","embedded","add_dataset","track_data","Add to visualization","parent","document","find","val","view_existing","viewport","view_new","success","response","create_browser","map","r","default_dbkey","contains","select2","html","trigger","container","editor","data_type","high","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// load required libraries\nrequire([\n    \"utils/utils\",\n    \"libs/jquery/jquery.event.drag\",\n    \"libs/jquery/jquery.event.hover\",\n    \"libs/jquery/jquery.mousewheel\",\n    \"libs/jquery/jquery-ui\",\n    \"libs/jquery/select2\",\n    \"libs/farbtastic\",\n    \"libs/jquery/jquery.form\",\n    \"libs/jquery/jquery.rating\",\n    \"ui/editable-text\"\n], function(mod_utils) {\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine(\n    [\n        \"libs/underscore\",\n        \"viz/trackster/tracks\",\n        \"viz/visualization\",\n        \"mvc/ui/icon-button\",\n        \"utils/query-string-parsing\",\n        \"mvc/grid/grid-view\"\n    ],\n    function(_, tracks, visualization, mod_icon_btn, query_string, GridView) {\n        /**\n * Base Object/Model for inhertiance.\n */\n        var Base = function() {\n            if (this.initialize) {\n                this.initialize.apply(this, arguments);\n            }\n        };\n        Base.extend = Backbone.Model.extend;\n\n        /**\n * User interface controls for trackster\n */\n        var TracksterUI = Base.extend({\n            initialize: function(baseURL) {\n                this.baseURL = baseURL;\n            },\n\n            /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n            save_viz: function() {\n                // show dialog\n                Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n                // Save bookmarks.\n                var bookmarks = [];\n                $(\".bookmark\").each(function() {\n                    bookmarks.push({\n                        position: $(this)\n                            .children(\".position\")\n                            .text(),\n                        annotation: $(this)\n                            .children(\".annotation\")\n                            .text()\n                    });\n                });\n\n                // FIXME: give unique IDs to Drawables and save overview as ID.\n                var overview_track_name = view.overview_drawable\n                        ? view.overview_drawable.config.get_value(\"name\")\n                        : null,\n                    viz_config = {\n                        view: view.to_dict(),\n                        viewport: {\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high,\n                            overview: overview_track_name\n                        },\n                        bookmarks: bookmarks\n                    };\n\n                // Make call to save visualization.\n                return $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        id: view.vis_id,\n                        title: view.config.get_value(\"name\"),\n                        dbkey: view.dbkey,\n                        type: \"trackster\",\n                        vis_json: JSON.stringify(viz_config)\n                    }\n                })\n                    .success(function(vis_info) {\n                        Galaxy.modal.hide();\n                        view.vis_id = vis_info.vis_id;\n                        view.has_changes = false;\n\n                        // Needed to set URL when first saving a visualization.\n                        window.history.pushState(\n                            {},\n                            \"\",\n                            vis_info.url + window.location.hash\n                        );\n                    })\n                    .error(function() {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"Could Not Save\",\n                            body:\n                                \"Could not save visualization. Please try again later.\",\n                            buttons: {\n                                Cancel: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    });\n            },\n\n            /**\n     * Create button menu\n     */\n            createButtonMenu: function() {\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                icon_class: \"plus-button\",\n                                title: \"Add tracks\",\n                                on_click: function() {\n                                    visualization.select_datasets(\n                                        { dbkey: view.dbkey },\n                                        function(new_tracks) {\n                                            _.each(new_tracks, function(track) {\n                                                view.add_drawable(\n                                                    tracks.object_from_template(\n                                                        track,\n                                                        view,\n                                                        view\n                                                    )\n                                                );\n                                            });\n                                        }\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"block--plus\",\n                                title: \"Add group\",\n                                on_click: function() {\n                                    view.add_drawable(\n                                        new tracks.DrawableGroup(view, view, {\n                                            name: \"New Group\"\n                                        })\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"bookmarks\",\n                                title: \"Bookmarks\",\n                                on_click: function() {\n                                    // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                                    force_right_panel(\n                                        $(\"div#right\").css(\"right\") == \"0px\"\n                                            ? \"hide\"\n                                            : \"show\"\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"globe\",\n                                title: \"Circster\",\n                                on_click: function() {\n                                    window.location =\n                                        self.baseURL +\n                                        \"visualization/circster?id=\" +\n                                        view.vis_id;\n                                }\n                            },\n                            {\n                                icon_class: \"disk--arrow\",\n                                title: \"Save\",\n                                on_click: function() {\n                                    self.save_viz();\n                                }\n                            },\n                            {\n                                icon_class: \"cross-circle\",\n                                title: \"Close\",\n                                on_click: function() {\n                                    self.handle_unsaved_changes(view);\n                                }\n                            }\n                        ],\n                        {\n                            tooltip_config: { placement: \"bottom\" }\n                        }\n                    );\n                this.buttonMenu = menu;\n                return menu;\n            },\n\n            /**\n     * Add bookmark.\n     */\n            add_bookmark: function(position, annotation, editable) {\n                // Create HTML.\n                var bookmarks_container = $(\"#right .unified-panel-body\"),\n                    new_bookmark = $(\"<div/>\")\n                        .addClass(\"bookmark\")\n                        .appendTo(bookmarks_container);\n\n                var position_div = $(\"<div/>\")\n                        .addClass(\"position\")\n                        .appendTo(new_bookmark),\n                    position_link = $(\"<a href=''/>\")\n                        .text(position)\n                        .appendTo(position_div)\n                        .click(function() {\n                            view.go_to(position);\n                            return false;\n                        }),\n                    annotation_div = $(\"<div/>\")\n                        .text(annotation)\n                        .appendTo(new_bookmark);\n\n                // If editable, enable bookmark deletion and annotation editing.\n                if (editable) {\n                    var delete_icon_container = $(\"<div/>\")\n                            .addClass(\"delete-icon-container\")\n                            .prependTo(new_bookmark)\n                            .click(function() {\n                                // Remove bookmark.\n                                new_bookmark.slideUp(\"fast\");\n                                new_bookmark.remove();\n                                view.has_changes = true;\n                                return false;\n                            }),\n                        delete_icon = $(\"<a href=''/>\")\n                            .addClass(\"icon-button delete\")\n                            .appendTo(delete_icon_container);\n                    annotation_div\n                        .make_text_editable({\n                            num_rows: 3,\n                            use_textarea: true,\n                            help_text: \"Edit bookmark note\"\n                        })\n                        .addClass(\"annotation\");\n                }\n\n                view.has_changes = true;\n                return new_bookmark;\n            },\n\n            /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n            create_visualization: function(\n                view_config,\n                viewport_config,\n                drawables_config,\n                bookmarks_config,\n                editable\n            ) {\n                // Create view.\n                var self = this,\n                    view = new tracks.TracksterView(\n                        _.extend(view_config, { header: false })\n                    );\n                view.editor = true;\n                $.when(view.load_chroms_deferred).then(function(chrom_info) {\n                    // Viewport config.\n                    if (viewport_config) {\n                        var chrom = viewport_config.chrom,\n                            start = viewport_config.start,\n                            end = viewport_config.end,\n                            overview_drawable_name = viewport_config.overview;\n\n                        if (chrom && start !== undefined && end) {\n                            view.change_chrom(chrom, start, end);\n                        } else {\n                            // No valid viewport, so use first chromosome.\n                            view.change_chrom(chrom_info[0].chrom);\n                        }\n                    } else {\n                        // No viewport, so use first chromosome.\n                        view.change_chrom(chrom_info[0].chrom);\n                    }\n\n                    // Add drawables to view.\n                    if (drawables_config) {\n                        // FIXME: can from_dict() be used to create view and add drawables?\n                        var drawable_config, drawable_type, drawable;\n                        for (var i = 0; i < drawables_config.length; i++) {\n                            view.add_drawable(\n                                tracks.object_from_template(\n                                    drawables_config[i],\n                                    view,\n                                    view\n                                )\n                            );\n                        }\n                    }\n\n                    // Set overview.\n                    var overview_drawable;\n                    for (var i = 0; i < view.drawables.length; i++) {\n                        if (\n                            view.drawables[i].config.get_value(\"name\") ===\n                            overview_drawable_name\n                        ) {\n                            view.set_overview(view.drawables[i]);\n                            break;\n                        }\n                    }\n\n                    // Load bookmarks.\n                    if (bookmarks_config) {\n                        var bookmark;\n                        for (var i = 0; i < bookmarks_config.length; i++) {\n                            bookmark = bookmarks_config[i];\n                            self.add_bookmark(\n                                bookmark[\"position\"],\n                                bookmark[\"annotation\"],\n                                editable\n                            );\n                        }\n                    }\n\n                    // View has no changes as of yet.\n                    view.has_changes = false;\n                });\n\n                // Final initialization.\n                this.set_up_router({ view: view });\n\n                return view;\n            },\n\n            /**\n     * Set up location router to use hashes as track browser locations.\n     */\n            set_up_router: function(options) {\n                new visualization.TrackBrowserRouter(options);\n                Backbone.history.start();\n            },\n\n            /**\n     * Set up keyboard navigation for a visualization.\n     */\n            init_keyboard_nav: function(view) {\n                // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n                $(document).keyup(function(e) {\n                    // Do not navigate if arrow keys used in input element.\n                    if ($(e.srcElement).is(\":input\")) {\n                        return;\n                    }\n\n                    // Key codes: left == 37, up == 38, right == 39, down == 40\n                    switch (e.which) {\n                        case 37:\n                            view.move_fraction(0.25);\n                            break;\n                        case 38:\n                            var change = Math.round(\n                                view.viewport_container.height() / 15.0\n                            );\n                            view.viewport_container.scrollTop(\n                                view.viewport_container.scrollTop() - 20\n                            );\n                            break;\n                        case 39:\n                            view.move_fraction(-0.25);\n                            break;\n                        case 40:\n                            var change = Math.round(\n                                view.viewport_container.height() / 15.0\n                            );\n                            view.viewport_container.scrollTop(\n                                view.viewport_container.scrollTop() + 20\n                            );\n                            break;\n                    }\n                });\n            },\n\n            /**\n     * Handle unsaved changes in visualization.\n     */\n            handle_unsaved_changes: function(view) {\n                if (view.has_changes) {\n                    var self = this;\n                    Galaxy.modal.show({\n                        title: \"Close visualization\",\n                        body:\n                            \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                        buttons: {\n                            Cancel: function() {\n                                Galaxy.modal.hide();\n                            },\n                            \"Leave without Saving\": function() {\n                                $(window).off(\"beforeunload\");\n                                window.location = Galaxy.root + \"visualization\";\n                            },\n                            Save: function() {\n                                $.when(self.save_viz()).then(function() {\n                                    window.location =\n                                        Galaxy.root + \"visualization\";\n                                });\n                            }\n                        }\n                    });\n                } else {\n                    window.location = Galaxy.root + \"visualization\";\n                }\n            }\n        });\n\n        var TracksterView = Backbone.View.extend({\n            // initalize trackster\n            initialize: function() {\n                // load ui\n                ui = new TracksterUI(Galaxy.root);\n\n                // create button menu\n                ui.createButtonMenu();\n\n                // attach the button menu to the panel header and float it left\n                ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n                // add to center panel\n                $(\"#center .unified-panel-header-inner\").append(\n                    ui.buttonMenu.$el\n                );\n\n                // configure right panel\n                $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n                $(\"#right .unified-panel-icons\").append(\n                    \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n                );\n\n                // resize view when showing/hiding right panel (bookmarks for now).\n                $(\"#right-border\").click(function() {\n                    view.resize_window();\n                });\n\n                // hide right panel\n                force_right_panel(\"hide\");\n\n                // check if id is available\n                if (galaxy_config.app.id) {\n                    this.view_existing();\n                } else if (query_string.get(\"dataset_id\")) {\n                    this.choose_existing_or_new();\n                } else {\n                    this.view_new();\n                }\n            },\n\n            choose_existing_or_new: function() {\n                var self = this;\n                var dbkey = query_string.get(\"dbkey\"),\n                    listTracksParams = {},\n                    dataset_params = {\n                        dbkey: dbkey,\n                        dataset_id: query_string.get(\"dataset_id\"),\n                        hda_ldda: query_string.get(\"hda_ldda\"),\n                        gene_region: query_string.get(\"gene_region\")\n                    };\n                if (dbkey) {\n                    listTracksParams[\"f-dbkey\"] = dbkey;\n                }\n\n                Galaxy.modal.show({\n                    title: \"View Data in a New or Saved Visualization?\",\n                    // either have text in here or have to remove body and the header/footer margins\n                    body:\n                        \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                        \"<li>a new track to one of your existing, saved Trackster \" +\n                        \"sessions if they share the genome build: <b>\" +\n                        (dbkey || \"Not available.\") +\n                        \"</b></li>\" +\n                        \"<li>or create a new session with this dataset as the only track</li>\" +\n                        \"</ul></p>\",\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        \"View in saved visualization\": function() {\n                            self.view_in_saved(dataset_params);\n                        },\n                        \"View in new visualization\": function() {\n                            self.view_new();\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_in_saved: function(dataset_params) {\n                var tracks_grid = new GridView({\n                    url_base: Galaxy.root + \"visualization/list_tracks\",\n                    dict_format: true,\n                    embedded: true\n                });\n                Galaxy.modal.show({\n                    title: \"Add Data to Saved Visualization\",\n                    body: tracks_grid.$el,\n                    buttons: {\n                        Cancel: function() {\n                            window.location =\n                                Galaxy.root + \"visualizations/list\";\n                        },\n                        \"Add to visualization\": function() {\n                            $(parent.document)\n                                .find(\"input[name=id]:checked\")\n                                .each(function() {\n                                    dataset_params.id = $(this).val();\n                                    window.location =\n                                        Galaxy.root +\n                                        \"visualization/trackster?\" +\n                                        $.param(dataset_params);\n                                });\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_existing: function() {\n                // get config\n                var viz_config = galaxy_config.app.viz_config;\n\n                // view\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: viz_config.title,\n                        vis_id: viz_config.vis_id,\n                        dbkey: viz_config.dbkey\n                    },\n                    viz_config.viewport,\n                    viz_config.tracks,\n                    viz_config.bookmarks,\n                    true\n                );\n\n                // initialize editor\n                this.init_editor();\n            },\n\n            // view\n            view_new: function() {\n                // reference this\n                var self = this;\n\n                // ajax\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes?chrom_info=True\",\n                    data: {},\n                    error: function() {\n                        alert(\"Couldn't create new browser.\");\n                    },\n                    success: function(response) {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"New Visualization\",\n                            body: self.template_view_new(response),\n                            buttons: {\n                                Cancel: function() {\n                                    window.location =\n                                        Galaxy.root + \"visualizations/list\";\n                                },\n                                Create: function() {\n                                    self.create_browser(\n                                        $(\"#new-title\").val(),\n                                        $(\"#new-dbkey\").val()\n                                    );\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n\n                        // select default\n                        var dbkeys_in_genomes = response.map(function(r) {\n                            return r[1];\n                        });\n                        if (\n                            galaxy_config.app.default_dbkey &&\n                            _.contains(\n                                dbkeys_in_genomes,\n                                galaxy_config.app.default_dbkey\n                            )\n                        ) {\n                            $(\"#new-dbkey\").val(\n                                galaxy_config.app.default_dbkey\n                            );\n                        }\n\n                        // change focus\n                        $(\"#new-title\").focus();\n                        $(\"select[name='dbkey']\").select2();\n\n                        // to support the large number of options for dbkey, enable scrolling in overlay.\n                        $(\"#overlay\").css(\"overflow\", \"auto\");\n                    }\n                });\n            },\n\n            // new browser form\n            template_view_new: function(response) {\n                // start template\n                var html =\n                    '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-title\">Browser name:</label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n                // add dbkeys\n                for (var i = 0; i < response.length; i++) {\n                    html +=\n                        '<option value=\"' +\n                        response[i][1] +\n                        '\">' +\n                        response[i][0] +\n                        \"</option>\";\n                }\n\n                // close selection/finalize template\n                html +=\n                    \"</select>\" +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    \"Is the build not listed here? \" +\n                    '<a href=\"' +\n                    Galaxy.root +\n                    'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                    \"</div>\" +\n                    \"</form>\";\n\n                // return\n                return html;\n            },\n\n            // create\n            create_browser: function(name, dbkey) {\n                $(document).trigger(\"convert_to_values\");\n\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: name,\n                        dbkey: dbkey\n                    },\n                    galaxy_config.app.gene_region\n                );\n\n                // initialize editor\n                this.init_editor();\n\n                // modify view setting\n                view.editor = true;\n            },\n\n            // initialization for editor-specific functions.\n            init_editor: function() {\n                // set title\n                $(\"#center .unified-panel-title\").text(\n                    view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\"\n                );\n\n                // add dataset\n                if (galaxy_config.app.add_dataset)\n                    $.ajax({\n                        url:\n                            Galaxy.root +\n                            \"api/datasets/\" +\n                            galaxy_config.app.add_dataset,\n                        data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                        dataType: \"json\",\n                        success: function(track_data) {\n                            view.add_drawable(\n                                tracks.object_from_template(\n                                    track_data,\n                                    view,\n                                    view\n                                )\n                            );\n                        }\n                    });\n\n                // initialize icons\n                $(\"#add-bookmark-button\").click(function() {\n                    // add new bookmark.\n                    var position =\n                            view.chrom + \":\" + view.low + \"-\" + view.high,\n                        annotation = \"Bookmark description\";\n                    return ui.add_bookmark(position, annotation, true);\n                });\n\n                // initialize keyboard\n                ui.init_keyboard_nav(view);\n\n                $(window).on(\"beforeunload\", function() {\n                    if (view.has_changes) {\n                        return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n                    }\n                });\n            }\n        });\n\n        return {\n            TracksterUI: TracksterUI,\n            GalaxyApp: TracksterView\n        };\n    }\n);\n"]}