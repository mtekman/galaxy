{"version":3,"sources":["viz/bbi-data-manager.js"],"names":["define","visualization","BBIDataManager","GenomeDataManager","extend","load_data","deferred","$","Deferred","resolution","extra_params","region","this","set_data","self","promise","root","bigwig","when","bb","readWigData","result","prev","max","Number","MIN_VALUE","err","data","get","then","forEach","d","min","push","score","dataset_type","entry","resolve"],"mappings":"aAAAA,QAAQ,oBAAqB,mBAAoB,SAC7CC,EADJD,GAwEI,OACIE,eAjEAD,EAAAE,kBAAAC,QAMIC,UAAIC,SAAWC,EAAEC,EAAjBC,EAAAC,GACA,IAAAJ,EAAcK,EAAAA,WAAdC,KAAKC,SAASF,EAAQL,GAEtB,IAKIQ,EACAC,OAAUC,KACPC,YACDC,KACEC,IAAGC,WACCT,GAKJ,WACAG,EAAAF,KACIS,IAAAA,EAAAA,SAkCZ,OAlCQd,EAAAW,KAAAD,EACIK,QAASC,IAAKC,KAAOC,SAAdN,EADXO,GAEAC,EAAAA,KACIR,EAAAC,YACAT,EAAAiB,IAAA,SACAjB,EAAIW,IAAKC,SACLZ,EAAAiB,IAAA,SAEAC,KAAA,SAAAF,GAGH,IAAAN,KAVDC,GAASC,IAAKC,OAAOC,WAYrBE,EAAAG,QAAA,SAAAC,GARIT,EAAKC,MAAQQ,EAAEC,IAAM,IAazBX,EAAAY,MAAeV,EAAOW,IAAtB,EAAA,IAhBJb,EAAAY,MAAAF,EAAAC,IAAA,EAAA,KAwBIG,EAAAA,MAAAA,EAAcH,IAAA,EAAAD,EAAAG,QAGlBpB,EAAKD,MAASF,EAAAA,IAAQyB,EAAAA,QAtC1Bd,EAAAS,IA2CGzB,IAAAA,GACVqB,KAAAN,EA9DLV,OAAAA,EAqDoBwB,aAAc,UAYlCrB,EAAAD,SAAAF,EAAAyB,GAxEJ9B,EAAA+B,QAAAD,OAoEmB9B","file":"../../scripts/viz/bbi-data-manager.js","sourcesContent":["define([\"viz/visualization\", \"libs/bbi/bigwig\"], function(\n    visualization,\n    bigwig\n) {\n    /**\n     * Data manager for BBI datasets/files, including BigWig and BigBed.\n     */\n    var BBIDataManager = visualization.GenomeDataManager.extend({\n        /**\n         * Load data from server and manage data entries. Adds a Deferred to manager\n         * for region; when data becomes available, replaces Deferred with data.\n         * Returns the Deferred that resolves when data is available.\n         */\n        load_data: function(region, mode, resolution, extra_params) {\n            var deferred = $.Deferred();\n            this.set_data(region, deferred);\n\n            var url =\n                    Galaxy.root +\n                    \"datasets/\" +\n                    this.get(\"dataset\").id +\n                    \"/display\",\n                self = this;\n            var promise = new $.Deferred();\n            $.when(bigwig.makeBwg(url)).then(function(bb, err) {\n                $.when(\n                    bb.readWigData(\n                        region.get(\"chrom\"),\n                        region.get(\"start\"),\n                        region.get(\"end\")\n                    )\n                ).then(function(data) {\n                    // Transform data into \"bigwig\" format for LinePainter. \"bigwig\" format is an array of 2-element arrays\n                    // where each element is [position, score]; unlike real bigwig format, no gaps are allowed.\n                    var result = [],\n                        prev = { max: Number.MIN_VALUE };\n                    data.forEach(function(d) {\n                        // If there is a gap between prev and d, fill it with an interval with score 0.\n                        // This is necessary for LinePainter to draw correctly.\n                        if (prev.max !== d.min - 1) {\n                            // +1 to start after previous region.\n                            result.push([prev.max + 1, 0]);\n                            // -2 = -1 for converting from 1-based to 0-based coordinates,\n                            //      -1 for ending before current region.\n                            result.push([d.min - 2, 0]);\n                        }\n\n                        // Add data point for entry start. -1 to convert from wiggle\n                        // 1-based coordinates to 0-based browser coordinates.\n                        result.push([d.min - 1, d.score]);\n\n                        // Add data point for entry end:\n                        result.push([d.max, d.score]);\n\n                        prev = d;\n                    });\n\n                    var entry = {\n                        data: result,\n                        region: region,\n                        dataset_type: \"bigwig\"\n                    };\n\n                    self.set_data(region, entry);\n                    deferred.resolve(entry);\n                });\n            });\n\n            return deferred;\n        }\n    });\n\n    return {\n        BBIDataManager: BBIDataManager\n    };\n});\n"]}