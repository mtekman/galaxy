{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","extend","html_elt_js_obj_dict","is_container","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","set_value","val","config","pow","Math","supportsByteRanges","url","promise","$","Deferred","obj_dict","header_view","model","id","xhr","setRequestHeader","success","header_div","$el","container_div","append","status","action_icons","_","element","obj","children","attr","moveable","container","container_selector","top","cur_container","remove_drawable","this_obj","bind","this","child","position","parent","parents","length","add_drawable","d","offsetY","insertBefore","add_drawable_before","insertAfter","get","i","bottom","outerHeight","is","find","prepend","hasClass","move_drawable","deltaY","type","addClass","removeClass","DATA_NOCONVERTER","CONTINUOUS_DATA_MODES","view","drag_handle_class","drawable","toggle_icon","config_params","show_contents","Drawable","id_counter","name","is_overview","title","ConfigSettingCollectionView","collection","prefs","get_value","config_onchange","css_class","on","build_container_div","header","label","key","TrackHeaderView","default_value","icons_div","changed","hover","show","hide","request_draw","action_icons_def","on_click_fn","hide_contents","new_name","render_in_modal","update_intro_div","remove","prototype","update_icons","init","can_draw","enabled","_draw","options","unpack_drawables","object_from_template","old_name","drawables","get_drawables","DrawableCollection","call","obj_type","drawables_array","index","splice","to_dict","dictified_drawables","push","to_key_value_dict","queue","shift","other","indexOf","replace_drawable","old_drawable","new_drawable","update_html","content_div","replaceWith","old_manager","filters_manager","new_position","DrawableGroup","group","_restore_filter_managers","slice","tracks","setup_multitrack_filtering","clear_tile_cache","toggle","concat","appendTo","num_drawables","FiltersManager","after","parent_div","saved_filters_managers","get_type","can_composite","filters","num_feature_tracks","same_type","visible","filter","shared_filters","j","clear_filters","new_filter","filter_name","tiles_div","composite_icon","CompositeTrack","composite_track","a_type","FeatureTrack","LineTrack","stand_alone","tracks_to_be_redrawn","remove_all","NumberFilter","add_filter","filters_icon","requested_redraw","bottom_container","top_labeltrack","viewport_container","init_filters","show_composite_track","overview_viewport","overview_close","overview_highlight","overview_box","chrom_select","submit_nav","location_span","nav_input","select","source","request","each","TracksterView","Backbone","View","initialize","vis_id","hidden_input","zo_link","nav_controls","zi_link","dbkey","load_chroms_deferred","undefined","change_chrom","label_tracks","max_low","max_high","zoom_factor","min_separation","has_changes","render","canvas_manager","visualization","CanvasManager","ownerDocument","reset","browser_content_div","click","from_models_and_saved_values","current_x","delta_chrom","move_delta","original_low","offsetX","new_scroll","scrollTop","parent_element","top_container","proxy","width","pageX","min","e","span","low","update_location","max","high","old_low","request_redraw","intro_div","select_datasets","track","nav_container","prependTo","nav","add_label_track","LabelTrack","clearTimeout","resize_timer","resize_window","document","redraw","overview_box_background","get_base_color","default_overview_height","height","trigger","keyCode","which","go_to","stopPropagation","tooltip","placement","chrom","trigger_navigate","css","focus","load_chroms","autocomplete","MAX_CHROMS_SELECTABLE","response","all_features","map","get_tracks","t","data_manager","search_features","term","result","dataset_features","when","chrom_data","done","feature","prev_chroms","next_chroms","chrom_start_index","error","alert","zoom_out","then","zoom_in","found","len","delta","reference_track","clientX","current_height","clientY","new_low","chrom_pos","parseInt","new_high","fraction","left","startX","offset","abs","current_chrom_span","data_fetch","redraw_on_move_fn","label_track","setTimeout","window","base","toLowerCase","new_chrom","delay","timer","requestAnimationFrame","_redraw","text","commatize","url_parms","resolution_px_b","left_px","width_px","min_width_px","root","chrom_info","ReferenceTrack","ref_track","track_options","chrom_option","cur_center","start_index","resolve","new_half","overview_drawable","grep","v","reset_overview","resize_viewport","str","replace","split","TracksterToolView","move_fraction","tool","keydown","name_div","param_view","ToolParameterView","run_tool_row","run_on_region_button","run_on_dataset_button","self","run_on_dataset","set_visible","is_visible","params","update_value","tool_id","body","buttons","Close","Galaxy","track_list","url_params","target_dataset_id","to","track_name","new_track","init_for_tool_data","set_filters_manager","floor","track_data","ceil","inputs","ss_deferred","ServerStateDeferred","ajax_settings","JSON","stringify","dataType","contentType","interval","success_fn","success_callback","FilterScaler","Scaler","gen_val","Number","default_val","parseFloat","feature_data","point","region","w_scale","html_elt","predisplay_actions","LineTrackTile","canvas","Tile","mode","all_slotted","feature_mapper","set_overview","dataset","copy","postdraw_actions","FeatureTrackTile","TracksterTool","Tool","defaults","hidden","tool_state","set","remove_inputs","state_dict","get_inputs_dict","events","change :input","param_div","param","html","update_event","target","data_url_extra_params","data_query_wait","run_on_region","min_height_px","max_height_px","update_params","Track","run","action","modal","GenomeRegion","start","end","regions","toJSON","revert_name","current_track","tool_region_and_parameters_str","cancel_fn","bookmarked_regions","from_str","view_region","constructor","hda_ldda","change_mode","check_enter_esc","set_dataset","Dataset","No","go","message","in_handle","drag_control","MAX_VALUE","new_height","visible_height_px","on_resize","stale","incomplete_features","seq_data","VariantTrack","has_icons","other_tiles_features_drawn","dynamic_tool_div","Model","overlay_div","TiledTrack","GenomeDataManager","genome","Genome","data_mode_compatible","data_and_mode_compatible","can_subset","resize","add_resize_handle","track_type","set_min_max","min_value","max_value","set_name","new_mode","ok_fn","param_space_viz_icon","regions_to_use","tools_icon","tile_region","elt","location","href","clear_after","Collection","Yes","tile_promises","tiles","in_drag","_add_yaxis_label","pref_name","original_height","value","tile_cache","num_cols","on_finish","on_change","help_text","line_track_tiles","force","ReadTrack","show_message","msg_html","tile","get_mode","retry","clear","update_auto_mode","_get_drawables","resolution","data_type","dataset_check_type","is_tile","kind","tile_drawn","set_elt","get_tile_data","tracks_data","tile_data","is_deferred","draw_helper","drawing_modes","drawing_heights","predraw_init","init_deferred","show_tile","msg_elt","tile_low","tile_high","getJSON","ctx","translate","left_offset","globalAlpha","globalCompositeOperation","draw_tile","mean","sd","_draw_line_track_tile","set_default_value","tile_element","Cache","tool_view","track_height","region_str","param_str","values","dataset_type","max_rows","entry","stats","isNaN","log","range","screenPosition","filters_available","before_draw","tile_promise","tile_width","tile_index","init_deferreds","apply","make_text_editable","new_val","max_height","update_all_min_max","char_width_px","data_url","display_mode","new_visible","_gen_tile_cache_key","get_elt","cur_visible","o","manager","default_font","m","textAlign","fillStyle","fillText","get_data","data_mode","BBIDataManager","subset_entry","pop","get_canvas_height","new_canvas","DiagonalHeatmapTrack","display_modes","build_config_params","union","canvas_width","DiagonalHeatmapPainter","LinePainter","summary_draw_height","start_end_dct","set_painter_from_config","ref_seq","help","painter","all_incomplete_features","toString","join","tile_incomplete_features","omit","extra_info","tickDistance","show_more_rows_icon","new_div","incremental_slots","slot_features","features","rows_required","dummy_painter","filtered","slots","slotters","show_group","hide_feature","filter_alpha_scaler","filter_height_scaler","visible_height","font","cur_tile","num_samples","get_metadata","get_required_height","deferreds","reference","GenomeReferenceDataManager","samples_div_html","font_size","subset","c","str_len","addable_objects","VcfTrack","template","drawable_type","draw","ArcLinkedFeaturePainter","LinkedFeaturePainter","pluck","inc_features","f","keys","size","new_canvas_ctx","getContext","drawImage","new_tile","update_ui_elt","example_feature","applies_to","mode_icon","level","dummy_context","slotter","FeatureSlotter","x","measureText","flen","update_attrs","keep","alpha_filter","height_filter","b","draw_results","translation","VariantPainter","match","fetch","sample_names","font-size","line-height","ReadPainter"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"viz/visualization\",\n        \"viz/viz_views\",\n        \"viz/trackster/util\",\n        \"viz/trackster/slotting\",\n        \"viz/trackster/painters\",\n        \"viz/trackster/filters\",\n        \"mvc/dataset/data\",\n        \"mvc/tool/tools\",\n        \"utils/config\",\n        \"viz/bbi-data-manager\",\n        \"ui/editable-text\"\n    ],\n    function(\n        _,\n        visualization,\n        viz_views,\n        util,\n        slotting,\n        painters,\n        filters_mod,\n        data,\n        tools_mod,\n        config_mod,\n        bbi\n    ) {\n        var extend = _.extend;\n\n        // ---- Web UI specific utilities ----\n\n        /**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n        // TODO: probably should separate moveable objects from containers.\n        var html_elt_js_obj_dict = {};\n\n        /**\n * Designates an HTML as a container.\n */\n        var is_container = function(element, obj) {\n            html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n        };\n\n        /**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\n        var moveable = function(\n            element,\n            handle_class,\n            container_selector,\n            element_js_obj\n        ) {\n            // HACK: set default value for container selector.\n            container_selector = \".group\";\n\n            // Register element with its object.\n            html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n            // Need to provide selector for handle, not class.\n            element\n                .bind(\n                    \"drag\",\n                    { handle: \".\" + handle_class, relative: true },\n                    function(e, d) {\n                        var element = $(this),\n                            parent = $(this).parent(),\n                            // Only sorting amongst tracks and groups.\n                            children = parent.children(\".track,.group\"),\n                            this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n                            child,\n                            container,\n                            top,\n                            bottom,\n                            i;\n\n                        //\n                        // Enable three types of dragging: (a) out of container; (b) into container;\n                        // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n                        //\n\n                        // Handle dragging out of container.\n                        container = $(this).parents(container_selector);\n                        if (container.length !== 0) {\n                            top = container.position().top;\n                            bottom = top + container.outerHeight();\n                            var cur_container =\n                                html_elt_js_obj_dict[container.attr(\"id\")];\n                            if (d.offsetY < top) {\n                                // Moving above container.\n                                $(this).insertBefore(container);\n                                cur_container.remove_drawable(this_obj);\n                                cur_container.container.add_drawable_before(\n                                    this_obj,\n                                    cur_container\n                                );\n                                return;\n                            } else if (d.offsetY > bottom) {\n                                // Moving below container.\n                                $(this).insertAfter(container);\n                                cur_container.remove_drawable(this_obj);\n                                cur_container.container.add_drawable(this_obj);\n                                return;\n                            }\n                        }\n\n                        // Handle dragging into container. Child is appended to container's content_div.\n                        container = null;\n                        for (i = 0; i < children.length; i++) {\n                            child = $(children.get(i));\n                            top = child.position().top;\n                            bottom = top + child.outerHeight();\n                            // Dragging into container if child is a container and offset is inside container.\n                            if (\n                                child.is(container_selector) &&\n                                this !== child.get(0) &&\n                                d.offsetY >= top &&\n                                d.offsetY <= bottom\n                            ) {\n                                // Append/prepend based on where offsetY is closest to and return.\n                                if (d.offsetY - top < bottom - d.offsetY) {\n                                    child.find(\".content-div\").prepend(this);\n                                } else {\n                                    child.find(\".content-div\").append(this);\n                                }\n                                // Update containers. Object may not have container if it is being moved quickly.\n                                if (this_obj.container) {\n                                    this_obj.container.remove_drawable(\n                                        this_obj\n                                    );\n                                }\n                                html_elt_js_obj_dict[\n                                    child.attr(\"id\")\n                                ].add_drawable(this_obj);\n                                return;\n                            }\n                        }\n\n                        // Handle sibling movement, aka sorting.\n\n                        // Determine new position\n                        for (i = 0; i < children.length; i++) {\n                            child = $(children.get(i));\n                            if (\n                                d.offsetY < child.position().top &&\n                                // Cannot move tracks above reference track or intro div.\n                                !(\n                                    child.hasClass(\"reference-track\") ||\n                                    child.hasClass(\"intro\")\n                                )\n                            ) {\n                                break;\n                            }\n                        }\n\n                        // If not already in the right place, move. Need\n                        // to handle the end specially since we don't have\n                        // insert at index\n                        if (i === children.length) {\n                            if (this !== children.get(i - 1)) {\n                                parent.append(this);\n                                html_elt_js_obj_dict[\n                                    parent.attr(\"id\")\n                                ].move_drawable(this_obj, i);\n                            }\n                        } else if (this !== children.get(i)) {\n                            $(this).insertBefore(children.get(i));\n                            // Need to adjust insert position if moving down because move is changing\n                            // indices of all list items.\n                            html_elt_js_obj_dict[\n                                parent.attr(\"id\")\n                            ].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n                        }\n                    }\n                )\n                .bind(\"dragstart\", function() {\n                    $(this).addClass(\"dragging\");\n                })\n                .bind(\"dragend\", function() {\n                    $(this).removeClass(\"dragging\");\n                });\n        };\n\n        /**\n * Init constants & functions used throughout trackster.\n */\n        var // Padding at the top of tracks for error messages\n            ERROR_PADDING = 20,\n            // Maximum number of rows un a slotted track\n            MAX_FEATURE_DEPTH = 100,\n            // Minimum width for window for squish to be used.\n            MIN_SQUISH_VIEW_WIDTH = 12000,\n            // Number of pixels per tile, not including left offset.\n            TILE_SIZE = 400,\n            DEFAULT_DATA_QUERY_WAIT = 5000,\n            // Maximum number of chromosomes that are selectable at any one time.\n            MAX_CHROMS_SELECTABLE = 100,\n            DATA_ERROR = \"Cannot display dataset due to an error. \",\n            DATA_NOCONVERTER =\n                \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n            DATA_NONE = \"No data for this chrom/contig.\",\n            DATA_PENDING =\n                \"Preparing data. This can take a while for a large dataset. \" +\n                \"If the visualization is saved and closed, preparation will continue in the background.\",\n            DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n            DATA_LOADING = \"Loading data...\",\n            DATA_OK = \"Ready for display\",\n            TILE_CACHE_SIZE = 10,\n            DATA_CACHE_SIZE = 20,\n            // Numerical/continuous data display modes.\n            CONTINUOUS_DATA_MODES = [\n                \"Histogram\",\n                \"Line\",\n                \"Filled\",\n                \"Intensity\"\n            ];\n\n        /**\n * Round a number to a given number of decimal places.\n */\n        function round(num, places) {\n            // Default rounding is to integer.\n            if (!places) {\n                places = 0;\n            }\n\n            var val = Math.pow(10, places);\n            return Math.round(num * val) / val;\n        }\n\n        /**\n * Check if a server can do byte range requests.\n */\n        function supportsByteRanges(url) {\n            var promise = $.Deferred();\n            $.ajax({\n                type: \"HEAD\",\n                url: url,\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n                },\n                success: function(result, status, xhr) {\n                    promise.resolve(xhr.status === 206);\n                }\n            });\n\n            return promise;\n        }\n\n        /**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n        /**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\n        var Drawable = function(view, container, obj_dict) {\n            if (!Drawable.id_counter) {\n                Drawable.id_counter = 0;\n            }\n            this.id = Drawable.id_counter++;\n            this.view = view;\n            this.container = container;\n            this.drag_handle_class = obj_dict.drag_handle_class;\n            this.is_overview = false;\n            this.action_icons = {};\n\n            // -- Set up drawable configuration. --\n            this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                this.config_params,\n                obj_dict.prefs\n            );\n\n            // If there's no saved name, use object name.\n            if (!this.config.get_value(\"name\")) {\n                this.config.set_value(\"name\", obj_dict.name);\n            }\n            if (this.config_onchange) {\n                this.config.on(\"change\", this.config_onchange, this);\n            }\n\n            // Build Drawable HTML and behaviors.\n            this.container_div = this.build_container_div();\n            this.header_div = null;\n\n            // Use opt-out policy on header creation because this is the more frequent approach:\n            // unless flag set, create header.\n            if (obj_dict.header !== false) {\n                var header_view = new viz_views.TrackHeaderView({\n                    model: this,\n                    id: this.id\n                });\n\n                this.header_div = header_view.$el;\n                this.container_div.append(this.header_div);\n\n                // Show icons when users is hovering over track.\n                var icons_div = header_view.icons_div;\n                this.action_icons = header_view.action_icons;\n                this.container_div.hover(\n                    function() {\n                        icons_div.show();\n                    },\n                    function() {\n                        icons_div.hide();\n                    }\n                );\n            }\n        };\n\n        Drawable.prototype.action_icons_def = [\n            // Hide/show drawable content.\n            // FIXME: make this an odict for easier lookup.\n            {\n                name: \"toggle_icon\",\n                title: \"Hide/show content\",\n                css_class: \"toggle\",\n                on_click_fn: function(drawable) {\n                    if (drawable.config.get_value(\"content_visible\")) {\n                        drawable.action_icons.toggle_icon\n                            .addClass(\"toggle-expand\")\n                            .removeClass(\"toggle\");\n                        drawable.hide_contents();\n                        drawable.config.set_value(\"content_visible\", false);\n                    } else {\n                        drawable.action_icons.toggle_icon\n                            .addClass(\"toggle\")\n                            .removeClass(\"toggle-expand\");\n                        drawable.config.set_value(\"content_visible\", true);\n                        drawable.show_contents();\n                    }\n                }\n            },\n            // Edit settings.\n            {\n                name: \"settings_icon\",\n                title: \"Edit settings\",\n                css_class: \"gear\",\n                on_click_fn: function(drawable) {\n                    var view = new config_mod.ConfigSettingCollectionView({\n                        collection: drawable.config\n                    });\n                    view.render_in_modal(\"Configure Track\");\n                }\n            },\n            // Remove.\n            {\n                name: \"remove_icon\",\n                title: \"Remove\",\n                css_class: \"remove-icon\",\n                on_click_fn: function(drawable) {\n                    // Tooltip for remove icon must be deleted when drawable is deleted.\n                    $(\".tooltip\").remove();\n                    drawable.remove();\n                }\n            }\n        ];\n\n        extend(Drawable.prototype, {\n            config_params: [\n                { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n                {\n                    key: \"content_visible\",\n                    type: \"bool\",\n                    default_value: true,\n                    hidden: true\n                }\n            ],\n\n            config_onchange: function() {},\n\n            init: function() {},\n\n            changed: function() {\n                this.view.changed();\n            },\n\n            can_draw: function() {\n                if (this.enabled && this.config.get_value(\"content_visible\")) {\n                    return true;\n                }\n\n                return false;\n            },\n\n            request_draw: function() {},\n\n            _draw: function(options) {},\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {},\n\n            /**\n     * Set drawable name.\n     */\n            set_name: function(new_name) {\n                this.old_name = this.config.get_value(\"name\");\n                this.config.set_value(\"name\", new_name);\n            },\n\n            /**\n     * Revert track name; currently name can be reverted only once.\n     */\n            revert_name: function() {\n                if (this.old_name) {\n                    this.config.set_value(\"name\", this.old_name);\n                }\n            },\n\n            /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n            remove: function() {\n                this.changed();\n\n                this.container.remove_drawable(this);\n                var view = this.view;\n                this.container_div.hide(0, function() {\n                    $(this).remove();\n                    // HACK: is there a better way to update the view?\n                    view.update_intro_div();\n                });\n            },\n\n            /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n            build_container_div: function() {},\n\n            /**\n     * Update icons.\n     */\n            update_icons: function() {},\n\n            /**\n     * Hide drawable's contents.\n     */\n            hide_contents: function() {},\n\n            /**\n     * Show drawable's contents.\n     */\n            show_contents: function() {},\n\n            /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n            get_drawables: function() {}\n        });\n\n        /**\n * A collection of drawable objects.\n */\n        var DrawableCollection = function(view, container, obj_dict) {\n            Drawable.call(this, view, container, obj_dict);\n\n            // Attribute init.\n            this.obj_type = obj_dict.obj_type;\n            this.drawables = [];\n        };\n\n        extend(DrawableCollection.prototype, Drawable.prototype, {\n            /**\n     * Unpack and add drawables to the collection.\n     */\n            unpack_drawables: function(drawables_array) {\n                // Add drawables to collection.\n                this.drawables = [];\n                var drawable;\n                for (var i = 0; i < drawables_array.length; i++) {\n                    drawable = object_from_template(\n                        drawables_array[i],\n                        this.view,\n                        this\n                    );\n                    this.add_drawable(drawable);\n                }\n            },\n\n            /**\n     * Init each drawable in the collection.\n     */\n            init: function() {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].init();\n                }\n            },\n\n            /**\n     * Draw each drawable in the collection.\n     */\n            _draw: function(options) {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i]._draw(options);\n                }\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                var dictified_drawables = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    dictified_drawables.push(this.drawables[i].to_dict());\n                }\n                return {\n                    prefs: this.config.to_key_value_dict(),\n                    obj_type: this.obj_type,\n                    drawables: dictified_drawables\n                };\n            },\n\n            /**\n     * Add a drawable to the end of the collection.\n     */\n            add_drawable: function(drawable) {\n                this.drawables.push(drawable);\n                drawable.container = this;\n                this.changed();\n            },\n\n            /**\n     * Add a drawable before another drawable.\n     */\n            add_drawable_before: function(drawable, other) {\n                this.changed();\n                var index = this.drawables.indexOf(other);\n                if (index !== -1) {\n                    this.drawables.splice(index, 0, drawable);\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Replace one drawable with another.\n     */\n            replace_drawable: function(\n                old_drawable,\n                new_drawable,\n                update_html\n            ) {\n                var index = this.drawables.indexOf(old_drawable);\n                if (index !== -1) {\n                    this.drawables[index] = new_drawable;\n                    if (update_html) {\n                        old_drawable.container_div.replaceWith(\n                            new_drawable.container_div\n                        );\n                    }\n                    this.changed();\n                }\n                return index;\n            },\n\n            /**\n     * Remove drawable from this collection.\n     */\n            remove_drawable: function(drawable) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Found drawable to remove.\n                    this.drawables.splice(index, 1);\n                    drawable.container = null;\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Move drawable to another location in collection.\n     */\n            move_drawable: function(drawable, new_position) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Remove from current position:\n                    this.drawables.splice(index, 1);\n                    // insert into new position:\n                    this.drawables.splice(new_position, 0, drawable);\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Returns all <track_type> tracks in collection.\n     */\n            get_tracks: function(track_type) {\n                // Initialize queue with copy of drawables array.\n                var queue = this.drawables.slice(0),\n                    tracks = [],\n                    drawable;\n                while (queue.length !== 0) {\n                    drawable = queue.shift();\n                    if (drawable instanceof track_type) {\n                        tracks.push(drawable);\n                    } else if (drawable.drawables) {\n                        queue = queue.concat(drawable.drawables);\n                    }\n                }\n                return tracks;\n            }\n        });\n\n        /**\n * A group of drawables that are moveable, visible.\n */\n        var DrawableGroup = function(view, container, obj_dict) {\n            extend(obj_dict, {\n                obj_type: \"DrawableGroup\",\n                drag_handle_class: \"group-handle\"\n            });\n            DrawableCollection.call(this, view, container, obj_dict);\n\n            // Set up containers/moving for group: register both container_div and content div as container\n            // because both are used as containers (container div to recognize container, content_div to\n            // store elements). Group can be moved.\n            this.content_div = $(\"<div/>\")\n                .addClass(\"content-div\")\n                .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n                .appendTo(this.container_div);\n            is_container(this.container_div, this);\n            is_container(this.content_div, this);\n            moveable(\n                this.container_div,\n                this.drag_handle_class,\n                \".group\",\n                this\n            );\n\n            // Set up filters.\n            this.filters_manager = new filters_mod.FiltersManager(this);\n            this.header_div.after(this.filters_manager.parent_div);\n\n            // HACK: add div to clear floating elements.\n            this.filters_manager.parent_div.after(\n                $(\"<div style='clear: both'/>\")\n            );\n\n            // For saving drawables' filter managers when group-level filtering is done:\n            this.saved_filters_managers = [];\n\n            // Add drawables.\n            if (\"drawables\" in obj_dict) {\n                this.unpack_drawables(obj_dict.drawables);\n            }\n\n            // Restore filters.\n            if (\"filters\" in obj_dict) {\n                // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n                var old_manager = this.filters_manager;\n                this.filters_manager = new filters_mod.FiltersManager(\n                    this,\n                    obj_dict.filters\n                );\n                old_manager.parent_div.replaceWith(\n                    this.filters_manager.parent_div\n                );\n\n                if (obj_dict.filters.visible) {\n                    this.setup_multitrack_filtering();\n                }\n            }\n        };\n\n        extend(\n            DrawableGroup.prototype,\n            Drawable.prototype,\n            DrawableCollection.prototype,\n            {\n                action_icons_def: [\n                    Drawable.prototype.action_icons_def[0],\n                    Drawable.prototype.action_icons_def[1],\n                    // Replace group with composite track.\n                    {\n                        name: \"composite_icon\",\n                        title: \"Show composite track\",\n                        css_class: \"layers-stack\",\n                        on_click_fn: function(group) {\n                            $(\".tooltip\").remove();\n                            group.show_composite_track();\n                        }\n                    },\n                    // Toggle track filters.\n                    {\n                        name: \"filters_icon\",\n                        title: \"Filters\",\n                        css_class: \"ui-slider-050\",\n                        on_click_fn: function(group) {\n                            // TODO: update Tooltip text.\n                            if (group.filters_manager.visible()) {\n                                // Hiding filters.\n                                group.filters_manager.clear_filters();\n                                group._restore_filter_managers();\n                                // TODO: maintain current filter by restoring and setting saved manager's\n                                // settings to current/shared manager's settings.\n                                // TODO: need to restore filter managers when moving drawable outside group.\n                            } else {\n                                // Showing filters.\n                                group.setup_multitrack_filtering();\n                                group.request_draw({ clear_tile_cache: true });\n                            }\n                            group.filters_manager.toggle();\n                        }\n                    },\n                    Drawable.prototype.action_icons_def[2]\n                ],\n\n                build_container_div: function() {\n                    var container_div = $(\"<div/>\")\n                        .addClass(\"group\")\n                        .attr(\"id\", \"group_\" + this.id);\n                    if (this.container) {\n                        this.container.content_div.append(container_div);\n                    }\n                    return container_div;\n                },\n\n                hide_contents: function() {\n                    this.tiles_div.hide();\n                },\n\n                show_contents: function() {\n                    // Show the contents div and labels (if present)\n                    this.tiles_div.show();\n                    // Request a redraw of the content\n                    this.request_draw();\n                },\n\n                update_icons: function() {\n                    //\n                    // Handle update when there are no tracks.\n                    //\n                    var num_drawables = this.drawables.length;\n                    if (num_drawables === 0) {\n                        this.action_icons.composite_icon.hide();\n                        this.action_icons.filters_icon.hide();\n                    } else if (num_drawables === 1) {\n                        this.action_icons.composite_icon.toggle(\n                            this.drawables[0] instanceof CompositeTrack\n                        );\n                        this.action_icons.filters_icon.hide();\n                    } else {\n                        // There are 2 or more tracks.\n\n                        //\n                        // Determine if a composite track can be created. Current criteria:\n                        // (a) all tracks are line tracks;\n                        //      OR\n                        // FIXME: this is not enabled right now because it has not been well tested:\n                        // (b) there is a single FeatureTrack.\n                        //\n\n                        // All tracks the same?\n                        var i,\n                            j,\n                            drawable,\n                            same_type = true,\n                            a_type = this.drawables[0].get_type(),\n                            num_feature_tracks = 0;\n                        for (i = 0; i < num_drawables; i++) {\n                            drawable = this.drawables[i];\n                            if (drawable.get_type() !== a_type) {\n                                can_composite = false;\n                                break;\n                            }\n                            if (drawable instanceof FeatureTrack) {\n                                num_feature_tracks++;\n                            }\n                        }\n\n                        if (\n                            same_type &&\n                            this.drawables[0] instanceof LineTrack\n                        ) {\n                            this.action_icons.composite_icon.show();\n                        } else {\n                            this.action_icons.composite_icon.hide();\n                            $(\".tooltip\").remove();\n                        }\n\n                        //\n                        // Set up group-level filtering and update filter icon.\n                        //\n                        if (\n                            num_feature_tracks > 1 &&\n                            num_feature_tracks === this.drawables.length\n                        ) {\n                            //\n                            // Find shared filters.\n                            //\n                            var shared_filters = {},\n                                filter;\n\n                            // Init shared filters with filters from first drawable.\n                            drawable = this.drawables[0];\n                            for (\n                                j = 0;\n                                j < drawable.filters_manager.filters.length;\n                                j++\n                            ) {\n                                filter = drawable.filters_manager.filters[j];\n                                shared_filters[filter.name] = [filter];\n                            }\n\n                            // Create lists of shared filters.\n                            for (i = 1; i < this.drawables.length; i++) {\n                                drawable = this.drawables[i];\n                                for (\n                                    j = 0;\n                                    j < drawable.filters_manager.filters.length;\n                                    j++\n                                ) {\n                                    filter =\n                                        drawable.filters_manager.filters[j];\n                                    if (filter.name in shared_filters) {\n                                        shared_filters[filter.name].push(\n                                            filter\n                                        );\n                                    }\n                                }\n                            }\n\n                            //\n                            // Create filters for shared filters manager. Shared filters manager is group's\n                            // manager.\n                            //\n                            this.filters_manager.remove_all();\n                            var filters, new_filter, min, max;\n                            for (var filter_name in shared_filters) {\n                                filters = shared_filters[filter_name];\n                                if (filters.length === num_feature_tracks) {\n                                    // Add new filter.\n                                    // FIXME: can filter.copy() be used?\n                                    new_filter = new filters_mod.NumberFilter({\n                                        name: filters[0].name,\n                                        index: filters[0].index\n                                    });\n                                    this.filters_manager.add_filter(new_filter);\n                                }\n                            }\n\n                            // Show/hide icon based on filter availability.\n                            this.action_icons.filters_icon.toggle(\n                                this.filters_manager.filters.length > 0\n                            );\n                        } else {\n                            this.action_icons.filters_icon.hide();\n                        }\n                    }\n                },\n\n                /**\n     * Restore individual track filter managers.\n     */\n                _restore_filter_managers: function() {\n                    for (var i = 0; i < this.drawables.length; i++) {\n                        this.drawables[\n                            i\n                        ].filters_manager = this.saved_filters_managers[i];\n                    }\n                    this.saved_filters_managers = [];\n                },\n\n                /**\n     *\n     */\n                setup_multitrack_filtering: function() {\n                    // Save tracks' managers and set up shared manager.\n                    if (this.filters_manager.filters.length > 0) {\n                        // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                        this.saved_filters_managers = [];\n                        for (var i = 0; i < this.drawables.length; i++) {\n                            var drawable = this.drawables[i];\n                            this.saved_filters_managers.push(\n                                drawable.filters_manager\n                            );\n                            drawable.filters_manager = this.filters_manager;\n                        }\n\n                        //TODO: hide filters icons for each drawable?\n                    }\n                    this.filters_manager.init_filters();\n                },\n\n                /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n                show_composite_track: function() {\n                    var composite_track = new CompositeTrack(\n                        this.view,\n                        this.view,\n                        {\n                            name: this.config.get_value(\"name\"),\n                            drawables: this.drawables\n                        }\n                    );\n                    var index = this.container.replace_drawable(\n                        this,\n                        composite_track,\n                        true\n                    );\n                    composite_track.request_draw();\n                },\n\n                add_drawable: function(drawable) {\n                    DrawableCollection.prototype.add_drawable.call(\n                        this,\n                        drawable\n                    );\n                    this.update_icons();\n                },\n\n                remove_drawable: function(drawable) {\n                    DrawableCollection.prototype.remove_drawable.call(\n                        this,\n                        drawable\n                    );\n                    this.update_icons();\n                },\n\n                to_dict: function() {\n                    // If filters are visible, need to restore original filter managers before converting to dict.\n                    if (this.filters_manager.visible()) {\n                        this._restore_filter_managers();\n                    }\n\n                    var obj_dict = extend(\n                        DrawableCollection.prototype.to_dict.call(this),\n                        { filters: this.filters_manager.to_dict() }\n                    );\n\n                    // Setup multi-track filtering again.\n                    if (this.filters_manager.visible()) {\n                        this.setup_multitrack_filtering();\n                    }\n\n                    return obj_dict;\n                },\n\n                request_draw: function(options) {\n                    _.each(this.drawables, function(d) {\n                        d.request_draw(options);\n                    });\n                }\n            }\n        );\n\n        /**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\n        var TracksterView = Backbone.View.extend({\n            initialize: function(obj_dict) {\n                extend(obj_dict, {\n                    obj_type: \"View\"\n                });\n                DrawableCollection.call(\n                    this,\n                    \"View\",\n                    obj_dict.container,\n                    obj_dict\n                );\n                this.chrom = null;\n                this.vis_id = obj_dict.vis_id;\n                this.dbkey = obj_dict.dbkey;\n                this.stand_alone =\n                    obj_dict.stand_alone !== undefined\n                        ? obj_dict.stand_alone\n                        : true;\n                this.label_tracks = [];\n                this.tracks_to_be_redrawn = [];\n                this.max_low = 0;\n                this.max_high = 0;\n                this.zoom_factor = 3;\n                this.min_separation = 30;\n                this.has_changes = false;\n                // Deferred object that indicates when view's chrom data has been loaded.\n                this.load_chroms_deferred = null;\n                this.render();\n                this.canvas_manager = new visualization.CanvasManager(\n                    this.container.get(0).ownerDocument\n                );\n                this.reset();\n\n                // Define track configuration\n                this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        }\n                    ],\n                    { name: obj_dict.name }\n                );\n            },\n\n            render: function() {\n                // Attribute init.\n                this.requested_redraw = false;\n\n                // Create DOM elements\n                var parent_element = this.container,\n                    view = this;\n                // Top container for things that are fixed at the top\n                this.top_container = $(\"<div/>\")\n                    .addClass(\"top-container\")\n                    .appendTo(parent_element);\n                // Browser content, primary tracks are contained in here\n                this.browser_content_div = $(\"<div/>\")\n                    .addClass(\"content\")\n                    .appendTo(parent_element);\n                // Bottom container for things that are fixed at the bottom\n                this.bottom_container = $(\"<div/>\")\n                    .addClass(\"bottom-container\")\n                    .appendTo(parent_element);\n                // Label track fixed at top\n                this.top_labeltrack = $(\"<div/>\")\n                    .addClass(\"top-labeltrack\")\n                    .appendTo(this.top_container);\n                // Viewport for dragging tracks in center\n                this.viewport_container = $(\"<div/>\")\n                    .addClass(\"viewport-container\")\n                    .attr(\"id\", \"viewport-container\")\n                    .appendTo(this.browser_content_div);\n                // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n                this.content_div = this.viewport_container;\n                is_container(this.viewport_container, view);\n                // Introduction div shown when there are no tracks.\n                this.intro_div = $(\"<div/>\")\n                    .addClass(\"intro\")\n                    .appendTo(this.viewport_container);\n                var add_tracks_button = $(\"<div/>\")\n                    .text(\"Add Datasets to Visualization\")\n                    .addClass(\"action-button\")\n                    .appendTo(this.intro_div)\n                    .click(function() {\n                        visualization.select_datasets(\n                            { dbkey: view.dbkey },\n                            function(tracks) {\n                                _.each(tracks, function(track) {\n                                    view.add_drawable(\n                                        object_from_template(track, view, view)\n                                    );\n                                });\n                            }\n                        );\n                    });\n\n                // Navigation at top\n                this.nav_container = $(\"<div/>\")\n                    .addClass(\"trackster-nav-container\")\n                    .prependTo(this.top_container);\n                this.nav = $(\"<div/>\")\n                    .addClass(\"trackster-nav\")\n                    .appendTo(this.nav_container);\n\n                if (this.stand_alone) {\n                    this.nav_container.addClass(\"stand-alone\");\n                    this.nav.addClass(\"stand-alone\");\n                }\n\n                // Overview (scrollbar and overview plot) at bottom\n                this.overview = $(\"<div/>\")\n                    .addClass(\"overview\")\n                    .appendTo(this.bottom_container);\n                this.overview_viewport = $(\"<div/>\")\n                    .addClass(\"overview-viewport\")\n                    .appendTo(this.overview);\n                this.overview_close = $(\"<a/>\")\n                    .attr(\"title\", \"Close overview\")\n                    .addClass(\"icon-button overview-close tooltip\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_highlight = $(\"<div/>\")\n                    .addClass(\"overview-highlight\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_box_background = $(\"<div/>\")\n                    .addClass(\"overview-boxback\")\n                    .appendTo(this.overview_viewport);\n                this.overview_box = $(\"<div/>\")\n                    .addClass(\"overview-box\")\n                    .appendTo(this.overview_viewport);\n                this.default_overview_height = this.overview_box.height();\n\n                this.nav_controls = $(\"<div/>\")\n                    .addClass(\"nav-controls\")\n                    .appendTo(this.nav);\n                this.chrom_select = $(\"<select/>\")\n                    .attr({ name: \"chrom\" })\n                    .addClass(\"chrom-nav\")\n                    .append(\"<option value=''>Loading</option>\")\n                    .appendTo(this.nav_controls);\n                var submit_nav = function(e) {\n                    if (\n                        e.type === \"focusout\" ||\n                        (e.keyCode || e.which) === 13 ||\n                        (e.keyCode || e.which) === 27\n                    ) {\n                        if ((e.keyCode || e.which) !== 27) {\n                            // Not escape key\n                            view.go_to($(this).val());\n                        }\n                        $(this).hide();\n                        $(this).val(\"\");\n                        view.location_span.show();\n                        view.chrom_select.show();\n                    }\n\n                    // Suppress key presses so that they do impact viz.\n                    e.stopPropagation();\n                };\n                this.nav_input = $(\"<input/>\")\n                    .addClass(\"nav-input\")\n                    .hide()\n                    .bind(\"keyup focusout\", submit_nav)\n                    .appendTo(this.nav_controls);\n                this.location_span = $(\"<span/>\")\n                    .addClass(\"location\")\n                    .attr(\"title\", \"Click to change location\")\n                    .tooltip({ placement: \"bottom\" })\n                    .appendTo(this.nav_controls);\n                this.location_span.click(function() {\n                    view.location_span.hide();\n                    view.chrom_select.hide();\n                    view.nav_input.val(\n                        view.chrom + \":\" + view.low + \"-\" + view.high\n                    );\n                    view.nav_input.css(\"display\", \"inline-block\");\n                    view.nav_input.select();\n                    view.nav_input.focus();\n                    // Set up autocomplete for tracks' features.\n                    view.nav_input.autocomplete({\n                        source: function(request, response) {\n                            // Using current text, query each track and create list of all matching features.\n                            var all_features = [],\n                                feature_search_deferreds = $.map(\n                                    view.get_tracks(FeatureTrack),\n                                    function(t) {\n                                        return t.data_manager\n                                            .search_features(request.term)\n                                            .success(function(\n                                                dataset_features\n                                            ) {\n                                                all_features = all_features.concat(\n                                                    dataset_features\n                                                );\n                                            });\n                                    }\n                                );\n\n                            // When all searching is done, fill autocomplete.\n                            $.when\n                                .apply($, feature_search_deferreds)\n                                .done(function() {\n                                    response(\n                                        $.map(all_features, function(feature) {\n                                            return {\n                                                label: feature[0],\n                                                value: feature[1]\n                                            };\n                                        })\n                                    );\n                                });\n                        },\n                        minLength: 2\n                    });\n                });\n                if (this.vis_id !== undefined) {\n                    this.hidden_input = $(\"<input/>\")\n                        .attr(\"type\", \"hidden\")\n                        .val(this.vis_id)\n                        .appendTo(this.nav_controls);\n                }\n\n                this.zo_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-out\")\n                    .attr(\"title\", \"Zoom out\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_out();\n                    })\n                    .appendTo(this.nav_controls);\n                this.zi_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-in\")\n                    .attr(\"title\", \"Zoom in\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_in();\n                    })\n                    .appendTo(this.nav_controls);\n\n                // Get initial set of chroms.\n                this.load_chroms_deferred = this.load_chroms({ low: 0 });\n                this.chrom_select.bind(\"change\", function() {\n                    view.change_chrom(view.chrom_select.val());\n                });\n\n                /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n                // Blur tool/filter inputs when user clicks on content div.\n                this.browser_content_div.click(function(e) {\n                    $(this)\n                        .find(\"input\")\n                        .trigger(\"blur\");\n                });\n\n                // Double clicking zooms in\n                this.browser_content_div.bind(\"dblclick\", function(e) {\n                    view.zoom_in(e.pageX, this.viewport_container);\n                });\n\n                // Dragging the overview box (~ horizontal scroll bar)\n                this.overview_box\n                    .bind(\"dragstart\", function(e, d) {\n                        this.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var delta = d.offsetX - this.current_x;\n                        this.current_x = d.offsetX;\n                        var delta_chrom = Math.round(\n                            delta /\n                                view.viewport_container.width() *\n                                (view.max_high - view.max_low)\n                        );\n                        view.move_delta(-delta_chrom);\n                    });\n\n                this.overview_close.click(function() {\n                    view.reset_overview();\n                });\n\n                // Dragging in the viewport scrolls\n                this.viewport_container\n                    .bind(\"draginit\", function(e, d) {\n                        // Disable interaction if started in scrollbar (for webkit)\n                        if (e.clientX > view.viewport_container.width() - 16) {\n                            return false;\n                        }\n                    })\n                    .bind(\"dragstart\", function(e, d) {\n                        d.original_low = view.low;\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var container = $(this);\n                        var delta = d.offsetX - d.current_x;\n                        var new_scroll =\n                            container.scrollTop() -\n                            (e.clientY - d.current_height);\n                        container.scrollTop(new_scroll);\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                        var delta_chrom = Math.round(\n                            delta /\n                                view.viewport_container.width() *\n                                (view.high - view.low)\n                        );\n                        view.move_delta(delta_chrom);\n                    });\n                /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n                // Dragging in the top label track allows selecting a region to zoom in on selected region.\n                this.top_labeltrack\n                    .bind(\"dragstart\", function(e, d) {\n                        return $(\"<div/>\")\n                            .addClass(\"zoom-area\")\n                            .css(\n                                \"height\",\n                                view.browser_content_div.height() +\n                                    view.top_labeltrack.height() +\n                                    1\n                            )\n                            .appendTo($(this));\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        $(d.proxy).css({\n                            left:\n                                Math.min(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            width: Math.abs(e.pageX - d.startX)\n                        });\n                        var min =\n                                Math.min(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            max =\n                                Math.max(e.pageX, d.startX) -\n                                view.container.offset().left,\n                            span = view.high - view.low,\n                            width = view.viewport_container.width();\n                        view.update_location(\n                            Math.round(min / width * span) + view.low,\n                            Math.round(max / width * span) + view.low\n                        );\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        var min = Math.min(e.pageX, d.startX),\n                            max = Math.max(e.pageX, d.startX),\n                            span = view.high - view.low,\n                            width = view.viewport_container.width(),\n                            old_low = view.low;\n                        view.low = Math.round(min / width * span) + old_low;\n                        view.high = Math.round(max / width * span) + old_low;\n                        $(d.proxy).remove();\n                        view.request_redraw();\n                    });\n\n                // FIXME: this is still wonky for embedded visualizations.\n                /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n                this.add_label_track(\n                    new LabelTrack(this, { content_div: this.top_labeltrack })\n                );\n\n                $(window).bind(\"resize\", function() {\n                    // Stop previous timer.\n                    if (this.resize_timer) {\n                        clearTimeout(this.resize_timer);\n                    }\n\n                    // When function activated, resize window and redraw.\n                    this.resize_timer = setTimeout(function() {\n                        view.resize_window();\n                    }, 500);\n                });\n                $(document).bind(\"redraw\", function() {\n                    view.redraw();\n                });\n\n                this.reset();\n                $(window).trigger(\"resize\");\n            },\n\n            get_base_color: function(base) {\n                return (\n                    this.config.get_value(base.toLowerCase() + \"_color\") ||\n                    this.config.get_value(\"n_color\")\n                );\n            }\n        });\n\n        // FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\n        extend(TracksterView.prototype, DrawableCollection.prototype, {\n            changed: function() {\n                this.has_changes = true;\n            },\n\n            /** Add or remove intro div depending on view state. */\n            update_intro_div: function() {\n                this.intro_div.toggle(this.drawables.length === 0);\n            },\n\n            /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n            trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n                // Stop previous timer.\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n\n                if (delay) {\n                    // To aggregate calls, use timer and only navigate once\n                    // location has stabilized.\n                    var self = this;\n                    this.timer = setTimeout(function() {\n                        self.trigger(\n                            \"navigate\",\n                            new_chrom + \":\" + new_low + \"-\" + new_high\n                        );\n                    }, 500);\n                } else {\n                    view.trigger(\n                        \"navigate\",\n                        new_chrom + \":\" + new_low + \"-\" + new_high\n                    );\n                }\n            },\n\n            update_location: function(low, high) {\n                this.location_span.text(\n                    util.commatize(low) + \" - \" + util.commatize(high)\n                );\n                this.nav_input.val(\n                    this.chrom +\n                        \":\" +\n                        util.commatize(low) +\n                        \"-\" +\n                        util.commatize(high)\n                );\n\n                // Update location. Only update when there is a valid chrom; when loading vis, there may\n                // not be a valid chrom.\n                var chrom = this.chrom_select.val();\n                if (chrom !== \"\") {\n                    this.trigger_navigate(chrom, this.low, this.high, true);\n                }\n            },\n\n            /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n            // FIXME: instead of loading chrom data, should load and store genome object.\n            load_chroms: function(url_parms) {\n                url_parms.num = MAX_CHROMS_SELECTABLE;\n\n                var view = this,\n                    chrom_data = $.Deferred();\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n                    data: url_parms,\n                    dataType: \"json\",\n                    success: function(result) {\n                        // Do nothing if could not load chroms.\n                        if (result.chrom_info.length === 0) {\n                            return;\n                        }\n\n                        // Load chroms.\n                        if (result.reference) {\n                            var ref_track = new ReferenceTrack(view);\n                            view.add_label_track(ref_track);\n                            view.reference_track = ref_track;\n                        }\n                        view.chrom_data = result.chrom_info;\n\n                        view.chrom_select.html(\"\");\n                        view.chrom_select.append(\n                            $('<option value=\"\">Select Chrom/Contig</option>')\n                        );\n\n                        for (\n                            var i = 0, len = view.chrom_data.length;\n                            i < len;\n                            i++\n                        ) {\n                            var chrom = view.chrom_data[i].chrom;\n                            var chrom_option = $(\"<option>\");\n                            chrom_option.text(chrom);\n                            chrom_option.val(chrom);\n                            view.chrom_select.append(chrom_option);\n                        }\n                        if (result.prev_chroms) {\n                            view.chrom_select.append(\n                                $(\n                                    '<option value=\"previous\">Previous ' +\n                                        MAX_CHROMS_SELECTABLE +\n                                        \"</option>\"\n                                )\n                            );\n                        }\n                        if (result.next_chroms) {\n                            view.chrom_select.append(\n                                $(\n                                    '<option value=\"next\">Next ' +\n                                        MAX_CHROMS_SELECTABLE +\n                                        \"</option>\"\n                                )\n                            );\n                        }\n                        view.chrom_start_index = result.start_index;\n\n                        chrom_data.resolve(result.chrom_info);\n                    },\n                    error: function() {\n                        alert(\n                            \"Could not load chroms for this dbkey: \" +\n                                view.dbkey\n                        );\n                    }\n                });\n                return chrom_data;\n            },\n\n            change_chrom: function(chrom, low, high) {\n                var view = this;\n                // If chrom data is still loading, wait for it.\n                if (!view.chrom_data) {\n                    view.load_chroms_deferred.then(function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                }\n\n                // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n                if (!chrom || chrom === \"None\") {\n                    return;\n                }\n\n                //\n                // If user is navigating to previous/next set of chroms, load new chrom set and return.\n                //\n                if (chrom === \"previous\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n                if (chrom === \"next\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n\n                //\n                // User is loading a particular chrom. Look first in current set; if not in current set, load new\n                // chrom set.\n                //\n                var found = $.grep(view.chrom_data, function(v, i) {\n                    return v.chrom === chrom;\n                })[0];\n                if (found === undefined) {\n                    // Try to load chrom and then change to chrom.\n                    view.load_chroms({ chrom: chrom }, function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                } else {\n                    // Switching to local chrom.\n                    if (chrom !== view.chrom) {\n                        view.chrom = chrom;\n                        view.chrom_select.val(view.chrom);\n                        view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                        view.reset();\n\n                        for (\n                            var i = 0, len = view.drawables.length;\n                            i < len;\n                            i++\n                        ) {\n                            var drawable = view.drawables[i];\n                            if (drawable.init) {\n                                drawable.init();\n                            }\n                        }\n                        if (view.reference_track) {\n                            view.reference_track.init();\n                        }\n                    }\n\n                    // Resolve low, high.\n                    if (low === undefined && high === undefined) {\n                        // Both are undefined, so view is whole chromosome.\n                        view.low = 0;\n                        view.high = view.max_high;\n                    } else {\n                        // Low and/or high is defined.\n                        view.low = low !== undefined ? Math.max(low, 0) : 0;\n                        if (high === undefined) {\n                            // Center visualization around low.\n                            // HACK: max resolution is currently 30 bases.\n                            view.low = Math.max(view.low - 15, 0);\n                            view.high = view.low + 30;\n                        } else {\n                            // High is defined.\n                            view.high = Math.min(high, view.max_high);\n                        }\n                    }\n\n                    view.request_redraw();\n                }\n            },\n\n            /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n            go_to: function(str) {\n                // Remove commas.\n                str = str.replace(/,/g, \"\");\n\n                // Replace colons and hyphens with space for easy parsing.\n                str = str.replace(/:|\\-/g, \" \");\n\n                // Parse new location.\n                var chrom_pos = str.split(/\\s+/),\n                    chrom = chrom_pos[0],\n                    new_low = chrom_pos[1]\n                        ? parseInt(chrom_pos[1], 10)\n                        : undefined,\n                    new_high = chrom_pos[2]\n                        ? parseInt(chrom_pos[2], 10)\n                        : undefined;\n\n                this.change_chrom(chrom, new_low, new_high);\n            },\n\n            move_fraction: function(fraction) {\n                var view = this;\n                var span = view.high - view.low;\n                this.move_delta(fraction * span);\n            },\n\n            move_delta: function(delta_chrom) {\n                //\n                // Update low, high.\n                //\n\n                var view = this;\n                var current_chrom_span = view.high - view.low;\n                // Check for left and right boundaries\n                if (view.low - delta_chrom < view.max_low) {\n                    view.low = view.max_low;\n                    view.high = view.max_low + current_chrom_span;\n                } else if (view.high - delta_chrom > view.max_high) {\n                    view.high = view.max_high;\n                    view.low = view.max_high - current_chrom_span;\n                } else {\n                    view.high -= delta_chrom;\n                    view.low -= delta_chrom;\n                }\n\n                //\n                // Redraw view.\n                //\n\n                // Redraw without requesting more data immediately.\n                view.request_redraw({ data_fetch: false });\n\n                // Set up timeout to redraw with more data when moving stops.\n                if (this.redraw_on_move_fn) {\n                    clearTimeout(this.redraw_on_move_fn);\n                }\n\n                this.redraw_on_move_fn = setTimeout(function() {\n                    view.request_redraw();\n                }, 200);\n\n                // Navigate.\n                var chrom = view.chrom_select.val();\n                this.trigger_navigate(chrom, view.low, view.high, true);\n            },\n\n            /**\n     * Add a drawable to the view.\n     */\n            add_drawable: function(drawable) {\n                DrawableCollection.prototype.add_drawable.call(this, drawable);\n                drawable.init();\n                this.changed();\n                this.update_intro_div();\n\n                // When drawable config changes, mark view as changed. This\n                // captures most (all?) state change that needs to be saved.\n                var self = this;\n                drawable.config.on(\"change\", function() {\n                    self.changed();\n                });\n            },\n\n            add_label_track: function(label_track) {\n                label_track.view = this;\n                label_track.init();\n                this.label_tracks.push(label_track);\n            },\n\n            /**\n     * Remove drawable from the view.\n     */\n            remove_drawable: function(drawable, hide) {\n                DrawableCollection.prototype.remove_drawable.call(\n                    this,\n                    drawable\n                );\n                if (hide) {\n                    var view = this;\n                    drawable.container_div.hide(0, function() {\n                        $(this).remove();\n                        view.update_intro_div();\n                    });\n                }\n            },\n\n            reset: function() {\n                this.low = this.max_low;\n                this.high = this.max_high;\n                this.viewport_container.find(\".yaxislabel\").remove();\n            },\n\n            /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n            request_redraw: function(options, drawable) {\n                var view = this,\n                    // Either redrawing a single drawable or all view's drawables.\n                    track_list = drawable ? [drawable] : view.drawables;\n\n                // Add/update tracks in track list to redraw list.\n                _.each(track_list, function(track) {\n                    var track_options = _.find(\n                        view.tracks_to_be_redrawn,\n                        function(to) {\n                            return to[0] === track;\n                        }\n                    );\n\n                    if (track_options) {\n                        // Track already in list; update options.\n                        track_options[1] = options;\n                    } else {\n                        // Track not in list yet.\n                        view.tracks_to_be_redrawn.push([track, options]);\n                    }\n                });\n\n                // Set up redraw if it has not been requested since last redraw.\n                if (!this.requested_redraw) {\n                    requestAnimationFrame(function() {\n                        view._redraw();\n                    });\n                    this.requested_redraw = true;\n                }\n            },\n\n            /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n            _redraw: function() {\n                // TODO: move this code to function that does location setting.\n\n                // Clear because requested redraw is being handled now.\n                this.requested_redraw = false;\n\n                var low = this.low,\n                    high = this.high;\n\n                if (low < this.max_low) {\n                    low = this.max_low;\n                }\n                if (high > this.max_high) {\n                    high = this.max_high;\n                }\n                var span = this.high - this.low;\n                if (this.high !== 0 && span < this.min_separation) {\n                    high = low + this.min_separation;\n                }\n                this.low = Math.floor(low);\n                this.high = Math.ceil(high);\n\n                this.update_location(this.low, this.high);\n\n                // -- Drawing code --\n\n                // Resolution is a pixel density.\n                this.resolution_px_b =\n                    this.viewport_container.width() / (this.high - this.low);\n\n                // Overview\n                var left_px =\n                    this.low /\n                        (this.max_high - this.max_low) *\n                        this.overview_viewport.width() || 0;\n                var width_px =\n                    (this.high - this.low) /\n                        (this.max_high - this.max_low) *\n                        this.overview_viewport.width() || 0;\n                var min_width_px = 13;\n\n                this.overview_box\n                    .css({\n                        left: left_px,\n                        width: Math.max(min_width_px, width_px)\n                    })\n                    .show();\n                if (width_px < min_width_px) {\n                    this.overview_box.css(\n                        \"left\",\n                        left_px - (min_width_px - width_px) / 2\n                    );\n                }\n                if (this.overview_highlight) {\n                    this.overview_highlight.css({\n                        left: left_px,\n                        width: width_px\n                    });\n                }\n\n                // Draw data tracks.\n                _.each(this.tracks_to_be_redrawn, function(track_options) {\n                    var track = track_options[0],\n                        options = track_options[1];\n                    if (track) {\n                        track._draw(options);\n                    }\n                });\n                this.tracks_to_be_redrawn = [];\n\n                // Draw label tracks.\n                _.each(this.label_tracks, function(label_track) {\n                    label_track._draw();\n                });\n            },\n\n            zoom_in: function(point, container) {\n                if (\n                    this.max_high === 0 ||\n                    this.high - this.low <= this.min_separation\n                ) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span / this.zoom_factor / 2;\n                if (point) {\n                    cur_center =\n                        point /\n                            this.viewport_container.width() *\n                            (this.high - this.low) +\n                        this.low;\n                }\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n\n                this.changed();\n                this.request_redraw();\n            },\n\n            zoom_out: function() {\n                if (this.max_high === 0) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span * this.zoom_factor / 2;\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n                this.changed();\n                this.request_redraw();\n            },\n\n            /** Resize viewport. Use this method if header/footer content has changed in size. */\n            resize_viewport: function() {\n                this.viewport_container.height(\n                    this.container.height() -\n                        this.top_container.height() -\n                        this.bottom_container.height()\n                );\n            },\n\n            /** Called when window is resized. */\n            resize_window: function() {\n                this.resize_viewport();\n                this.request_redraw();\n            },\n\n            /** Show a Drawable in the overview. */\n            set_overview: function(drawable) {\n                if (this.overview_drawable) {\n                    // If drawable to be set as overview is already in overview, do nothing.\n                    // Otherwise, remove overview.\n                    if (\n                        this.overview_drawable.dataset.id ===\n                        drawable.dataset.id\n                    ) {\n                        return;\n                    }\n                    this.overview_viewport.find(\".track\").remove();\n                }\n\n                // Set new overview.\n                var overview_drawable = drawable.copy({\n                        content_div: this.overview_viewport\n                    }),\n                    view = this;\n                overview_drawable.header_div.hide();\n                overview_drawable.is_overview = true;\n                view.overview_drawable = overview_drawable;\n                this.overview_drawable.postdraw_actions = function() {\n                    view.overview_highlight\n                        .show()\n                        .height(view.overview_drawable.content_div.height());\n                    view.overview_viewport.height(\n                        view.overview_drawable.content_div.height() +\n                            view.overview_box.outerHeight()\n                    );\n                    view.overview_close.show();\n                    view.resize_window();\n                };\n                view.overview_drawable.request_draw();\n                this.changed();\n            },\n\n            /** Close and reset overview. */\n            reset_overview: function() {\n                // Update UI.\n                $(\".tooltip\").remove();\n                this.overview_viewport.find(\".track-tile\").remove();\n                this.overview_viewport.height(this.default_overview_height);\n                this.overview_box.height(this.default_overview_height);\n                this.overview_close.hide();\n                this.overview_highlight.hide();\n                view.resize_window();\n                view.overview_drawable = null;\n            }\n        });\n\n        /**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\n        var TracksterTool = tools_mod.Tool.extend({\n            defaults: {\n                track: null\n            },\n\n            initialize: function(options) {\n                tools_mod.Tool.prototype.initialize.call(this, options);\n\n                // Restore tool visibility from state; default to hidden.\n                var hidden = true;\n                if (\n                    options.tool_state !== undefined &&\n                    options.tool_state.hidden !== undefined\n                ) {\n                    hidden = options.tool_state.hidden;\n                }\n                this.set(\"hidden\", hidden);\n\n                // FIXME: need to restore tool values from options.tool_state\n\n                // HACK: remove some inputs because Trackster does yet not work with them.\n                this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n            },\n\n            state_dict: function(options) {\n                return _.extend(this.get_inputs_dict(), {\n                    hidden: !this.is_visible()\n                });\n            }\n        });\n\n        /**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n        var ToolParameterView = Backbone.View.extend({\n            events: {\n                \"change :input\": \"update_value\"\n            },\n\n            render: function() {\n                var param_div = this.$el.addClass(\"param-row\"),\n                    param = this.model;\n\n                // Param label.\n                var label_div = $(\"<div>\")\n                    .addClass(\"param-label\")\n                    .text(param.get(\"label\"))\n                    .appendTo(param_div);\n                // Param HTML.\n                var html_div = $(\"<div/>\")\n                    .addClass(\"param-input\")\n                    .html(param.get(\"html\"))\n                    .appendTo(param_div);\n                // Set initial value.\n                html_div.find(\":input\").val(param.get(\"value\"));\n\n                // Add to clear floating layout.\n                $(\"<div style='clear: both;'/>\").appendTo(param_div);\n            },\n\n            update_value: function(update_event) {\n                this.model.set_value($(update_event.target).val());\n            }\n        });\n\n        /**\n * View for TracksterTool.\n */\n        var TracksterToolView = Backbone.View.extend({\n            initialize: function(options) {\n                this.model.on(\"change:hidden\", this.set_visible, this);\n            },\n\n            /**\n     * Render tool UI.\n     */\n            render: function() {\n                var self = this,\n                    tool = this.model,\n                    parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n                // Prevent div events from propogating to other elements.\n                parent_div\n                    .bind(\"drag\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .click(function(e) {\n                        e.stopPropagation();\n                    })\n                    .bind(\"dblclick\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .keydown(function(e) {\n                        e.stopPropagation();\n                    });\n\n                // Add name, inputs.\n                var name_div = $(\"<div class='tool-name'>\")\n                    .appendTo(parent_div)\n                    .text(tool.get(\"name\"));\n                tool.get(\"inputs\").each(function(param) {\n                    // Render parameter.\n                    var param_view = new ToolParameterView({ model: param });\n                    param_view.render();\n                    parent_div.append(param_view.$el);\n                });\n\n                // Highlight value for inputs for easy replacement.\n                parent_div.find(\"input\").click(function() {\n                    $(this).select();\n                });\n\n                // Add buttons for running on dataset, region.\n                var run_tool_row = $(\"<div>\")\n                    .addClass(\"param-row\")\n                    .appendTo(parent_div);\n                var run_on_dataset_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on complete dataset\")\n                    .appendTo(run_tool_row);\n                var run_on_region_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on visible region\")\n                    .appendTo(run_tool_row);\n                run_on_region_button.click(function() {\n                    // Run tool to create new track.\n                    self.run_on_region();\n                });\n                run_on_dataset_button.click(function() {\n                    self.run_on_dataset();\n                });\n\n                if (tool.is_visible()) {\n                    this.$el.show();\n                }\n            },\n\n            /**\n     * Show or hide tool depending on tool visibility state.\n     */\n            set_visible: function() {\n                this.$el.toggle(this.model.is_visible());\n            },\n\n            /**\n     * Update tool parameters.\n     */\n            update_params: function() {\n                for (var i = 0; i < this.params.length; i++) {\n                    this.params[i].update_value();\n                }\n            },\n\n            /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n            run_on_dataset: function() {\n                var tool = this.model;\n                this.run(\n                    // URL params.\n                    {\n                        target_dataset_id: this.model.get(\"track\").dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id\n                    },\n                    null,\n                    // Success callback.\n                    function(track_data) {\n                        Galaxy.modal.show({\n                            title: tool.get(\"name\") + \" is Running\",\n                            body:\n                                tool.get(\"name\") +\n                                \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                            buttons: {\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                );\n            },\n\n            /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n            run_on_region: function() {\n                //\n                // Create track for tool's output immediately to provide user feedback.\n                //\n                var track = this.model.get(\"track\"),\n                    tool = this.model,\n                    region = new visualization.GenomeRegion({\n                        chrom: track.view.chrom,\n                        start: track.view.low,\n                        end: track.view.high\n                    }),\n                    url_params = {\n                        target_dataset_id: track.dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id,\n                        regions: [region.toJSON()]\n                    },\n                    current_track = track,\n                    // Set name of track to include tool name, parameters, and region used.\n                    track_name =\n                        tool.get(\"name\") +\n                        current_track.tool_region_and_parameters_str(region),\n                    container;\n\n                // If track not in a group, create a group for it and add new track to group. If track\n                // already in group, add track to group.\n                if (current_track.container === view) {\n                    // Create new group.\n                    var group = new DrawableGroup(view, view, {\n                        name: track.config.get_value(\"name\")\n                    });\n\n                    // Replace track with group.\n                    var index = current_track.container.replace_drawable(\n                        current_track,\n                        group,\n                        false\n                    );\n\n                    // Update HTML.\n                    // FIXME: this is ugly way to replace a track with a group -- make this easier via\n                    // a Drawable or DrawableCollection function.\n                    group.container_div.insertBefore(\n                        current_track.view.content_div.children()[index]\n                    );\n                    group.add_drawable(current_track);\n                    current_track.container_div.appendTo(group.content_div);\n                    container = group;\n                } else {\n                    // Use current group.\n                    container = current_track.container;\n                }\n\n                // Create and init new track.\n                var new_track = new current_track.constructor(view, container, {\n                    name: track_name,\n                    hda_ldda: \"hda\"\n                });\n                new_track.init_for_tool_data();\n                new_track.change_mode(current_track.mode);\n                new_track.set_filters_manager(\n                    current_track.filters_manager.copy(new_track)\n                );\n                new_track.update_icons();\n                container.add_drawable(new_track);\n                new_track.tiles_div.text(\"Starting job.\");\n\n                // Run tool.\n                this.run(\n                    url_params,\n                    new_track,\n                    // Success callback.\n                    function(track_data) {\n                        new_track.set_dataset(new data.Dataset(track_data));\n                        new_track.tiles_div.text(\"Running job.\");\n                        new_track.init();\n                    }\n                );\n            },\n\n            /**\n     * Run tool using a set of URL params and a success callback.\n     */\n            run: function(url_params, new_track, success_callback) {\n                // Run tool.\n                url_params.inputs = this.model.get_inputs_dict();\n                var ss_deferred = new util.ServerStateDeferred({\n                    ajax_settings: {\n                        url: Galaxy.root + \"api/tools\",\n                        data: JSON.stringify(url_params),\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        type: \"POST\"\n                    },\n                    interval: 2000,\n                    success_fn: function(response) {\n                        return response !== \"pending\";\n                    }\n                });\n\n                // Start with this status message.\n                //new_track.container_div.addClass(\"pending\");\n                //new_track.content_div.html(DATA_PENDING);\n\n                $.when(ss_deferred.go()).then(function(response) {\n                    if (response === \"no converter\") {\n                        // No converter available for input datasets, so cannot run tool.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(DATA_NOCONVERTER);\n                    } else if (response.error) {\n                        // General error.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(\n                            DATA_CANNOT_RUN_TOOL + response.message\n                        );\n                    } else {\n                        // Job submitted and running.\n                        success_callback(response);\n                    }\n                });\n            }\n        });\n\n        /**\n * Generates scale values based on filter and feature's value for filter.\n */\n        var FilterScaler = function(filter, default_val) {\n            painters.Scaler.call(this, default_val);\n            this.filter = filter;\n        };\n\n        FilterScaler.prototype.gen_val = function(feature_data) {\n            // If filter is not initalized yet, return default val.\n            if (\n                this.filter.high === Number.MAX_VALUE ||\n                this.filter.low === -Number.MAX_VALUE ||\n                this.filter.low === this.filter.high\n            ) {\n                return this.default_val;\n            }\n\n            // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n            return (\n                (parseFloat(feature_data[this.filter.index]) -\n                    this.filter.low) /\n                (this.filter.high - this.filter.low)\n            );\n        };\n\n        /**\n * Tiles drawn by tracks.\n */\n        var Tile = function(track, region, w_scale, canvas, data) {\n            this.track = track;\n            this.region = region;\n            this.low = region.get(\"start\");\n            this.high = region.get(\"end\");\n            this.w_scale = w_scale;\n            this.canvas = canvas;\n            // Wrap element in div for background and to provide container for tile-specific elements.\n            this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n            this.data = data;\n            this.stale = false;\n        };\n\n        /**\n * Perform pre-display actions.\n */\n        Tile.prototype.predisplay_actions = function() {};\n\n        var LineTrackTile = function(track, region, w_scale, canvas, data) {\n            Tile.call(this, track, region, w_scale, canvas, data);\n        };\n        LineTrackTile.prototype.predisplay_actions = function() {};\n\n        var FeatureTrackTile = function(\n            track,\n            region,\n            w_scale,\n            canvas,\n            data,\n            mode,\n            message,\n            all_slotted,\n            feature_mapper,\n            incomplete_features,\n            seq_data\n        ) {\n            // Attribute init.\n            Tile.call(this, track, region, w_scale, canvas, data);\n            this.mode = mode;\n            this.all_slotted = all_slotted;\n            this.feature_mapper = feature_mapper;\n            this.has_icons = false;\n            this.incomplete_features = incomplete_features;\n            // Features drawn based on data from other tiles.\n            this.other_tiles_features_drawn = {};\n            this.seq_data = seq_data;\n\n            // Add message + action icons to tile's html.\n            /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n        };\n        extend(FeatureTrackTile.prototype, Tile.prototype);\n\n        /**\n * Sets up support for popups.\n */\n        FeatureTrackTile.prototype.predisplay_actions = function() {\n            /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n        };\n\n        /**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\n        var Track = function(view, container, obj_dict) {\n            // For now, track's container is always view.\n            extend(obj_dict, {\n                drag_handle_class: \"draghandle\"\n            });\n            Drawable.call(this, view, container, obj_dict);\n\n            //\n            // Attribute init.\n            //\n\n            // Set or create dataset.\n            this.dataset = null;\n            if (obj_dict.dataset) {\n                // Dataset can be a Backbone model or a dict that can be used to create a model.\n                this.dataset =\n                    obj_dict.dataset instanceof Backbone.Model\n                        ? obj_dict.dataset\n                        : new data.Dataset(obj_dict.dataset);\n            }\n            this.dataset_check_type = \"converted_datasets_state\";\n            this.data_url_extra_params = {};\n            this.data_query_wait =\n                \"data_query_wait\" in obj_dict\n                    ? obj_dict.data_query_wait\n                    : DEFAULT_DATA_QUERY_WAIT;\n            // A little ugly creating data manager right now due to transition to Backbone-based objects.\n            this.data_manager =\n                \"data_manager\" in obj_dict\n                    ? obj_dict.data_manager\n                    : new visualization.GenomeDataManager({\n                          dataset: this.dataset,\n                          // HACK: simulate 'genome' attributes from view for now.\n                          // View should eventually use Genome object.\n                          genome: new visualization.Genome({\n                              key: view.dbkey,\n                              chroms_info: {\n                                  chrom_info: view.chrom_data\n                              }\n                          }),\n                          data_mode_compatible: this.data_and_mode_compatible,\n                          can_subset: this.can_subset\n                      });\n\n            // Height attributes: min height, max height, and visible height.\n            this.min_height_px = 16;\n            this.max_height_px = 800;\n            this.visible_height_px = this.config.get_value(\"height\");\n\n            //\n            // Create content div, which is where track is displayed, and add to container if available.\n            //\n            this.content_div = $(\"<div class='track-content'>\").appendTo(\n                this.container_div\n            );\n            if (this.container) {\n                this.container.content_div.append(this.container_div);\n                if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n                    this.add_resize_handle();\n                }\n            }\n        };\n\n        extend(Track.prototype, Drawable.prototype, {\n            action_icons_def: [\n                // Change track mode.\n                {\n                    name: \"mode_icon\",\n                    title: \"Set display mode\",\n                    css_class: \"chevron-expand\",\n                    on_click_fn: function() {}\n                },\n                // Hide/show content.\n                Drawable.prototype.action_icons_def[0],\n                // Set track as overview.\n                {\n                    name: \"overview_icon\",\n                    title: \"Set as overview\",\n                    css_class: \"application-dock-270\",\n                    on_click_fn: function(track) {\n                        track.view.set_overview(track);\n                    }\n                },\n                // Edit config.\n                Drawable.prototype.action_icons_def[1],\n                // Toggle track filters.\n                {\n                    name: \"filters_icon\",\n                    title: \"Filters\",\n                    css_class: \"ui-slider-050\",\n                    on_click_fn: function(drawable) {\n                        // TODO: update Tooltip text.\n                        if (drawable.filters_manager.visible()) {\n                            drawable.filters_manager.clear_filters();\n                        } else {\n                            drawable.filters_manager.init_filters();\n                        }\n                        drawable.filters_manager.toggle();\n                    }\n                },\n                // Toggle track tool.\n                {\n                    name: \"tools_icon\",\n                    title: \"Tool\",\n                    css_class: \"hammer\",\n                    on_click_fn: function(track) {\n                        // TODO: update Tooltip text.\n\n                        track.tool.toggle();\n\n                        // Update track name.\n                        if (track.tool.is_visible()) {\n                            track.set_name(\n                                track.config.get_value(\"name\") +\n                                    track.tool_region_and_parameters_str()\n                            );\n                        } else {\n                            track.revert_name();\n                        }\n                        // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                        $(\".tooltip\").remove();\n                    }\n                },\n                // Go to parameter exploration visualization.\n                {\n                    name: \"param_space_viz_icon\",\n                    title: \"Tool parameter space visualization\",\n                    css_class: \"arrow-split\",\n                    on_click_fn: function(track) {\n                        var html =\n                            \"<strong>Tool</strong>:\" +\n                            track.tool.get(\"name\") +\n                            \"<br/>\" +\n                            \"<strong>Dataset</strong>:\" +\n                            track.config.get_value(\"name\") +\n                            \"<br/>\" +\n                            '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                            '<option value=\"cur\">current viewing area</option>' +\n                            '<option value=\"bookmarks\">bookmarks</option>' +\n                            '<option value=\"both\">current viewing area and bookmarks</option>' +\n                            \"</select>\";\n                        var cancel_fn = function() {\n                                Galaxy.modal.hide();\n                                $(window).unbind(\"keypress.check_enter_esc\");\n                            },\n                            ok_fn = function() {\n                                var regions_to_use = $(\n                                        'select[name=\"regions\"] option:selected'\n                                    ).val(),\n                                    regions,\n                                    view_region = new visualization.GenomeRegion(\n                                        {\n                                            chrom: view.chrom,\n                                            start: view.low,\n                                            end: view.high\n                                        }\n                                    ),\n                                    bookmarked_regions = _.map(\n                                        $(\".bookmark\"),\n                                        function(elt) {\n                                            return new visualization.GenomeRegion(\n                                                {\n                                                    from_str: $(elt)\n                                                        .children(\".position\")\n                                                        .text()\n                                                }\n                                            );\n                                        }\n                                    );\n\n                                // Get regions for visualization.\n                                if (regions_to_use === \"cur\") {\n                                    // Use only current region.\n                                    regions = [view_region];\n                                } else if (regions_to_use === \"bookmarks\") {\n                                    // Use only bookmarks.\n                                    regions = bookmarked_regions;\n                                } else {\n                                    // Use both current region and bookmarks.\n                                    regions = [view_region].concat(\n                                        bookmarked_regions\n                                    );\n                                }\n\n                                Galaxy.modal.hide();\n\n                                // Go to visualization.\n                                window.location.href =\n                                    Galaxy.root +\n                                    \"visualization/sweepster\" +\n                                    \"?\" +\n                                    $.param({\n                                        dataset_id: track.dataset.id,\n                                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                                        regions: JSON.stringify(\n                                            new Backbone.Collection(\n                                                regions\n                                            ).toJSON()\n                                        )\n                                    });\n                            },\n                            check_enter_esc = function(e) {\n                                if ((e.keyCode || e.which) === 27) {\n                                    // Escape key\n                                    cancel_fn();\n                                } else if ((e.keyCode || e.which) === 13) {\n                                    // Enter key\n                                    ok_fn();\n                                }\n                            };\n\n                        // show dialog\n                        Galaxy.modal.show({\n                            title:\n                                \"Visualize tool parameter space and output from different parameter settings?\",\n                            body: html,\n                            buttons: { No: cancel_fn, Yes: ok_fn }\n                        });\n                    }\n                },\n                // Remove track.\n                Drawable.prototype.action_icons_def[2]\n            ],\n\n            can_draw: function() {\n                return this.dataset && Drawable.prototype.can_draw.call(this);\n            },\n\n            build_container_div: function() {\n                return $(\"<div/>\")\n                    .addClass(\"track\")\n                    .attr(\"id\", \"track_\" + this.id);\n            },\n\n            /**\n     * Set track's dataset.\n     */\n            set_dataset: function(dataset) {\n                this.dataset = dataset;\n                this.data_manager.set(\"dataset\", dataset);\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Add resizing handle to drawable's container_div.\n     */\n            add_resize_handle: function() {\n                var track = this;\n                var in_handle = false;\n                var in_drag = false;\n                var drag_control = $(\"<div class='track-resize'>\");\n                // Control shows on hover over track, stays while dragging\n                $(track.container_div).hover(\n                    function() {\n                        if (track.config.get_value(\"content_visible\")) {\n                            in_handle = true;\n                            drag_control.show();\n                        }\n                    },\n                    function() {\n                        in_handle = false;\n                        if (!in_drag) {\n                            drag_control.hide();\n                        }\n                    }\n                );\n                // Update height and force redraw of current view while dragging,\n                // clear cache to force redraw of other tiles.\n                drag_control\n                    .hide()\n                    .bind(\"dragstart\", function(e, d) {\n                        in_drag = true;\n                        d.original_height = $(track.content_div).height();\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var new_height = Math.min(\n                            Math.max(\n                                d.original_height + d.deltaY,\n                                track.min_height_px\n                            ),\n                            track.max_height_px\n                        );\n                        $(track.tiles_div).css(\"height\", new_height);\n                        track.visible_height_px =\n                            track.max_height_px === new_height ? 0 : new_height;\n                        track.on_resize();\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        track.tile_cache.clear();\n                        in_drag = false;\n                        if (!in_handle) {\n                            drag_control.hide();\n                        }\n                        track.config.set_value(\n                            \"height\",\n                            track.visible_height_px\n                        );\n                        track.changed();\n                    })\n                    .appendTo(track.container_div);\n            },\n\n            /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n            hide_contents: function() {\n                // Hide tiles.\n                this.tiles_div.hide();\n                // Hide any y axis labels (common to several track types)\n                this.container_div.find(\".yaxislabel, .track-resize\").hide();\n            },\n\n            show_contents: function() {\n                // Show the contents div and labels (if present)\n                this.tiles_div.show();\n                this.container_div.find(\".yaxislabel, .track-resize\").show();\n                // Request a redraw of the content\n                this.request_draw();\n            },\n\n            /**\n     * Returns track type.\n     */\n            get_type: function() {\n                // Order is important: start with most-specific classes and go up the track hierarchy.\n                if (this instanceof LabelTrack) {\n                    return \"LabelTrack\";\n                } else if (this instanceof ReferenceTrack) {\n                    return \"ReferenceTrack\";\n                } else if (this instanceof LineTrack) {\n                    return \"LineTrack\";\n                } else if (this instanceof ReadTrack) {\n                    return \"ReadTrack\";\n                } else if (this instanceof VariantTrack) {\n                    return \"VariantTrack\";\n                } else if (this instanceof CompositeTrack) {\n                    return \"CompositeTrack\";\n                } else if (this instanceof FeatureTrack) {\n                    return \"FeatureTrack\";\n                }\n                return \"\";\n            },\n\n            /**\n     * Remove visualization content and display message.\n     */\n            show_message: function(msg_html) {\n                this.tiles_div.remove();\n                return $(\"<span/>\")\n                    .addClass(\"message\")\n                    .html(msg_html)\n                    .appendTo(this.content_div);\n            },\n\n            /**\n     * Initialize and draw the track.\n     */\n            init: function(retry) {\n                // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n                // used in this function to determine what action(s) to take.\n\n                var track = this;\n                track.enabled = false;\n                track.tile_cache.clear();\n                track.data_manager.clear();\n                /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n                // Remove old track content (e.g. tiles, messages).\n                track.content_div.children().remove();\n                track.container_div.removeClass(\"nodata error pending\");\n\n                track.tiles_div = $(\"<div/>\")\n                    .addClass(\"tiles\")\n                    .appendTo(track.content_div);\n\n                //\n                // Tracks with no dataset id are handled differently.\n                // FIXME: is this really necessary?\n                //\n                if (!track.dataset.id) {\n                    return;\n                }\n\n                // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n                // about track status.\n                var init_deferred = $.Deferred(),\n                    params = {\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        data_type: this.dataset_check_type,\n                        chrom: track.view.chrom,\n                        retry: retry\n                    };\n                $.getJSON(this.dataset.url(), params, function(result) {\n                    if (\n                        !result ||\n                        result === \"error\" ||\n                        result.kind === \"error\"\n                    ) {\n                        // Dataset is in error state.\n                        track.container_div.addClass(\"error\");\n                        var msg_elt = track.show_message(DATA_ERROR);\n                        if (result.message) {\n                            // Add links to (a) show error and (b) try again.\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"View error\")\n                                    .click(function() {\n                                        Galaxy.modal.show({\n                                            title: \"Trackster Error\",\n                                            body:\n                                                \"<pre>\" +\n                                                result.message +\n                                                \"</pre>\",\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                    })\n                            );\n                            msg_elt.append($(\"<span/>\").text(\" \"));\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"Try again\")\n                                    .click(function() {\n                                        track.init(true);\n                                    })\n                            );\n                        }\n                    } else if (result === \"no converter\") {\n                        track.container_div.addClass(\"error\");\n                        track.show_message(DATA_NOCONVERTER);\n                    } else if (\n                        result === \"no data\" ||\n                        (result.data !== undefined &&\n                            (result.data === null || result.data.length === 0))\n                    ) {\n                        track.container_div.addClass(\"nodata\");\n                        track.show_message(DATA_NONE);\n                    } else if (result === \"pending\") {\n                        track.container_div.addClass(\"pending\");\n                        track.show_message(DATA_PENDING);\n                        //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                        setTimeout(function() {\n                            track.init();\n                        }, track.data_query_wait);\n                    } else if (result === \"data\" || result.status === \"data\") {\n                        if (result.valid_chroms) {\n                            track.valid_chroms = result.valid_chroms;\n                            track.update_icons();\n                        }\n                        track.tiles_div.text(DATA_OK);\n                        if (track.view.chrom) {\n                            track.tiles_div.text(\"\");\n                            track.tiles_div.css(\n                                \"height\",\n                                track.visible_height_px + \"px\"\n                            );\n                            track.enabled = true;\n                            // predraw_init may be asynchronous, wait for it and then draw\n                            $.when\n                                .apply($, track.predraw_init())\n                                .done(function() {\n                                    init_deferred.resolve();\n                                    track.container_div.removeClass(\n                                        \"nodata error pending\"\n                                    );\n                                    track.request_draw();\n                                });\n                        } else {\n                            init_deferred.resolve();\n                        }\n                    }\n                });\n\n                this.update_icons();\n                return init_deferred;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {\n                var track = this;\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n\n                        // Tracks may not have stat data either because there is no data or data is not yet ready.\n                        if (\n                            data &&\n                            data.min !== undefined &&\n                            data.max !== undefined\n                        ) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(\n                                Math.min(\n                                    0,\n                                    Math.max(min_value, data.mean - 2 * data.sd)\n                                )\n                            );\n                            max_value = Math.ceil(\n                                Math.max(\n                                    0,\n                                    Math.min(max_value, data.mean + 2 * data.sd)\n                                )\n                            );\n                            // Update config, prefs\n                            track.config.set_default_value(\n                                \"min_value\",\n                                min_value\n                            );\n                            track.config.set_default_value(\n                                \"max_value\",\n                                max_value\n                            );\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this;\n            }\n        });\n\n        var TiledTrack = function(view, container, obj_dict) {\n            Track.call(this, view, container, obj_dict);\n\n            var track = this;\n\n            // Make track moveable.\n            moveable(\n                track.container_div,\n                track.drag_handle_class,\n                \".group\",\n                track\n            );\n\n            // Attribute init.\n            this.filters_manager = new filters_mod.FiltersManager(\n                this,\n                \"filters\" in obj_dict ? obj_dict.filters : null\n            );\n            // HACK: set filters manager for data manager.\n            // FIXME: prolly need function to set filters and update data_manager reference.\n            this.data_manager.set(\"filters_manager\", this.filters_manager);\n            this.filters_available = false;\n            this.tool = obj_dict.tool\n                ? new TracksterTool(\n                      _.extend(obj_dict.tool, {\n                          track: this,\n                          tool_state: obj_dict.tool_state\n                      })\n                  )\n                : null;\n            this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n            this.left_offset = 0;\n\n            if (this.header_div) {\n                //\n                // Setup filters.\n                //\n                this.set_filters_manager(this.filters_manager);\n\n                //\n                // Create dynamic tool view.\n                //\n                if (this.tool) {\n                    var tool_view = new TracksterToolView({ model: this.tool });\n                    tool_view.render();\n                    this.dynamic_tool_div = tool_view.$el;\n                    this.header_div.after(this.dynamic_tool_div);\n                }\n            }\n\n            // Add tiles_div, overlay_div to content_div.\n            this.tiles_div = $(\"<div/>\")\n                .addClass(\"tiles\")\n                .appendTo(this.content_div);\n            if (!this.config.get_value(\"content_visible\")) {\n                this.tiles_div.hide();\n            }\n            this.overlay_div = $(\"<div/>\")\n                .addClass(\"overlay\")\n                .appendTo(this.content_div);\n\n            if (obj_dict.mode) {\n                this.change_mode(obj_dict.mode);\n            }\n        };\n        extend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n            action_icons_def: Track.prototype.action_icons_def.concat([\n                // Show more rows when all features are not slotted.\n                {\n                    name: \"show_more_rows_icon\",\n                    title:\n                        \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n                    css_class: \"exclamation\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.slotters[\n                            track.view.resolution_px_b\n                        ].max_rows *= 2;\n                        track.request_draw({ clear_tile_cache: true });\n                    },\n                    hide: true\n                }\n            ]),\n\n            /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n            copy: function(container) {\n                // Create copy.\n                var obj_dict = this.to_dict();\n                extend(obj_dict, {\n                    data_manager: this.data_manager\n                });\n                var new_track = new this.constructor(\n                    this.view,\n                    container,\n                    obj_dict\n                );\n                // Misc. init and return.\n                new_track.change_mode(this.mode);\n                new_track.enabled = this.enabled;\n                return new_track;\n            },\n\n            /**\n     * Set filters manager + HTML elements.\n     */\n            set_filters_manager: function(filters_manager) {\n                this.filters_manager = filters_manager;\n                this.header_div.after(this.filters_manager.parent_div);\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                return {\n                    track_type: this.get_type(),\n                    dataset: {\n                        id: this.dataset.id,\n                        hda_ldda: this.dataset.get(\"hda_ldda\")\n                    },\n                    prefs: this.config.to_key_value_dict(),\n                    mode: this.mode,\n                    filters: this.filters_manager.to_dict(),\n                    tool_state: this.tool ? this.tool.state_dict() : {}\n                };\n            },\n\n            /**\n     * Set track bounds for current chromosome.\n     */\n            set_min_max: function() {\n                var track = this;\n\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n                        if (\n                            isNaN(\n                                parseFloat(track.config.get_value(\"min_value\"))\n                            ) ||\n                            isNaN(\n                                parseFloat(track.config.get_value(\"max_value\"))\n                            )\n                        ) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(\n                                Math.min(\n                                    0,\n                                    Math.max(min_value, data.mean - 2 * data.sd)\n                                )\n                            );\n                            max_value = Math.ceil(\n                                Math.max(\n                                    0,\n                                    Math.min(max_value, data.mean + 2 * data.sd)\n                                )\n                            );\n                            // Update the prefs\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Change track's mode.\n     */\n            change_mode: function(new_mode) {\n                var track = this;\n                // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n                track.mode = new_mode;\n                track.config.set_value(\"mode\", new_mode);\n                // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n                // data manager would work if Auto data were checked for compatibility when a specific\n                // mode is chosen.\n                if (new_mode === \"Auto\") {\n                    this.data_manager.clear();\n                }\n                track.request_draw({ clear_tile_cache: true });\n                this.action_icons.mode_icon.attr(\n                    \"title\",\n                    \"Set display mode (now: \" + track.mode + \")\"\n                );\n                return track;\n            },\n\n            /**\n     * Update track's buttons.\n     */\n            update_icons: function() {\n                var track = this;\n\n                //\n                // Show/hide filter icon.\n                //\n                track.action_icons.filters_icon.toggle(track.filters_available);\n\n                //\n                // Show/hide tool icons.\n                //\n                track.action_icons.tools_icon.toggle(track.tool !== null);\n                track.action_icons.param_space_viz_icon.toggle(\n                    track.tool !== null\n                );\n            },\n\n            /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n            _gen_tile_cache_key: function(w_scale, tile_region) {\n                return w_scale + \"_\" + tile_region;\n            },\n\n            /**\n     * Request that track be drawn.\n     */\n            request_draw: function(options) {\n                if (options && options.clear_tile_cache) {\n                    this.tile_cache.clear();\n                }\n                this.view.request_redraw(options, this);\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            before_draw: function() {\n                // Clear because this is set when drawing.\n                this.max_height_px = 0;\n            },\n\n            /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n            _draw: function(options) {\n                if (!this.can_draw()) {\n                    return;\n                }\n\n                var clear_after = options && options.clear_after,\n                    low = this.view.low,\n                    high = this.view.high,\n                    range = high - low,\n                    width = this.view.container.width(),\n                    w_scale = this.view.resolution_px_b,\n                    resolution = 1 / w_scale;\n\n                // For overview, adjust high, low, resolution, and w_scale.\n                if (this.is_overview) {\n                    low = this.view.max_low;\n                    high = this.view.max_high;\n                    w_scale = width / (view.max_high - view.max_low);\n                    resolution = 1 / w_scale;\n                }\n\n                this.before_draw();\n\n                //\n                // Method for moving and/or removing tiles:\n                // (a) mark all elements for removal using class 'remove'\n                // (b) during tile drawing/placement, remove class for elements that are moved;\n                //     this occurs in show_tile()\n                // (c) after drawing tiles, remove elements still marked for removal\n                //     (i.e. that still have class 'remove').\n                //\n\n                // Step (a) for (re)moving tiles.\n                this.tiles_div.children().addClass(\"remove\");\n\n                var // Tile width in bases.\n                    tile_width = Math.floor(TILE_SIZE * resolution),\n                    // Index of first tile that overlaps visible region.\n                    tile_index = Math.floor(low / tile_width),\n                    tile_region,\n                    tile_promise,\n                    tile_promises = [],\n                    tiles = [];\n                // Draw tiles.\n                while (tile_index * tile_width < high) {\n                    // Get tile region.\n                    tile_region = new visualization.GenomeRegion({\n                        chrom: this.view.chrom,\n                        start: tile_index * tile_width,\n                        // Tile high cannot be larger than view.max_high, which the chromosome length.\n                        end: Math.min(\n                            (tile_index + 1) * tile_width,\n                            this.view.max_high\n                        )\n                    });\n                    tile_promise = this.draw_helper(\n                        tile_region,\n                        w_scale,\n                        options\n                    );\n                    tile_promises.push(tile_promise);\n                    $.when(tile_promise).then(function(tile) {\n                        tiles.push(tile);\n                    });\n\n                    // Go to next tile.\n                    tile_index += 1;\n                }\n\n                // Step (c) for (re)moving tiles when clear_after is false.\n                if (!clear_after) {\n                    this.tiles_div\n                        .children(\".remove\")\n                        .removeClass(\"remove\")\n                        .remove();\n                }\n\n                // When all tiles are drawn, call post-draw actions.\n                var track = this;\n                $.when.apply($, tile_promises).then(function() {\n                    // Step (c) for (re)moving tiles when clear_after is true:\n                    track.tiles_div.children(\".remove\").remove();\n\n                    // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n                    // (a) ReferenceTrack without sufficient resolution;\n                    // (b) data_fetch = false.\n                    tiles = _.filter(tiles, function(t) {\n                        return t !== null;\n                    });\n                    if (tiles.length !== 0) {\n                        track.postdraw_actions(\n                            tiles,\n                            width,\n                            w_scale,\n                            clear_after\n                        );\n                    }\n                });\n            },\n\n            /**\n     * Add a maximum/minimum label to track.\n     */\n            _add_yaxis_label: function(type, on_change) {\n                var track = this,\n                    css_class = type === \"max\" ? \"top\" : \"bottom\",\n                    text = type === \"max\" ? \"max\" : \"min\",\n                    pref_name = type === \"max\" ? \"max_value\" : \"min_value\",\n                    label = this.container_div.find(\".yaxislabel.\" + css_class),\n                    value = round(track.config.get_value(pref_name), 1);\n\n                // Default action for on_change is to redraw track.\n                on_change =\n                    on_change ||\n                    function() {\n                        track.request_draw({ clear_tile_cache: true });\n                    };\n\n                if (label.length !== 0) {\n                    // Label already exists, so update value.\n                    label.text(value);\n                } else {\n                    // Add label.\n                    label = $(\"<div/>\")\n                        .text(value)\n                        .make_text_editable({\n                            num_cols: 12,\n                            on_finish: function(new_val) {\n                                $(\".tooltip\").remove();\n                                track.config.set_value(\n                                    pref_name,\n                                    round(new_val, 1)\n                                );\n                                on_change();\n                            },\n                            help_text: \"Set \" + text + \" value\"\n                        })\n                        .addClass(\"yaxislabel \" + css_class)\n                        .css(\"color\", this.config.get_value(\"label_color\"));\n                    this.container_div.prepend(label);\n                }\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                var line_track_tiles = _.filter(tiles, function(tile) {\n                    return tile instanceof LineTrackTile;\n                });\n\n                //\n                // Take different actions depending on whether there are LineTrack/Coverage tiles.\n                //\n\n                if (line_track_tiles.length > 0) {\n                    // -- Drawing in Coverage mode. --\n\n                    // Clear because this is set when drawing.\n                    this.max_height_px = 0;\n                    var track = this;\n                    _.each(tiles, function(tile) {\n                        if (!(tile instanceof LineTrackTile)) {\n                            tile.html_elt.remove();\n                            track.draw_helper(tile.region, w_scale, {\n                                force: true,\n                                mode: \"Coverage\"\n                            });\n                        }\n                    });\n\n                    track._add_yaxis_label(\"max\");\n                } else {\n                    // -- Drawing in non-Coverage mode. --\n\n                    // Remove Y-axis labels because there are no line track tiles.\n                    this.container_div.find(\".yaxislabel\").remove();\n\n                    //\n                    // If some tiles have icons, set padding of tiles without icons so features and rows align.\n                    //\n                    var icons_present = _.find(tiles, function(tile) {\n                        return tile.has_icons;\n                    });\n\n                    if (icons_present) {\n                        _.each(tiles, function(tile) {\n                            if (!tile.has_icons) {\n                                // Need to align with other tile(s) that have icons.\n                                tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                            }\n                        });\n                    }\n                }\n            },\n\n            /**\n     * Returns appropriate display mode based on data.\n     */\n            get_mode: function(data) {\n                return this.mode;\n            },\n\n            /**\n     * Update track interface to show display mode being used.\n     */\n            update_auto_mode: function(display_mode) {\n                // FIXME: needs to be implemented.\n            },\n\n            /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n            _get_drawables: function() {\n                return [this];\n            },\n\n            /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n            draw_helper: function(region, w_scale, options) {\n                // Init options if necessary to avoid having to check if options defined.\n                if (!options) {\n                    options = {};\n                }\n\n                var force = options.force,\n                    mode = options.mode || this.mode,\n                    resolution = 1 / w_scale,\n                    // Useful vars.\n                    track = this,\n                    drawables = this._get_drawables(),\n                    key = this._gen_tile_cache_key(w_scale, region),\n                    is_tile = function(o) {\n                        return o && \"track\" in o;\n                    };\n\n                // Check tile cache, if found show existing tile in correct position\n                var tile = force ? undefined : track.tile_cache.get_elt(key);\n                if (tile) {\n                    if (is_tile(tile)) {\n                        track.show_tile(tile, w_scale);\n                    }\n                    return tile;\n                }\n\n                // If not fetching data, nothing more to do because data is needed to draw tile.\n                if (options.data_fetch === false) {\n                    return null;\n                }\n\n                // Function that returns data/Deferreds needed to draw tile.\n                var get_tile_data = function() {\n                    // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n                    var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                        return m === mode;\n                    })\n                        ? \"Coverage\"\n                        : mode;\n\n                    // Map drawable object to data needed for drawing.\n                    var tile_data = _.map(drawables, function(d) {\n                        // Get the track data/promise.\n                        return d.data_manager.get_data(\n                            region,\n                            data_mode,\n                            resolution,\n                            track.data_url_extra_params\n                        );\n                    });\n\n                    // Get reference data/promise.\n                    if (view.reference_track) {\n                        tile_data.push(\n                            view.reference_track.data_manager.get_data(\n                                region,\n                                mode,\n                                resolution,\n                                view.reference_track.data_url_extra_params\n                            )\n                        );\n                    }\n\n                    return tile_data;\n                };\n\n                //\n                // When data is available, draw tile.\n                //\n                var tile_drawn = $.Deferred();\n                track.tile_cache.set_elt(key, tile_drawn);\n                $.when.apply($, get_tile_data()).then(function() {\n                    var tile_data = get_tile_data(),\n                        tracks_data = tile_data,\n                        seq_data;\n\n                    // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n                    // that cannot be subsetted. This may occur if the superset has a message. If there is a\n                    // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n                    // GenomeDataManager in visualization module.\n                    if (\n                        _.find(tile_data, function(d) {\n                            return util.is_deferred(d);\n                        })\n                    ) {\n                        track.tile_cache.set_elt(key, undefined);\n                        $.when(\n                            track.draw_helper(region, w_scale, options)\n                        ).then(function(tile) {\n                            tile_drawn.resolve(tile);\n                        });\n                        return;\n                    }\n\n                    // If sequence data is available, subset to get only data in region.\n                    if (view.reference_track) {\n                        seq_data = view.reference_track.data_manager.subset_entry(\n                            tile_data.pop(),\n                            region\n                        );\n                    }\n\n                    // Get drawing modes, heights for all tracks.\n                    var drawing_modes = [],\n                        drawing_heights = [];\n\n                    _.each(drawables, function(d, i) {\n                        var mode = d.mode,\n                            data = tracks_data[i];\n                        if (mode === \"Auto\") {\n                            mode = d.get_mode(data);\n                            d.update_auto_mode(mode);\n                        }\n                        drawing_modes.push(mode);\n                        drawing_heights.push(\n                            d.get_canvas_height(data, mode, w_scale, width)\n                        );\n                    });\n\n                    var canvas = track.view.canvas_manager.new_canvas(),\n                        tile_low = region.get(\"start\"),\n                        tile_high = region.get(\"end\"),\n                        all_data_index = 0,\n                        width =\n                            Math.ceil((tile_high - tile_low) * w_scale) +\n                            track.left_offset,\n                        height = _.max(drawing_heights),\n                        tile;\n\n                    //\n                    // Draw all tracks on tile.\n                    //\n                    canvas.width = width;\n                    // Height is specified in options or is the height found above.\n                    canvas.height = options.height || height;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.translate(track.left_offset, 0);\n                    if (drawables.length > 1) {\n                        ctx.globalAlpha = 0.5;\n                        ctx.globalCompositeOperation = \"source-over\";\n                    }\n                    _.each(drawables, function(d, i) {\n                        tile = d.draw_tile(\n                            tracks_data[i],\n                            ctx,\n                            drawing_modes[i],\n                            region,\n                            w_scale,\n                            seq_data\n                        );\n                    });\n\n                    // Don't cache, show if no tile.\n                    if (tile !== undefined) {\n                        track.tile_cache.set_elt(key, tile);\n                        track.show_tile(tile, w_scale);\n                    }\n\n                    tile_drawn.resolve(tile);\n                });\n\n                return tile_drawn;\n            },\n\n            /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n            get_canvas_height: function(result, mode, w_scale, canvas_width) {\n                return this.visible_height_px;\n            },\n\n            /**\n     * Draw line (bigwig) data onto tile.\n     */\n            _draw_line_track_tile: function(\n                result,\n                ctx,\n                mode,\n                region,\n                w_scale\n            ) {\n                // Set min/max if they are not already set.\n                // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n                // standardize this.\n                if (\n                    [undefined, null].indexOf(\n                        this.config.get_value(\"min_value\")\n                    ) !== -1\n                ) {\n                    this.config.set_value(\"min_value\", 0);\n                }\n                if (\n                    [undefined, null, 0].indexOf(\n                        this.config.get_value(\"max_value\")\n                    ) !== -1\n                ) {\n                    this.config.set_value(\n                        \"max_value\",\n                        _.max(\n                            _.map(result.data, function(d) {\n                                return d[1];\n                            })\n                        ) || 0\n                    );\n                }\n\n                var canvas = ctx.canvas,\n                    painter = new painters.LinePainter(\n                        result.data,\n                        region.get(\"start\"),\n                        region.get(\"end\"),\n                        this.config.to_key_value_dict(),\n                        mode\n                    );\n                painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                return new LineTrackTile(\n                    this,\n                    region,\n                    w_scale,\n                    canvas,\n                    result.data\n                );\n            },\n\n            /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n            /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n            show_tile: function(tile, w_scale) {\n                var track = this,\n                    tile_element = tile.html_elt;\n\n                // -- Show/move tile element. --\n\n                tile.predisplay_actions();\n\n                // Position tile element based on current viewport.\n                var left = Math.round(\n                    (tile.low -\n                        (this.is_overview\n                            ? this.view.max_low\n                            : this.view.low)) *\n                        w_scale\n                );\n                if (this.left_offset) {\n                    left -= this.left_offset;\n                }\n                tile_element.css(\"left\", left);\n\n                if (tile_element.hasClass(\"remove\")) {\n                    // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n                    // for removing tiles.\n                    tile_element.removeClass(\"remove\");\n                } else {\n                    // Showing new tile.\n                    this.tiles_div.append(tile_element);\n                }\n\n                // -- Update track, tile heights based on new tile. --\n\n                tile_element.css(\"height\", \"auto\");\n\n                // Update max height based on current tile's height.\n                // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n                // -2 to get the correct height.\n                this.max_height_px = Math.max(\n                    this.max_height_px,\n                    tile_element.height() - 2\n                );\n\n                // Update height for all tiles based on max height.\n                tile_element\n                    .parent()\n                    .children()\n                    .css(\"height\", this.max_height_px + \"px\");\n\n                // Update track height based on max height and visible height.\n                var track_height = this.max_height_px;\n                if (this.visible_height_px !== 0) {\n                    track_height = Math.min(\n                        this.max_height_px,\n                        this.visible_height_px\n                    );\n                }\n                this.tiles_div.css(\"height\", track_height + \"px\");\n            },\n\n            /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n            tool_region_and_parameters_str: function(region) {\n                var track = this,\n                    region_str =\n                        region !== undefined ? region.toString() : \"all\",\n                    param_str = _.values(track.tool.get_inputs_dict()).join(\n                        \", \"\n                    );\n                return (\n                    \" - region=[\" +\n                    region_str +\n                    \"], parameters=[\" +\n                    param_str +\n                    \"]\"\n                );\n            },\n\n            /**\n     * Returns true if data is compatible with a given mode.\n     */\n            data_and_mode_compatible: function(data, mode) {\n                // Only handle modes that user can set.\n                if (mode === \"Auto\") {\n                    return true;\n                } else if (mode === \"Coverage\") {\n                    // Histogram mode requires bigwig data.\n                    return data.dataset_type === \"bigwig\";\n                } else if (\n                    data.dataset_type === \"bigwig\" ||\n                    data.extra_info === \"no_detail\"\n                ) {\n                    // All other modes--Dense, Squish, Pack--require data + details.\n                    return false;\n                } else {\n                    return true;\n                }\n            },\n\n            /**\n     * Returns true if entry can be subsetted.\n     */\n            can_subset: function(entry) {\n                // Do not subset entries with a message or data with no detail.\n                if (entry.message || entry.extra_info === \"no_detail\") {\n                    return false;\n                } else if (entry.dataset_type === \"bigwig\") {\n                    // Subset only if data is single-bp resolution.\n                    return entry.data[1][0] - entry.data[0][0] === 1;\n                }\n\n                return true;\n            },\n\n            /**\n     * Set up track to receive tool data.\n     */\n            init_for_tool_data: function() {\n                // Set up track to fetch raw data rather than converted data.\n                this.data_manager.set(\"data_type\", \"raw_data\");\n                this.data_query_wait = 1000;\n                this.dataset_check_type = \"state\";\n\n                // FIXME: this is optional and is disabled for now because it creates\n                // additional converter jobs without a clear benefit because indexing\n                // such a small dataset provides little benefit.\n                //\n                // Set up one-time, post-draw to clear tool execution settings.\n                //\n                /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n            }\n        });\n\n        var LabelTrack = function(view, container) {\n            Track.call(this, view, container, {\n                resize: false,\n                header: false\n            });\n            this.container_div.addClass(\"label-track\");\n        };\n        extend(LabelTrack.prototype, Track.prototype, {\n            init: function() {\n                // Enable by default because there should always be data when drawing track.\n                this.enabled = true;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {},\n\n            _draw: function(options) {\n                var view = this.view,\n                    range = view.high - view.low,\n                    tickDistance = Math.floor(\n                        Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))\n                    ),\n                    position =\n                        Math.floor(view.low / tickDistance) * tickDistance,\n                    width = this.view.container.width(),\n                    new_div = $(\"<div/>\").addClass(\"label-container\");\n                while (position < view.high) {\n                    var screenPosition = Math.floor(\n                        (position - view.low) / range * width\n                    );\n                    new_div.append(\n                        $(\"<div/>\")\n                            .addClass(\"pos-label\")\n                            .text(util.commatize(position))\n                            .css({\n                                left: screenPosition\n                            })\n                    );\n                    position += tickDistance;\n                }\n                this.content_div.children(\":first\").remove();\n                this.content_div.append(new_div);\n            }\n        });\n\n        // FIXME: Composite tracks have code for showing composite tracks with line tracks and\n        // composite tracks with line + feature tracks. It's probably best if different classes\n        // are created for each type of composite track.\n\n        /**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\n        var CompositeTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n\n            // Init drawables; each drawable is a copy so that config/preferences\n            // are independent of each other. Also init left offset.\n            this.drawables = [];\n            if (\"drawables\" in obj_dict) {\n                var drawable;\n                for (var i = 0; i < obj_dict.drawables.length; i++) {\n                    drawable = obj_dict.drawables[i];\n                    this.drawables[i] = object_from_template(\n                        drawable,\n                        view,\n                        null\n                    );\n\n                    // Track's left offset is the max of all tracks.\n                    if (drawable.left_offset > this.left_offset) {\n                        this.left_offset = drawable.left_offset;\n                    }\n                }\n                this.enabled = true;\n            }\n\n            // Set all feature tracks to use Coverage mode.\n            _.each(this.drawables, function(d) {\n                if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n                    d.change_mode(\"Coverage\");\n                }\n            });\n\n            this.update_icons();\n\n            // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n            // that for object type.\n            this.obj_type = \"CompositeTrack\";\n        };\n\n        extend(CompositeTrack.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            action_icons_def: [\n                // Create composite track from group's tracks.\n                {\n                    name: \"composite_icon\",\n                    title: \"Show individual tracks\",\n                    css_class: \"layers-stack\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.show_group();\n                    }\n                }\n            ].concat(TiledTrack.prototype.action_icons_def),\n\n            // HACK: CompositeTrack should inherit from DrawableCollection as well.\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: DrawableCollection.prototype.to_dict,\n\n            add_drawable: DrawableCollection.prototype.add_drawable,\n\n            unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                // Propogate visible height to other tracks.\n                var visible_height = this.visible_height_px;\n                _.each(this.drawables, function(d) {\n                    d.visible_height_px = visible_height;\n                });\n                Track.prototype.on_resize.call(this);\n            },\n\n            /**\n     * Change mode for all tracks.\n     */\n            change_mode: function(new_mode) {\n                TiledTrack.prototype.change_mode.call(this, new_mode);\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].change_mode(new_mode);\n                }\n            },\n\n            /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n            init: function() {\n                // Init components.\n                var init_deferreds = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    init_deferreds.push(this.drawables[i].init());\n                }\n\n                // Draw composite when all tracks available.\n                var track = this;\n                $.when.apply($, init_deferreds).then(function() {\n                    track.enabled = true;\n                    track.request_draw();\n                });\n            },\n\n            update_icons: function() {\n                // For now, hide filters and tool.\n                this.action_icons.filters_icon.hide();\n                this.action_icons.tools_icon.hide();\n                this.action_icons.param_space_viz_icon.hide();\n            },\n\n            can_draw: Drawable.prototype.can_draw,\n\n            _get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Replace this track with group that includes individual tracks.\n     */\n            show_group: function() {\n                // Create group with individual tracks.\n                var group = new DrawableGroup(this.view, this.container, {\n                        name: this.config.get_value(\"name\")\n                    }),\n                    track;\n                for (var i = 0; i < this.drawables.length; i++) {\n                    track = this.drawables[i];\n                    track.update_icons();\n                    group.add_drawable(track);\n                    track.container = group;\n                    group.content_div.append(track.container_div);\n                }\n\n                // Replace track with group.\n                var index = this.container.replace_drawable(this, group, true);\n                group.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions taken before drawing.\n     */\n            before_draw: function() {\n                // FIXME: this is needed only if there are feature tracks in the composite track.\n                // TiledTrack.prototype.before_draw.call(this);\n\n                //\n                // Set min, max for tracks to be largest min, max.\n                //\n\n                // Get smallest min, biggest max.\n                var min = _.min(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"min_value\");\n                        })\n                    ),\n                    max = _.max(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"max_value\");\n                        })\n                    );\n\n                this.config.set_value(\"min_value\", min);\n                this.config.set_value(\"max_value\", max);\n\n                // Set all tracks to smallest min, biggest max.\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min);\n                    d.config.set_value(\"max_value\", max);\n                });\n            },\n\n            /**\n     * Update minimum, maximum for component tracks.\n     */\n            update_all_min_max: function() {\n                var track = this,\n                    min_value = this.config.get_value(\"min_value\"),\n                    max_value = this.config.get_value(\"max_value\");\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min_value);\n                    d.config.set_value(\"max_value\", max_value);\n                });\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n                var max_height = -1,\n                    i;\n                for (i = 0; i < tiles.length; i++) {\n                    var height = tiles[i].html_elt.find(\"canvas\").height();\n                    if (height > max_height) {\n                        max_height = height;\n                    }\n                }\n\n                for (i = 0; i < tiles.length; i++) {\n                    var tile = tiles[i];\n                    if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                        this.draw_helper(tile.region, w_scale, {\n                            force: true,\n                            height: max_height\n                        });\n                        tile.html_elt.remove();\n                    }\n                }\n\n                // Wrap function so that it can be called without object reference.\n                var track = this,\n                    t = function() {\n                        track.update_all_min_max();\n                    };\n\n                // Add min, max labels.\n                this._add_yaxis_label(\"min\", t);\n                this._add_yaxis_label(\"max\", t);\n            }\n        });\n\n        /**\n * Displays reference genome data.\n */\n        var ReferenceTrack = function(view) {\n            TiledTrack.call(\n                this,\n                view,\n                { content_div: view.top_labeltrack },\n                { resize: false, header: false }\n            );\n\n            // Use offset to ensure that bases at tile edges are drawn.\n            this.left_offset = view.canvas_manager.char_width_px;\n            this.container_div.addClass(\"reference-track\");\n            this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n            this.data_url_extra_params = { reference: true };\n            this.data_manager = new visualization.GenomeReferenceDataManager({\n                data_url: this.data_url,\n                can_subset: this.can_subset\n            });\n            this.hide_contents();\n        };\n        extend(\n            ReferenceTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 13,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                init: function() {\n                    this.data_manager.clear();\n                    // Enable by default because there should always be data when drawing track.\n                    this.enabled = true;\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {},\n\n                can_draw: Drawable.prototype.can_draw,\n\n                /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n                draw_helper: function(region, w_scale, options) {\n                    var cur_visible = this.tiles_div.is(\":visible\"),\n                        new_visible,\n                        tile = null;\n                    if (w_scale > this.view.canvas_manager.char_width_px) {\n                        this.tiles_div.show();\n                        new_visible = true;\n                        tile = TiledTrack.prototype.draw_helper.call(\n                            this,\n                            region,\n                            w_scale,\n                            options\n                        );\n                    } else {\n                        new_visible = false;\n                        this.tiles_div.hide();\n                    }\n\n                    // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n                    // postdraw_actions is not called when reference track not shown due to no tiles. If\n                    // it is moved to postdraw_actions, resize must be called each time because cannot\n                    // easily detect showing/hiding.\n\n                    // If showing or hiding reference track, resize viewport.\n                    if (cur_visible !== new_visible) {\n                        this.view.resize_viewport();\n                    }\n\n                    return tile;\n                },\n\n                can_subset: function(entry) {\n                    return true;\n                },\n\n                /**\n     * Draw ReferenceTrack tile.\n     */\n                draw_tile: function(data, ctx, mode, region, w_scale) {\n                    // Try to subset data.\n                    var subset = this.data_manager.subset_entry(data, region),\n                        seq_data = subset.data;\n\n                    // Draw sequence data.\n                    var canvas = ctx.canvas;\n                    ctx.font = ctx.canvas.manager.default_font;\n                    ctx.textAlign = \"center\";\n                    for (\n                        var c = 0, str_len = seq_data.length;\n                        c < str_len;\n                        c++\n                    ) {\n                        ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n                        ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n                    }\n                    return new Tile(this, region, w_scale, canvas, subset);\n                }\n            }\n        );\n\n        /**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\n        var LineTrack = function(view, container, obj_dict) {\n            this.mode = \"Histogram\";\n            TiledTrack.call(this, view, container, obj_dict);\n            // Need left offset for drawing overlap near tile boundaries.\n            this.left_offset = 30;\n\n            // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n            // FIXME: there should be a flag to wait for this check to complete before loading the track.\n            var self = this;\n            $.when(\n                supportsByteRanges(\n                    Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\"\n                )\n            ).then(function(supportsByteRanges) {\n                if (supportsByteRanges) {\n                    self.data_manager = new bbi.BBIDataManager({\n                        dataset: self.dataset\n                    });\n                }\n            });\n        };\n\n        extend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    { key: \"color\", label: \"Color\", type: \"color\" },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            // FIXME: can the default behavior be used; right now it breaks during resize.\n            before_draw: function() {},\n\n            /**\n     * Draw track tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale) {\n                return this._draw_line_track_tile(\n                    result,\n                    ctx,\n                    mode,\n                    region,\n                    w_scale\n                );\n            },\n\n            /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n            can_subset: function(entry) {\n                return entry.data[1][0] - entry.data[0][0] === 1;\n            },\n\n            /**\n     * Add min, max labels.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // Add min, max labels.\n                this._add_yaxis_label(\"max\");\n                this._add_yaxis_label(\"min\");\n            }\n        });\n\n        /**\n * Diagonal heatmap for showing interactions data.\n */\n        var DiagonalHeatmapTrack = function(view, container, obj_dict) {\n            this.mode = \"Heatmap\";\n            TiledTrack.call(this, view, container, obj_dict);\n        };\n\n        extend(\n            DiagonalHeatmapTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Heatmap\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"pos_color\",\n                            label: \"Positive Color\",\n                            type: \"color\",\n                            default_value: \"#FF8C00\"\n                        },\n                        {\n                            key: \"neg_color\",\n                            label: \"Negative Color\",\n                            type: \"color\",\n                            default_value: \"#4169E1\"\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Min Value\",\n                            type: \"int\",\n                            default_value: undefined\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Max Value\",\n                            type: \"int\",\n                            default_value: undefined\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 500,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {\n                    var track = this;\n                    return $.getJSON(\n                        track.dataset.url(),\n                        {\n                            data_type: \"data\",\n                            stats: true,\n                            chrom: track.view.chrom,\n                            low: 0,\n                            high: track.view.max_high,\n                            hda_ldda: track.dataset.get(\"hda_ldda\")\n                        },\n                        function(result) {\n                            var data = result.data;\n                        }\n                    );\n                },\n\n                /**\n     * Draw tile.\n     */\n                draw_tile: function(result, ctx, mode, region, w_scale) {\n                    // Paint onto canvas.\n                    var canvas = ctx.canvas,\n                        painter = new painters.DiagonalHeatmapPainter(\n                            result.data,\n                            region.get(\"start\"),\n                            region.get(\"end\"),\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                    painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                    return new Tile(this, region, w_scale, canvas, result.data);\n                }\n            }\n        );\n\n        /**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\n        var FeatureTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.container_div.addClass(\"feature-track\");\n            this.summary_draw_height = 30;\n            this.slotters = {};\n            this.start_end_dct = {};\n            this.left_offset = 200;\n\n            // this.painter = painters.LinkedFeaturePainter;\n            this.set_painter_from_config();\n        };\n        extend(\n            FeatureTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"block_color\",\n                            label: \"Block color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"label_color\",\n                            label: \"Label color\",\n                            type: \"color\",\n                            default_value: \"black\"\n                        },\n                        {\n                            key: \"show_counts\",\n                            label: \"Show summary counts\",\n                            type: \"bool\",\n                            default_value: true,\n                            help:\n                                \"Show the number of items in each bin when drawing summary histogram\"\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Histogram minimum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Histogram maximum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"connector_style\",\n                            label: \"Connector style\",\n                            type: \"select\",\n                            default_value: \"fishbones\",\n                            options: [\n                                {\n                                    label: \"Line with arrows\",\n                                    value: \"fishbone\"\n                                },\n                                { label: \"Arcs\", value: \"arcs\" }\n                            ]\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.set_painter_from_config();\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                set_painter_from_config: function() {\n                    if (this.config.get_value(\"connector_style\") === \"arcs\") {\n                        this.painter = painters.ArcLinkedFeaturePainter;\n                    } else {\n                        this.painter = painters.LinkedFeaturePainter;\n                    }\n                },\n\n                /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n                postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                    TiledTrack.prototype.postdraw_actions.call(\n                        this,\n                        tiles,\n                        width,\n                        w_scale,\n                        clear_after\n                    );\n\n                    var track = this,\n                        i,\n                        line_track_tiles = _.filter(tiles, function(t) {\n                            return t instanceof LineTrackTile;\n                        });\n\n                    //\n                    // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n                    // are labeled incomplete on the tile level because they cannot be completely drawn.\n                    //\n                    if (line_track_tiles.length === 0) {\n                        // Gather incomplete features together.\n                        var all_incomplete_features = {};\n                        _.each(_.pluck(tiles, \"incomplete_features\"), function(\n                            inc_features\n                        ) {\n                            _.each(inc_features, function(feature) {\n                                all_incomplete_features[feature[0]] = feature;\n                            });\n                        });\n\n                        // Draw incomplete features on each tile.\n                        var self = this;\n                        _.each(tiles, function(tile) {\n                            // Remove features already drawn on tile originally.\n                            var tile_incomplete_features = _.omit(\n                                all_incomplete_features,\n                                _.map(tile.incomplete_features, function(f) {\n                                    return f[0];\n                                })\n                            );\n\n                            // Remove features already drawn on tile in past postdraw actions.\n                            tile_incomplete_features = _.omit(\n                                tile_incomplete_features,\n                                _.keys(tile.other_tiles_features_drawn)\n                            );\n\n                            // Draw tile's incomplete features.\n                            if (_.size(tile_incomplete_features) !== 0) {\n                                // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                                // canvas, and then draw incomplete features on the new canvas.\n                                var features = {\n                                        data: _.values(tile_incomplete_features)\n                                    },\n                                    new_canvas = self.view.canvas_manager.new_canvas(),\n                                    new_canvas_ctx = new_canvas.getContext(\n                                        \"2d\"\n                                    );\n                                new_canvas.height = Math.max(\n                                    tile.canvas.height,\n                                    self.get_canvas_height(\n                                        features,\n                                        tile.mode,\n                                        tile.w_scale,\n                                        100\n                                    )\n                                );\n                                new_canvas.width = tile.canvas.width;\n                                new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                                new_canvas_ctx.translate(track.left_offset, 0);\n                                var new_tile = self.draw_tile(\n                                    features,\n                                    new_canvas_ctx,\n                                    tile.mode,\n                                    tile.region,\n                                    tile.w_scale,\n                                    tile.seq_data\n                                );\n                                $(tile.canvas).replaceWith($(new_tile.canvas));\n                                tile.canvas = new_canvas;\n                                _.extend(\n                                    tile.other_tiles_features_drawn,\n                                    all_incomplete_features\n                                );\n                            }\n                        });\n                    }\n\n                    // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n                    /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n                    //\n                    // Update filter attributes, UI.\n                    //\n\n                    // Update filtering UI.\n                    if (track.filters_manager) {\n                        var filters = track.filters_manager.filters,\n                            f;\n                        for (f = 0; f < filters.length; f++) {\n                            filters[f].update_ui_elt();\n                        }\n\n                        // Determine if filters are available; this is based on the tiles' data.\n                        // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n                        var filters_available = false,\n                            example_feature,\n                            filter;\n                        for (i = 0; i < tiles.length; i++) {\n                            if (tiles[i].data.length) {\n                                example_feature = tiles[i].data[0];\n                                for (f = 0; f < filters.length; f++) {\n                                    filter = filters[f];\n                                    if (\n                                        filter.applies_to(example_feature) &&\n                                        filter.min !== filter.max\n                                    ) {\n                                        filters_available = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                        // If filter availability changed, hide filter div if necessary and update menu.\n                        if (track.filters_available !== filters_available) {\n                            track.filters_available = filters_available;\n                            if (!track.filters_available) {\n                                track.filters_manager.hide();\n                            }\n                            track.update_icons();\n                        }\n                    }\n\n                    //\n                    // If not all features slotted, show icon for showing more rows (slots).\n                    //\n                    if (tiles[0] instanceof FeatureTrackTile) {\n                        var all_slotted = true;\n                        for (i = 0; i < tiles.length; i++) {\n                            if (!tiles[i].all_slotted) {\n                                all_slotted = false;\n                                break;\n                            }\n                        }\n                        this.action_icons.show_more_rows_icon.toggle(\n                            !all_slotted\n                        );\n                    } else {\n                        this.action_icons.show_more_rows_icon.hide();\n                    }\n                },\n\n                /**\n     * Update track interface to show display mode being used.\n     */\n                update_auto_mode: function(mode) {\n                    if (this.mode === \"Auto\") {\n                        if (mode === \"no_detail\") {\n                            mode = \"feature spans\";\n                        }\n                        this.action_icons.mode_icon.attr(\n                            \"title\",\n                            \"Set display mode (now: Auto/\" + mode + \")\"\n                        );\n                    }\n                },\n\n                /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n                incremental_slots: function(level, features, mode) {\n                    // Get/create incremental slots for level. If display mode changed,\n                    // need to create new slots.\n\n                    var dummy_context = this.view.canvas_manager.dummy_context,\n                        slotter = this.slotters[level];\n                    if (!slotter || slotter.mode !== mode) {\n                        slotter = new slotting.FeatureSlotter(\n                            level,\n                            mode,\n                            MAX_FEATURE_DEPTH,\n                            function(x) {\n                                return dummy_context.measureText(x);\n                            }\n                        );\n                        this.slotters[level] = slotter;\n                    }\n\n                    return slotter.slot_features(features);\n                },\n\n                /**\n     * Returns appropriate display mode based on data.\n     */\n                get_mode: function(data) {\n                    var mode;\n                    // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n                    if (data.extra_info === \"no_detail\" || this.is_overview) {\n                        mode = \"no_detail\";\n                    } else {\n                        // Choose b/t Squish and Pack.\n                        // Proxy measures for using Squish:\n                        // (a) error message re: limiting number of features shown;\n                        // (b) X number of features shown;\n                        // (c) size of view shown.\n                        // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n                        // fix this so that tiles are redrawn as necessary to use the same mode.\n                        //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n                        //     (result.data && result.data.length > 2000) ||\n                        //var data = result.data;\n                        // if ( (data.length && data.length < 4) ||\n                        //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n                        if (\n                            this.view.high - this.view.low >\n                            MIN_SQUISH_VIEW_WIDTH\n                        ) {\n                            mode = \"Squish\";\n                        } else {\n                            mode = \"Pack\";\n                        }\n                    }\n                    return mode;\n                },\n\n                /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n                get_canvas_height: function(\n                    result,\n                    mode,\n                    w_scale,\n                    canvas_width\n                ) {\n                    if (\n                        mode === \"Coverage\" ||\n                        result.dataset_type === \"bigwig\"\n                    ) {\n                        return this.summary_draw_height;\n                    } else {\n                        // All other modes require slotting.\n                        var rows_required = this.incremental_slots(\n                            w_scale,\n                            result.data,\n                            mode\n                        );\n                        // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n                        // works as a static function.\n                        var dummy_painter = new this.painter(\n                            null,\n                            null,\n                            null,\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                        return Math.max(\n                            this.min_height_px,\n                            dummy_painter.get_required_height(\n                                rows_required,\n                                canvas_width\n                            )\n                        );\n                    }\n                },\n\n                /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n                draw_tile: function(\n                    result,\n                    ctx,\n                    mode,\n                    region,\n                    w_scale,\n                    ref_seq,\n                    cur_tile\n                ) {\n                    var track = this,\n                        canvas = ctx.canvas,\n                        tile_low = region.get(\"start\"),\n                        tile_high = region.get(\"end\"),\n                        left_offset = this.left_offset;\n\n                    // If data is line track data, draw line track tile.\n                    if (result.dataset_type === \"bigwig\") {\n                        return this._draw_line_track_tile(\n                            result,\n                            ctx,\n                            mode,\n                            region,\n                            w_scale\n                        );\n                    }\n\n                    // Handle row-by-row tracks\n\n                    // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n                    var filtered = [],\n                        slots = this.slotters[w_scale].slots,\n                        all_slotted = true;\n                    if (result.data) {\n                        var filters = this.filters_manager.filters;\n                        for (\n                            var i = 0, len = result.data.length;\n                            i < len;\n                            i++\n                        ) {\n                            var feature = result.data[i];\n                            var hide_feature = false;\n                            var filter;\n                            for (\n                                var f = 0, flen = filters.length;\n                                f < flen;\n                                f++\n                            ) {\n                                filter = filters[f];\n                                filter.update_attrs(feature);\n                                if (!filter.keep(feature)) {\n                                    hide_feature = true;\n                                    break;\n                                }\n                            }\n                            if (!hide_feature) {\n                                // Feature visible.\n                                filtered.push(feature);\n                                // Set flag if not slotted.\n                                if (!(feature[0] in slots)) {\n                                    all_slotted = false;\n                                }\n                            }\n                        }\n                    }\n\n                    // Create painter.\n                    var filter_alpha_scaler = this.filters_manager.alpha_filter\n                            ? new FilterScaler(\n                                  this.filters_manager.alpha_filter\n                              )\n                            : null,\n                        filter_height_scaler = this.filters_manager\n                            .height_filter\n                            ? new FilterScaler(\n                                  this.filters_manager.height_filter\n                              )\n                            : null,\n                        painter = new this.painter(\n                            filtered,\n                            tile_low,\n                            tile_high,\n                            this.config.to_key_value_dict(),\n                            mode,\n                            filter_alpha_scaler,\n                            filter_height_scaler,\n                            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                            ref_seq,\n                            // Only the ReadPainer will use this function\n                            function(b) {\n                                return track.view.get_base_color(b);\n                            }\n                        );\n                    var feature_mapper = null;\n\n                    ctx.fillStyle = this.config.get_value(\"block_color\");\n                    ctx.font = ctx.canvas.manager.default_font;\n                    ctx.textAlign = \"right\";\n\n                    if (result.data) {\n                        // Draw features.\n                        var draw_results = painter.draw(\n                            ctx,\n                            canvas.width,\n                            canvas.height,\n                            w_scale,\n                            slots\n                        );\n                        feature_mapper = draw_results.feature_mapper;\n                        incomplete_features = draw_results.incomplete_features;\n                        feature_mapper.translation = -left_offset;\n                    }\n\n                    // If not drawing on current tile, create new tile.\n                    if (!cur_tile) {\n                        return new FeatureTrackTile(\n                            track,\n                            region,\n                            w_scale,\n                            canvas,\n                            result.data,\n                            mode,\n                            result.message,\n                            all_slotted,\n                            feature_mapper,\n                            incomplete_features,\n                            ref_seq\n                        );\n                    }\n                }\n            }\n        );\n\n        /**\n * Displays variant data.\n */\n        var VariantTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.painter = painters.VariantPainter;\n            this.summary_draw_height = 30;\n\n            // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n            // variant is drawn when variant is at start of tile.\n            this.left_offset = 30;\n        };\n\n        extend(\n            VariantTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            {\n                display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"color\",\n                            label: \"Histogram color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"show_sample_data\",\n                            label: \"Show sample data\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"show_labels\",\n                            label: \"Show summary and sample labels\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"summary_height\",\n                            label: \"Locus summary height\",\n                            type: \"float\",\n                            default_value: 20\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                },\n\n                /**\n     * Draw tile.\n     */\n                draw_tile: function(result, ctx, mode, region, w_scale) {\n                    // Data could be coverage data or variant data.\n                    if (result.dataset_type === \"bigwig\") {\n                        return this._draw_line_track_tile(\n                            result,\n                            ctx,\n                            \"Histogram\",\n                            region,\n                            w_scale\n                        );\n                    } else {\n                        // result.dataset_type === 'variant'\n                        var view = this.view,\n                            painter = new this.painter(\n                                result.data,\n                                region.get(\"start\"),\n                                region.get(\"end\"),\n                                this.config.to_key_value_dict(),\n                                mode,\n                                function(b) {\n                                    return view.get_base_color(b);\n                                }\n                            );\n                        painter.draw(\n                            ctx,\n                            ctx.canvas.width,\n                            ctx.canvas.height,\n                            w_scale\n                        );\n                        return new Tile(\n                            this,\n                            region,\n                            w_scale,\n                            ctx.canvas,\n                            result.data\n                        );\n                    }\n                },\n\n                /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n                get_canvas_height: function(\n                    result,\n                    mode,\n                    w_scale,\n                    canvas_width\n                ) {\n                    if (result.dataset_type === \"bigwig\") {\n                        return this.summary_draw_height;\n                    } else {\n                        // HACK: sample_names is not be defined when dataset definition is fetched before\n                        // dataset is complete (as is done when running tools). In that case, fall back on\n                        // # of samples in data. This can be fixed by re-requesting dataset definition\n                        // in init.\n                        var num_samples = this.dataset.get_metadata(\n                            \"sample_names\"\n                        )\n                            ? this.dataset.get_metadata(\"sample_names\").length\n                            : 0;\n                        if (num_samples === 0 && result.data.length !== 0) {\n                            // Sample data is separated by commas, so this computes # of samples:\n                            num_samples = result.data[0][7].match(/,/g);\n                            if (num_samples === null) {\n                                num_samples = 1;\n                            } else {\n                                num_samples = num_samples.length + 1;\n                            }\n                        }\n\n                        var dummy_painter = new this.painter(\n                            null,\n                            null,\n                            null,\n                            this.config.to_key_value_dict(),\n                            mode\n                        );\n                        return dummy_painter.get_required_height(num_samples);\n                    }\n                },\n\n                /**\n     * Additional initialization required before drawing track for the first time.\n     */\n                predraw_init: function() {\n                    var deferreds = [Track.prototype.predraw_init.call(this)];\n                    // FIXME: updating dataset metadata is only needed for visual analysis. Can\n                    // this be moved somewhere else?\n                    if (!this.dataset.get_metadata(\"sample_names\")) {\n                        deferreds.push(this.dataset.fetch());\n                    }\n                    return deferreds;\n                },\n\n                /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n                postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                    TiledTrack.prototype.postdraw_actions.call(\n                        this,\n                        tiles,\n                        width,\n                        w_scale,\n                        clear_after\n                    );\n\n                    var line_track_tiles = _.filter(tiles, function(t) {\n                        return t instanceof LineTrackTile;\n                    });\n\n                    // Add summary/sample labels if needed and not already included.\n                    var sample_names = this.dataset.get_metadata(\n                        \"sample_names\"\n                    );\n                    if (\n                        line_track_tiles.length === 0 &&\n                        this.config.get_value(\"show_labels\") &&\n                        sample_names &&\n                        sample_names.length > 1\n                    ) {\n                        var font_size;\n\n                        // Add and/or style labels.\n                        if (\n                            this.container_div.find(\".yaxislabel.variant\")\n                                .length === 0\n                        ) {\n                            // Add summary and sample labels.\n\n                            // Add summary label to middle of summary area.\n                            font_size =\n                                this.config.get_value(\"summary_height\") / 2;\n                            this.tiles_div.prepend(\n                                $(\"<div/>\")\n                                    .text(\"Summary\")\n                                    .addClass(\"yaxislabel variant top\")\n                                    .css({\n                                        \"font-size\": font_size + \"px\",\n                                        top:\n                                            (this.config.get_value(\n                                                \"summary_height\"\n                                            ) -\n                                                font_size) /\n                                                2 +\n                                            \"px\"\n                                    })\n                            );\n\n                            // Show sample labels.\n                            if (this.config.get_value(\"show_sample_data\")) {\n                                var samples_div_html = sample_names.join(\n                                    \"<br/>\"\n                                );\n\n                                this.tiles_div.prepend(\n                                    $(\"<div/>\")\n                                        .html(samples_div_html)\n                                        .addClass(\n                                            \"yaxislabel variant top sample\"\n                                        )\n                                        .css({\n                                            top: this.config.get_value(\n                                                \"summary_height\"\n                                            )\n                                        })\n                                );\n                            }\n                        }\n\n                        // Style labels.\n\n                        // Match sample font size to mode.\n                        font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n                        $(this.tiles_div)\n                            .find(\".sample\")\n                            .css({\n                                \"font-size\": font_size,\n                                \"line-height\": font_size\n                            });\n                        // Color labels to preference color.\n                        $(this.tiles_div)\n                            .find(\".yaxislabel\")\n                            .css(\"color\", this.config.get_value(\"label_color\"));\n                    } else {\n                        // Remove all labels.\n                        this.container_div.find(\".yaxislabel.variant\").remove();\n                    }\n                }\n            }\n        );\n\n        /**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\n        var ReadTrack = function(view, container, obj_dict) {\n            FeatureTrack.call(this, view, container, obj_dict);\n            this.painter = painters.ReadPainter;\n            this.update_icons();\n        };\n\n        extend(\n            ReadTrack.prototype,\n            Drawable.prototype,\n            TiledTrack.prototype,\n            FeatureTrack.prototype,\n            {\n                build_config_params: function() {\n                    return _.union(Drawable.prototype.config_params, [\n                        {\n                            key: \"block_color\",\n                            label: \"Histogram color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"detail_block_color\",\n                            label: \"Sense strand block color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand block color\",\n                            type: \"color\",\n                            default_value: \"#DDDDDD\"\n                        },\n                        {\n                            key: \"label_color\",\n                            label: \"Label color\",\n                            type: \"color\",\n                            default_value: \"black\"\n                        },\n                        {\n                            key: \"show_insertions\",\n                            label: \"Show insertions\",\n                            type: \"bool\",\n                            default_value: false\n                        },\n                        {\n                            key: \"show_differences\",\n                            label: \"Show differences only\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"show_counts\",\n                            label: \"Show summary counts\",\n                            type: \"bool\",\n                            default_value: true\n                        },\n                        {\n                            key: \"mode\",\n                            type: \"string\",\n                            default_value: this.mode,\n                            hidden: true\n                        },\n                        {\n                            key: \"min_value\",\n                            label: \"Histogram minimum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"max_value\",\n                            label: \"Histogram maximum\",\n                            type: \"float\",\n                            default_value: undefined,\n                            help: \"clear value to set automatically\"\n                        },\n                        {\n                            key: \"height\",\n                            type: \"int\",\n                            default_value: 0,\n                            hidden: true\n                        }\n                    ]);\n                },\n\n                config_onchange: function() {\n                    this.set_name(this.config.get_value(\"name\"));\n                    this.request_draw({ clear_tile_cache: true });\n                }\n            }\n        );\n\n        /**\n * Objects that can be added to a view.\n */\n        var addable_objects = {\n            CompositeTrack: CompositeTrack,\n            DrawableGroup: DrawableGroup,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            FeatureTrack: FeatureTrack,\n            LineTrack: LineTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            // For backward compatibility, map vcf track to variant.\n            VcfTrack: VariantTrack\n        };\n\n        /**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\n        var object_from_template = function(template, view, container) {\n            if (\"copy\" in template) {\n                // Template is an object.\n                return template.copy(container);\n            } else {\n                // Template is a dictionary.\n                var drawable_type = template.obj_type;\n                // For backward compatibility:\n                if (!drawable_type) {\n                    drawable_type = template.track_type;\n                }\n                return new addable_objects[drawable_type](\n                    view,\n                    container,\n                    template\n                );\n            }\n        };\n\n        return {\n            TracksterView: TracksterView,\n            DrawableGroup: DrawableGroup,\n            LineTrack: LineTrack,\n            FeatureTrack: FeatureTrack,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            CompositeTrack: CompositeTrack,\n            object_from_template: object_from_template\n        };\n    }\n);\n"]}