{"version":3,"sources":["viz/trackster/util.js"],"names":["define","ServerStateDeferred","get_random_color","number","rgx","commatize","test","replace","is_deferred","d","Backbone","Model","extend","defaults","ajax_settings","result","interval","go","deferred","$","Deferred","self","this","get","success_fn","success","setTimeout","_go","colors","i","length","parseInt","slice","nb","other_color","or","og","ob","n_brightness","o_brightness","diff","ok","num_tries","brightness","r","g","b","new_color","Math","nr","round","random","ng","r1","g1","b1","r2","g2","b2","difference","max","min","abs","toString","substr"],"mappings":"aAAAA,OAAO,WAgJCC,OACAC,UA7IJ,SAAmBC,GACfA,GAAU,GAAVA,IADJ,IAAAC,EAASC,eACLF,EAAUG,KAAIH,IACVC,EAAMD,EAAAI,QAAVH,EAAA,SAEID,OAAAA,GAqIRK,YA7HkB,SAASC,GACvB,MAAO,YAAaA,GAjB5BR,oBAwB8BS,SAASC,MAAMC,QACrCC,UADAZ,iBACAY,SAAU,IACNC,WAAAA,SADMC,GAENC,OAAU,IASdC,GAAI,WACA,IAAIC,EAAWC,EAAEC,WADjBC,EAAAC,KACIJ,EAAaE,EAAFG,IAAf,iBACIF,EADJA,EAAAE,IAAA,cAEIT,EAAAA,EAAgBO,IAAAA,YAaf,OAZDG,SAAAA,IACAR,EAAAA,KAAWK,GAASI,QAJxB,SAAAV,GAKUS,EAAWT,GAELS,EAAWT,QAASA,GAGjBW,WAAAC,EAAAX,KAIVW,GAdTT,KA4GJhB,iBAlFmB,SAAS0B,GAA5B1B,IACA0B,EAAA,WAMsB,iBAAXA,IADXA,GAAAA,IAMA,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IADnCD,EAAAC,GAAAE,SAAAH,EAAAC,GAAAG,MAAA,GAAA,IASA,IAkBIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACDF,EA5BCG,EAAa,SAASC,EAAGC,EAAGC,GADhC,OAAA,IAAAF,EAAA,IAAAC,EAAA,IAAAC,GAAA,KA8BIL,GAAA,EACAM,EAAYC,EACZC,EAAAA,CAQIb,IAFAF,EAAAA,EAHJI,GAAeK,UADfV,EAAKc,KAAYG,MAAjB,SAAiBF,KAAjBG,aAC8BC,GAC9BX,GAAA,MAAKM,IAAL,EACAd,EAAgBL,IAAXC,GAEDM,GAAAA,EACAC,EAAK,EAACF,EAAAA,EAAAA,OAAcL,IASnB,GARDQ,EAAKH,EAAcL,GACnBU,GAAeI,SAAfJ,IAAe,GACfC,GAAO,MAAPA,IAAO,EACPH,EAAA,IAAAH,EACAK,EAAAI,EAAAR,EAAAC,EAAAC,GACAG,EAxCS,SAASa,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAD9C,OACIC,KAAAA,IAAaN,EAAAG,GACbR,KACIA,IAAKY,EAAIP,IAFjBL,KAAAY,IAAAN,EAAAG,GAAAT,KAAAa,IAAAP,EAAAG,KAKST,KAAKY,IAAIL,EAAIG,GAAMV,KAAKa,IAAIN,EAAIG,IAmC7BV,CAASV,EAAAA,EAAAA,EAAeC,EAAAA,EAAAA,GAG3BS,KAAAc,IAAAxB,EAAAC,GAAA,IAAAC,EAAA,IAAA,CACJC,GAAA,EAFO,MAOZC,WACOD,GAAOC,GAAYK,IAG9B,MAAO,KAAA,SAAAA,GAAAgB,SAAA,IAAAC,OAAA,EAAA","file":"../../../scripts/viz/trackster/util.js","sourcesContent":["define(function() {\n    /**\n * Stringifies a number adding commas for digit grouping as per North America.\n */\n    function commatize(number) {\n        number += \"\"; // Convert to string\n        var rgx = /(\\d+)(\\d{3})/;\n        while (rgx.test(number)) {\n            number = number.replace(rgx, \"$1\" + \",\" + \"$2\");\n        }\n        return number;\n    }\n\n    /**\n * Helper to determine if object is jQuery deferred.\n */\n    var is_deferred = function(d) {\n        return \"promise\" in d;\n    };\n\n    /**\n * Implementation of a server-state based deferred. Server is repeatedly polled, and when\n * condition is met, deferred is resolved.\n */\n    var ServerStateDeferred = Backbone.Model.extend({\n        defaults: {\n            ajax_settings: {},\n            interval: 1000,\n            success_fn: function(result) {\n                return true;\n            }\n        },\n\n        /**\n     * Returns a deferred that resolves when success function returns true.\n     */\n        go: function() {\n            var deferred = $.Deferred(),\n                self = this,\n                ajax_settings = self.get(\"ajax_settings\"),\n                success_fn = self.get(\"success_fn\"),\n                interval = self.get(\"interval\"),\n                _go = function() {\n                    $.ajax(ajax_settings).success(function(result) {\n                        if (success_fn(result)) {\n                            // Result is good, so resolve.\n                            deferred.resolve(result);\n                        } else {\n                            // Result not good, try again.\n                            setTimeout(_go, interval);\n                        }\n                    });\n                };\n            _go();\n            return deferred;\n        }\n    });\n\n    /**\n * Returns a random color in hexadecimal format that is sufficiently different from a single color\n * or set of colors.\n * @param colors a color or list of colors in the format '#RRGGBB'\n */\n    var get_random_color = function(colors) {\n        // Default for colors is white.\n        if (!colors) {\n            colors = \"#ffffff\";\n        }\n\n        // If needed, create list of colors.\n        if (typeof colors === \"string\") {\n            colors = [colors];\n        }\n\n        // Convert colors to numbers.\n        for (var i = 0; i < colors.length; i++) {\n            colors[i] = parseInt(colors[i].slice(1), 16);\n        }\n\n        // -- Perceived brightness and difference formulas are from\n        // -- http://www.w3.org/WAI/ER/WD-AERT/#color-contrast\n\n        // Compute perceived color brightness (based on RGB-YIQ transformation):\n        var brightness = function(r, g, b) {\n            return (r * 299 + g * 587 + b * 114) / 1000;\n        };\n\n        // Compute color difference:\n        var difference = function(r1, g1, b1, r2, g2, b2) {\n            return (\n                Math.max(r1, r2) -\n                Math.min(r1, r2) +\n                (Math.max(g1, g2) - Math.min(g1, g2)) +\n                (Math.max(b1, b2) - Math.min(b1, b2))\n            );\n        };\n\n        // Create new random color.\n        var new_color,\n            nr,\n            ng,\n            nb,\n            other_color,\n            or,\n            og,\n            ob,\n            n_brightness,\n            o_brightness,\n            diff,\n            ok = false,\n            num_tries = 0;\n        do {\n            // New color is never white b/c random in [0,1)\n            new_color = Math.round(Math.random() * 0xffffff);\n            nr = (new_color & 0xff0000) >> 16;\n            ng = (new_color & 0x00ff00) >> 8;\n            nb = new_color & 0x0000ff;\n            n_brightness = brightness(nr, ng, nb);\n            ok = true;\n            for (i = 0; i < colors.length; i++) {\n                other_color = colors[i];\n                or = (other_color & 0xff0000) >> 16;\n                og = (other_color & 0x00ff00) >> 8;\n                ob = other_color & 0x0000ff;\n                o_brightness = brightness(or, og, ob);\n                diff = difference(nr, ng, nb, or, og, ob);\n                // These thresholds may need to be adjusted. Brightness difference range is 125;\n                // color difference range is 500.\n                if (Math.abs(n_brightness - o_brightness) < 40 || diff < 200) {\n                    ok = false;\n                    break;\n                }\n            }\n\n            num_tries++;\n        } while (!ok && num_tries <= 10);\n\n        // Add 0x1000000 to left pad number with 0s.\n        return \"#\" + (0x1000000 + new_color).toString(16).substr(1, 6);\n    };\n\n    return {\n        commatize: commatize,\n        is_deferred: is_deferred,\n        ServerStateDeferred: ServerStateDeferred,\n        get_random_color: get_random_color\n    };\n});\n"]}