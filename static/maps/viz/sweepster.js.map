{"version":3,"sources":["viz/sweepster.js"],"names":["define","ToolInputsSettings","defaults","inputs","values","_","d3","util","visualization","ToolParameterTree","tool","tree_data","mod_icon_btn","Backbone","Model","extend","input","self","remove_param","initialize","options","each","this","get","input_config","set_tree_data","on","get_tree_params","add_param","config","find","name","params_samples","set","node_id","param","param_label","settings","param_samples","samples","length","id","value","setting","index","map","children","get_samples","cur_node","create_tree_data","get_settings","node","where","get_num_leaves","reduce","memo","all_settings","target_node","get_node_settings","fixed_settings","get_inputs_dict","get_subtree_nodes","parent","a_node","depth","flatten","cur_parent","find_child","c","clone","get_connected_nodes","parents","push","data_url","Galaxy","min","get_leaf","same_settings","other_settings","a_track","child","this_settings","track","toJSON","max","SweepsterVisualization","Visualization","tracks","default_mode","mode","regions","tool_with_samplable_inputs","track_config","root","converted_datasets_state_url","tree_config","object_from_template","title","type","prop","dataset_id","to_dict","TILE_LEN","Collection","model","SweepsterTrack","render","prototype","settings_td","settings_div","append","toggle","trigger","data","Dataset","dataset","tools","Tool","icon_menu","icon_class","GenomeRegionCollection","TrackCollection","on_click","remove_inputs","$el","draw_tiles","add_track","add","tile_containers","tool_id","data_manager","data_is_ready","SweepsterTrackView","View","tagName","canvas_manager","ToolInputValOrSweepView","number_input_template","$","single_input_row","sweep_inputs_row","addClass","hide","css","text","template","options_text","insertAfter","click","create_icon_buttons_menu","remove","prepend","html","attr","when","then","input_view","region","tool_row","resolution","get_data","ToolParameterTreeView","canvas","new_canvas","width","height","get_canvas_height","tile_data","w_scale","draw_tile","getContext","empty","tree_params","vis","select","selectAll","d","change","connected_node_ids","IntegerToolParameter","SelectToolParameter","option","val","join","select_input_template","className","menu","track_collection_container","show","key","label","parseFloat","tool_form_view","ToolFormView","tree_design_view","ToolParameterTreeDesignView","not","at","i","first","help_div","close_button","tool_param_tree_view","handle_node_clicks","cluster","size","diagonal","svg","projection","y","x","nodes","param_depths","uniq","pluck","center_left","position","left","window","modes","links","mode_mapping","enter","make_popupmenu","base","get_value","undefined","outputs","style","tool_name","hide_modal","pm_track","track_view","SweepsterVisualizationView","helpText","CanvasManager","run_jobs_deferred","Deferred","view","Ok","ConfigSettingCollection","from_models_and_saved_values","resolve","run_jobs","default_value","new_tracks","setTimeout","set_input_values","tr","appendTo","toString","tracks_div","location","tooltip_config","placement","get_base_color","toLowerCase","run_tool_on_dataset","rerun","show_modal","param_tree","hover","settings_leaf","filter","output","prefs","to_key_value_dict","track_obj","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\ndefine(\n    [\n        \"libs/underscore\",\n        \"libs/d3\",\n        \"viz/trackster/util\",\n        \"viz/visualization\",\n        \"viz/trackster/tracks\",\n        \"mvc/tool/tools\",\n        \"mvc/dataset/data\",\n        \"utils/config\",\n        \"mvc/ui/icon-button\"\n    ],\n    function(\n        _,\n        d3,\n        util,\n        visualization,\n        tracks,\n        tools,\n        data,\n        config,\n        mod_icon_btn\n    ) {\n        /**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\n        var ToolInputsSettings = Backbone.Model.extend({\n            defaults: {\n                inputs: null,\n                values: null\n            }\n        });\n\n        /**\n * Tree for a tool's parameters.\n */\n        var ToolParameterTree = Backbone.Model.extend({\n            defaults: {\n                tool: null,\n                tree_data: null\n            },\n\n            initialize: function(options) {\n                // Set up tool parameters to work with tree.\n                var self = this;\n                this.get(\"tool\")\n                    .get(\"inputs\")\n                    .each(function(input) {\n                        // Listen for changes to input's attributes.\n                        input.on(\n                            \"change:min change:max change:num_samples\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.set_tree_data();\n                                }\n                            },\n                            self\n                        );\n                        input.on(\n                            \"change:in_ptree\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.add_param(input);\n                                } else {\n                                    self.remove_param(input);\n                                }\n                                self.set_tree_data();\n                            },\n                            self\n                        );\n                    });\n\n                // If there is a config, use it.\n                if (options.config) {\n                    _.each(options.config, function(input_config) {\n                        var input = self\n                            .get(\"tool\")\n                            .get(\"inputs\")\n                            .find(function(input) {\n                                return input.get(\"name\") === input_config.name;\n                            });\n                        self.add_param(input);\n                        input.set(input_config);\n                    });\n                }\n            },\n\n            add_param: function(param) {\n                // If parameter already present, do not add it.\n                if (param.get(\"ptree_index\")) {\n                    return;\n                }\n\n                param.set(\"in_ptree\", true);\n                param.set(\"ptree_index\", this.get_tree_params().length);\n            },\n\n            remove_param: function(param) {\n                // Remove param from tree.\n                param.set(\"in_ptree\", false);\n                param.set(\"ptree_index\", null);\n\n                // Update ptree indices for remaining params.\n                _(this.get_tree_params()).each(function(input, index) {\n                    // +1 to use 1-based indexing.\n                    input.set(\"ptree_index\", index + 1);\n                });\n            },\n\n            /**\n     * Sets tree data using tool's inputs.\n     */\n            set_tree_data: function() {\n                // Get samples for each parameter.\n                var params_samples = _.map(this.get_tree_params(), function(\n                    param\n                ) {\n                    return {\n                        param: param,\n                        samples: param.get_samples()\n                    };\n                });\n                var node_id = 0,\n                    // Creates tree data recursively.\n                    create_tree_data = function(params_samples, index) {\n                        var param_samples = params_samples[index],\n                            param = param_samples.param,\n                            param_label = param.get(\"label\"),\n                            settings = param_samples.samples;\n\n                        // Create leaves when last parameter setting is reached.\n                        if (params_samples.length - 1 === index) {\n                            return _.map(settings, function(setting) {\n                                return {\n                                    id: node_id++,\n                                    name: setting,\n                                    param: param,\n                                    value: setting\n                                };\n                            });\n                        }\n\n                        // Recurse to handle other parameters.\n                        return _.map(settings, function(setting) {\n                            return {\n                                id: node_id++,\n                                name: setting,\n                                param: param,\n                                value: setting,\n                                children: create_tree_data(\n                                    params_samples,\n                                    index + 1\n                                )\n                            };\n                        });\n                    };\n\n                this.set(\"tree_data\", {\n                    name: \"Root\",\n                    id: node_id++,\n                    children:\n                        params_samples.length !== 0\n                            ? create_tree_data(params_samples, 0)\n                            : null\n                });\n            },\n\n            get_tree_params: function() {\n                // Filter and sort parameters to get list in tree.\n                return _(\n                    this.get(\"tool\")\n                        .get(\"inputs\")\n                        .where({ in_ptree: true })\n                ).sortBy(function(input) {\n                    return input.get(\"ptree_index\");\n                });\n            },\n\n            /**\n     * Returns number of leaves in tree.\n     */\n            get_num_leaves: function() {\n                return this.get_tree_params().reduce(function(memo, param) {\n                    return memo * param.get_samples().length;\n                }, 1);\n            },\n\n            /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n            get_node_settings: function(target_node) {\n                // -- Get fixed settings from tool and parent nodes.\n\n                // Start with tool's settings.\n                var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n                // Get fixed settings using node's parents.\n                var cur_node = target_node.parent;\n                if (cur_node) {\n                    while (cur_node.depth !== 0) {\n                        fixed_settings[cur_node.param.get(\"name\")] =\n                            cur_node.value;\n                        cur_node = cur_node.parent;\n                    }\n                }\n\n                // Walk subtree starting at clicked node to get full list of settings.\n                var self = this,\n                    get_settings = function(node, settings) {\n                        // Add setting for this node. Root node does not have a param,\n                        // however.\n                        if (node.param) {\n                            settings[node.param.get(\"name\")] = node.value;\n                        }\n\n                        if (!node.children) {\n                            // At leaf node, so return settings.\n                            return new ToolInputsSettings({\n                                inputs: self.get(\"tool\").get(\"inputs\"),\n                                values: settings\n                            });\n                        } else {\n                            // At interior node: return list of subtree settings.\n                            return _.flatten(\n                                _.map(node.children, function(c) {\n                                    return get_settings(c, _.clone(settings));\n                                })\n                            );\n                        }\n                    },\n                    all_settings = get_settings(target_node, fixed_settings);\n\n                // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n                if (!_.isArray(all_settings)) {\n                    all_settings = [all_settings];\n                }\n\n                return all_settings;\n            },\n\n            /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n            get_connected_nodes: function(node) {\n                var get_subtree_nodes = function(a_node) {\n                    if (!a_node.children) {\n                        return a_node;\n                    } else {\n                        // At interior node: return subtree nodes.\n                        return _.flatten([\n                            a_node,\n                            _.map(a_node.children, function(c) {\n                                return get_subtree_nodes(c);\n                            })\n                        ]);\n                    }\n                };\n\n                // Get node's parents.\n                var parents = [],\n                    cur_parent = node.parent;\n                while (cur_parent) {\n                    parents.push(cur_parent);\n                    cur_parent = cur_parent.parent;\n                }\n\n                return _.flatten([parents, get_subtree_nodes(node)]);\n            },\n\n            /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n            get_leaf: function(settings) {\n                var cur_node = this.get(\"tree_data\"),\n                    find_child = function(children) {\n                        return _.find(children, function(child) {\n                            return (\n                                settings[child.param.get(\"name\")] ===\n                                child.value\n                            );\n                        });\n                    };\n\n                while (cur_node.children) {\n                    cur_node = find_child(cur_node.children);\n                }\n                return cur_node;\n            },\n\n            /**\n     * Returns a list of parameters used in tree.\n     */\n            toJSON: function() {\n                // FIXME: returning and jsonifying complete param causes trouble on the server side,\n                // so just use essential attributes for now.\n                return this.get_tree_params().map(function(param) {\n                    return {\n                        name: param.get(\"name\"),\n                        min: param.get(\"min\"),\n                        max: param.get(\"max\"),\n                        num_samples: param.get(\"num_samples\")\n                    };\n                });\n            }\n        });\n\n        var SweepsterTrack = Backbone.Model.extend({\n            defaults: {\n                track: null,\n                mode: \"Pack\",\n                settings: null,\n                regions: null\n            },\n\n            initialize: function(options) {\n                this.set(\"regions\", options.regions);\n                if (options.track) {\n                    // FIXME: find a better way to deal with needed URLs:\n                    var track_config = _.extend(\n                        {\n                            data_url: Galaxy.root + \"dummy1\",\n                            converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                        },\n                        options.track\n                    );\n                    this.set(\n                        \"track\",\n                        tracks.object_from_template(track_config, {}, null)\n                    );\n                }\n            },\n\n            same_settings: function(a_track) {\n                var this_settings = this.get(\"settings\"),\n                    other_settings = a_track.get(\"settings\");\n                for (var prop in this_settings) {\n                    if (\n                        !other_settings[prop] ||\n                        this_settings[prop] !== other_settings[prop]\n                    ) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            toJSON: function() {\n                return {\n                    track: this.get(\"track\").to_dict(),\n                    settings: this.get(\"settings\"),\n                    regions: this.get(\"regions\")\n                };\n            }\n        });\n\n        var TrackCollection = Backbone.Collection.extend({\n            model: SweepsterTrack\n        });\n\n        /**\n * Sweepster visualization model.\n */\n        var SweepsterVisualization = visualization.Visualization.extend({\n            defaults: _.extend(\n                {},\n                visualization.Visualization.prototype.defaults,\n                {\n                    dataset: null,\n                    tool: null,\n                    parameter_tree: null,\n                    regions: null,\n                    tracks: null,\n                    default_mode: \"Pack\"\n                }\n            ),\n\n            initialize: function(options) {\n                this.set(\"dataset\", new data.Dataset(options.dataset));\n                this.set(\"tool\", new tools.Tool(options.tool));\n                this.set(\n                    \"regions\",\n                    new visualization.GenomeRegionCollection(options.regions)\n                );\n                this.set(\"tracks\", new TrackCollection(options.tracks));\n\n                var tool_with_samplable_inputs = this.get(\"tool\");\n                this.set(\n                    \"tool_with_samplable_inputs\",\n                    tool_with_samplable_inputs\n                );\n                // Remove complex parameters for now.\n                tool_with_samplable_inputs.remove_inputs([\n                    \"data\",\n                    \"hidden_data\",\n                    \"conditional\",\n                    \"text\"\n                ]);\n\n                this.set(\n                    \"parameter_tree\",\n                    new ToolParameterTree({\n                        tool: tool_with_samplable_inputs,\n                        config: options.tree_config\n                    })\n                );\n            },\n\n            add_track: function(track) {\n                this.get(\"tracks\").add(track);\n            },\n\n            toJSON: function() {\n                return {\n                    id: this.get(\"id\"),\n                    title:\n                        \"Parameter exploration for dataset '\" +\n                        this.get(\"dataset\").get(\"name\") +\n                        \"'\",\n                    type: \"sweepster\",\n                    dataset_id: this.get(\"dataset\").id,\n                    tool_id: this.get(\"tool\").id,\n                    regions: this.get(\"regions\").toJSON(),\n                    tree_config: this.get(\"parameter_tree\").toJSON(),\n                    tracks: this.get(\"tracks\").toJSON()\n                };\n            }\n        });\n\n        /**\n * --- Views ---\n */\n\n        /**\n * Sweepster track view.\n */\n        var SweepsterTrackView = Backbone.View.extend({\n            tagName: \"tr\",\n\n            TILE_LEN: 250,\n\n            initialize: function(options) {\n                this.canvas_manager = options.canvas_manager;\n                this.render();\n                this.model.on(\n                    \"change:track change:mode\",\n                    this.draw_tiles,\n                    this\n                );\n            },\n\n            render: function() {\n                // Render settings icon and popup.\n                // TODO: use template.\n                var settings = this.model.get(\"settings\"),\n                    values = settings.get(\"values\"),\n                    settings_td = $(\"<td/>\")\n                        .addClass(\"settings\")\n                        .appendTo(this.$el),\n                    settings_div = $(\"<div/>\")\n                        .addClass(\"track-info\")\n                        .hide()\n                        .appendTo(settings_td);\n                settings_div.append(\n                    $(\"<div/>\")\n                        .css(\"font-weight\", \"bold\")\n                        .text(\"Track Settings\")\n                );\n                settings.get(\"inputs\").each(function(input) {\n                    settings_div.append(\n                        input.get(\"label\") +\n                            \": \" +\n                            values[input.get(\"name\")] +\n                            \"<br/>\"\n                    );\n                });\n                var self = this,\n                    run_on_dataset_button = $(\"<button/>\")\n                        .appendTo(settings_div)\n                        .text(\"Run on complete dataset\")\n                        .click(function() {\n                            settings_div.toggle();\n                            self.trigger(\"run_on_dataset\", settings);\n                        });\n                var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n                    {\n                        title: \"Settings\",\n                        icon_class: \"gear track-settings\",\n                        on_click: function() {\n                            settings_div.toggle();\n                        }\n                    },\n                    {\n                        title: \"Remove\",\n                        icon_class: \"cross-circle\",\n                        on_click: function() {\n                            self.$el.remove();\n                            $(\".tooltip\").remove();\n                            // TODO: remove track from viz collection.\n                        }\n                    }\n                ]);\n                settings_td.prepend(icon_menu.$el);\n\n                // Render tile placeholders.\n                this.model.get(\"regions\").each(function() {\n                    self.$el.append(\n                        $(\"<td/>\")\n                            .addClass(\"tile\")\n                            .html(\n                                $(\"<img/>\").attr(\n                                    \"src\",\n                                    Galaxy.root +\n                                        \"images/loading_large_white_bg.gif\"\n                                )\n                            )\n                    );\n                });\n\n                if (this.model.get(\"track\")) {\n                    this.draw_tiles();\n                }\n            },\n\n            /**\n     * Draw tiles for regions.\n     */\n            draw_tiles: function() {\n                var self = this,\n                    track = this.model.get(\"track\"),\n                    regions = this.model.get(\"regions\"),\n                    tile_containers = this.$el.find(\"td.tile\");\n\n                // Do nothing if track is not defined.\n                if (!track) {\n                    return;\n                }\n\n                // When data is ready, draw tiles.\n                $.when(track.data_manager.data_is_ready()).then(function(\n                    data_ok\n                ) {\n                    // Draw tile for each region.\n                    regions.each(function(region, index) {\n                        var resolution = region.length() / self.TILE_LEN,\n                            w_scale = 1 / resolution,\n                            mode = self.model.get(\"mode\");\n                        $.when(\n                            track.data_manager.get_data(\n                                region,\n                                mode,\n                                resolution,\n                                {}\n                            )\n                        ).then(function(tile_data) {\n                            var canvas = self.canvas_manager.new_canvas();\n                            canvas.width = self.TILE_LEN;\n                            canvas.height = track.get_canvas_height(\n                                tile_data,\n                                mode,\n                                w_scale,\n                                canvas.width\n                            );\n                            track.draw_tile(\n                                tile_data,\n                                canvas.getContext(\"2d\"),\n                                mode,\n                                region,\n                                w_scale\n                            );\n                            $(tile_containers[index])\n                                .empty()\n                                .append(canvas);\n                        });\n                    });\n                });\n            }\n        });\n\n        /**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\n        var ToolInputValOrSweepView = Backbone.View.extend({\n            // Template for rendering sweep inputs:\n            number_input_template:\n                '<div class=\"form-row-input sweep\">' +\n                '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n                '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n                ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n                \"</div>\",\n\n            select_input_template:\n                '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n            initialize: function(options) {\n                this.$el = options.tool_row;\n                this.render();\n            },\n\n            render: function() {\n                var input = this.model,\n                    type = input.get(\"type\"),\n                    single_input_row = this.$el.find(\".form-row-input\"),\n                    sweep_inputs_row = null;\n\n                // Update tool inputs as single input changes.\n                single_input_row.find(\":input\").change(function() {\n                    input.set(\"value\", $(this).val());\n                });\n\n                // Add row for parameter sweep inputs.\n                if (input instanceof tools.IntegerToolParameter) {\n                    sweep_inputs_row = $(\n                        _.template(this.number_input_template)(\n                            this.model.toJSON()\n                        )\n                    );\n                } else if (input instanceof tools.SelectToolParameter) {\n                    var options = _.map(\n                            this.$el.find(\"select option\"),\n                            function(option) {\n                                return $(option).val();\n                            }\n                        ),\n                        options_text = options.join(\", \");\n                    sweep_inputs_row = $(\n                        _.template(this.select_input_template)({\n                            options: options_text\n                        })\n                    );\n                }\n                sweep_inputs_row.insertAfter(single_input_row);\n\n                // Add buttons for adding/removing parameter.\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                title: \"Add parameter to tree\",\n                                icon_class: \"plus-button\",\n                                on_click: function() {\n                                    input.set(\"in_ptree\", true);\n                                    single_input_row.hide();\n                                    sweep_inputs_row.show();\n                                    $(this).hide();\n                                    self.$el.find(\".icon-button.toggle\").show();\n                                }\n                            },\n                            {\n                                title: \"Remove parameter from tree\",\n                                icon_class: \"toggle\",\n                                on_click: function() {\n                                    // Remove parameter from tree params where name matches clicked paramter.\n                                    input.set(\"in_ptree\", false);\n                                    sweep_inputs_row.hide();\n                                    single_input_row.show();\n                                    $(this).hide();\n                                    self.$el\n                                        .find(\".icon-button.plus-button\")\n                                        .show();\n                                }\n                            }\n                        ],\n                        {}\n                    );\n                this.$el.prepend(menu.$el);\n\n                // Show/hide input rows and icons depending on whether parameter is in the tree.\n                if (input.get(\"in_ptree\")) {\n                    single_input_row.hide();\n                    self.$el.find(\".icon-button.plus-button\").hide();\n                } else {\n                    self.$el.find(\".icon-button.toggle\").hide();\n                    sweep_inputs_row.hide();\n                }\n\n                // Update input's min, max, number of samples as values change.\n                _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n                    sweep_inputs_row.find(\".\" + attr).change(function() {\n                        input.set(attr, parseFloat($(this).val()));\n                    });\n                });\n            }\n        });\n\n        var ToolParameterTreeDesignView = Backbone.View.extend({\n            className: \"tree-design\",\n\n            initialize: function(options) {\n                this.render();\n            },\n\n            render: function() {\n                // Start with tool form view.\n                var tool_form_view = new tools.ToolFormView({\n                    model: this.model.get(\"tool\")\n                });\n                tool_form_view.render();\n                this.$el.append(tool_form_view.$el);\n\n                // Set up views for each tool input.\n                var self = this,\n                    inputs = self.model.get(\"tool\").get(\"inputs\");\n                this.$el\n                    .find(\".form-row\")\n                    .not(\".form-actions\")\n                    .each(function(i) {\n                        var input_view = new ToolInputValOrSweepView({\n                            model: inputs.at(i),\n                            tool_row: $(this)\n                        });\n                    });\n            }\n        });\n\n        /**\n * Displays and updates parameter tree.\n */\n        var ToolParameterTreeView = Backbone.View.extend({\n            className: \"tool-parameter-tree\",\n\n            initialize: function(options) {\n                // When tree data changes, re-render.\n                this.model.on(\"change:tree_data\", this.render, this);\n            },\n\n            render: function() {\n                // Start fresh.\n                this.$el.children().remove();\n\n                var tree_params = this.model.get_tree_params();\n                if (!tree_params.length) {\n                    return;\n                }\n\n                // Set width, height based on params and samples.\n                this.width = 100 * (2 + tree_params.length);\n                this.height = 15 * this.model.get_num_leaves();\n\n                var self = this;\n\n                // Layout tree.\n                var cluster = d3.layout\n                    .cluster()\n                    .size([this.height, this.width - 160]);\n\n                var diagonal = d3.svg.diagonal().projection(function(d) {\n                    return [d.y, d.x];\n                });\n\n                // Layout nodes.\n                var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n                // Setup and add labels for tree levels.\n                var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n                _.each(tree_params, function(param, index) {\n                    var x = param_depths[index + 1],\n                        center_left = $(\"#center\").position().left;\n                    self.$el.append(\n                        $(\"<div>\")\n                            .addClass(\"label\")\n                            .text(param.get(\"label\"))\n                            .css(\"left\", x + center_left)\n                    );\n                });\n\n                // Set up vis element.\n                var vis = d3\n                    .select(this.$el[0])\n                    .append(\"svg\")\n                    .attr(\"width\", this.width)\n                    .attr(\"height\", this.height + 30)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(40, 20)\");\n\n                // Draw links.\n                var link = vis\n                    .selectAll(\"path.link\")\n                    .data(cluster.links(nodes))\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"d\", diagonal);\n\n                // Draw nodes.\n                var node = vis\n                    .selectAll(\"g.node\")\n                    .data(nodes)\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"class\", \"node\")\n                    .attr(\"transform\", function(d) {\n                        return \"translate(\" + d.y + \",\" + d.x + \")\";\n                    })\n                    .on(\"mouseover\", function(a_node) {\n                        var connected_node_ids = _.pluck(\n                            self.model.get_connected_nodes(a_node),\n                            \"id\"\n                        );\n                        // TODO: probably can use enter() to do this more easily.\n                        node\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    })\n                    .on(\"mouseout\", function() {\n                        node.style(\"fill\", \"#000\");\n                    });\n\n                node.append(\"circle\").attr(\"r\", 9);\n\n                node\n                    .append(\"text\")\n                    .attr(\"dx\", function(d) {\n                        return d.children ? -12 : 12;\n                    })\n                    .attr(\"dy\", 3)\n                    .attr(\"text-anchor\", function(d) {\n                        return d.children ? \"end\" : \"start\";\n                    })\n                    .text(function(d) {\n                        return d.name;\n                    });\n            }\n        });\n\n        /**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\n        var SweepsterVisualizationView = Backbone.View.extend({\n            className: \"Sweepster\",\n\n            helpText:\n                \"<div><h4>Getting Started</h4>\" +\n                \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n                \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n                \"<li>Run the tool with different settings by clicking on tree nodes\" +\n                \"</ol></div>\",\n\n            initialize: function(options) {\n                this.canvas_manager = new visualization.CanvasManager(\n                    this.$el.parents(\"body\")\n                );\n                this.tool_param_tree_view = new ToolParameterTreeView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n                this.track_collection_container = $(\"<table/>\").addClass(\n                    \"tracks\"\n                );\n\n                // Handle node clicks for tree data.\n                this.model\n                    .get(\"parameter_tree\")\n                    .on(\"change:tree_data\", this.handle_node_clicks, this);\n\n                // Each track must have a view so it has a canvas manager.\n                var self = this;\n                this.model.get(\"tracks\").each(function(track) {\n                    track.get(\"track\").view = self;\n                });\n\n                // Set block, reverse strand block colors; these colors will be used for all tracks.\n                this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        },\n                        {\n                            key: \"block_color\",\n                            label: \"Block color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand color\",\n                            type: \"color\"\n                        }\n                    ],\n                    {}\n                );\n            },\n\n            render: function() {\n                // Render tree design view in left panel.\n                var tree_design_view = new ToolParameterTreeDesignView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n\n                $(\"#left\").append(tree_design_view.$el);\n\n                // Render track collection container/view in right panel.\n                var self = this,\n                    regions = self.model.get(\"regions\"),\n                    tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n                regions.each(function(region) {\n                    tr.append($(\"<th>\").text(region.toString()));\n                });\n                tr\n                    .children()\n                    .first()\n                    .attr(\"colspan\", 2);\n\n                var tracks_div = $(\"<div>\").addClass(\"tiles\");\n                $(\"#right\").append(\n                    tracks_div.append(this.track_collection_container)\n                );\n\n                self.model.get(\"tracks\").each(function(track) {\n                    self.add_track(track);\n                });\n\n                // -- Render help and tool parameter tree in center panel. --\n\n                // Help includes text and a close button.\n                var help_div = $(this.helpText).addClass(\"help\"),\n                    close_button = mod_icon_btn.create_icon_buttons_menu([\n                        {\n                            title: \"Close\",\n                            icon_class: \"cross-circle\",\n                            on_click: function() {\n                                $(\".tooltip\").remove();\n                                help_div.remove();\n                            }\n                        }\n                    ]);\n\n                help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n                $(\"#center\").append(help_div);\n\n                // Parameter tree:\n                this.tool_param_tree_view.render();\n                $(\"#center\").append(this.tool_param_tree_view.$el);\n\n                // Set up handler for tree node clicks.\n                this.handle_node_clicks();\n\n                // Set up visualization menu.\n                var menu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        // Save.\n                        /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                        // Change track modes.\n                        {\n                            icon_class: \"chevron-expand\",\n                            title: \"Set display mode\"\n                        },\n                        // Close viz.\n                        {\n                            icon_class: \"cross-circle\",\n                            title: \"Close\",\n                            on_click: function() {\n                                window.location =\n                                    \"${h.url_for( controller='visualization', action='list' )}\";\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n\n                // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n                var modes = [\"Squish\", \"Pack\"],\n                    mode_mapping = {};\n                _.each(modes, function(mode) {\n                    mode_mapping[mode] = function() {\n                        self.model.set(\"default_mode\", mode);\n                        self.model.get(\"tracks\").each(function(track) {\n                            track.set(\"mode\", mode);\n                        });\n                    };\n                });\n\n                make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n                menu.$el.attr(\"style\", \"float: right\");\n                $(\"#right .unified-panel-header-inner\").append(menu.$el);\n            },\n\n            get_base_color: function(base) {\n                return (\n                    this.config.get_value(base.toLowerCase() + \"_color\") ||\n                    this.config.get_value(\"n_color\")\n                );\n            },\n\n            run_tool_on_dataset: function(settings) {\n                var tool = this.model.get(\"tool\"),\n                    tool_name = tool.get(\"name\"),\n                    dataset = this.model.get(\"dataset\");\n                tool.set_input_values(settings.get(\"values\"));\n                $.when(tool.rerun(dataset)).then(function(outputs) {\n                    // TODO.\n                });\n\n                show_modal(\n                    \"Running \" + tool_name + \" on complete dataset\",\n                    tool_name +\n                        \" is running on dataset '\" +\n                        dataset.get(\"name\") +\n                        \"'. Outputs are in the dataset's history.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Add track to model and view.\n     */\n            add_track: function(pm_track) {\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\");\n\n                // Add track to model.\n                self.model.add_track(pm_track);\n\n                var track_view = new SweepsterTrackView({\n                    model: pm_track,\n                    canvas_manager: self.canvas_manager\n                });\n                track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n                self.track_collection_container.append(track_view.$el);\n                track_view.$el.hover(\n                    function() {\n                        var settings_leaf = param_tree.get_leaf(\n                            pm_track.get(\"settings\").get(\"values\")\n                        );\n                        var connected_node_ids = _.pluck(\n                            param_tree.get_connected_nodes(settings_leaf),\n                            \"id\"\n                        );\n\n                        // TODO: can do faster with enter?\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    },\n                    function() {\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .style(\"fill\", \"#000\");\n                    }\n                );\n                return pm_track;\n            },\n\n            /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n            handle_node_clicks: function() {\n                // When node clicked in tree, run tool and add tracks to model.\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\"),\n                    regions = this.model.get(\"regions\"),\n                    node = d3\n                        .select(this.tool_param_tree_view.$el[0])\n                        .selectAll(\"g.node\");\n                node.on(\"click\", function(d, i) {\n                    // Get all settings corresponding to node.\n                    var tool = self.model.get(\"tool\"),\n                        dataset = self.model.get(\"dataset\"),\n                        all_settings = param_tree.get_node_settings(d),\n                        run_jobs_deferred = $.Deferred();\n\n                    // Do not allow 10+ jobs to be run.\n                    if (all_settings.length >= 10) {\n                        show_modal(\n                            \"Whoa there cowboy!\",\n                            \"You clicked on a node to try \" +\n                                self.model.get(\"tool\").get(\"name\") +\n                                \" with \" +\n                                all_settings.length +\n                                \" different combinations of settings. You can only run 10 jobs at a time.\",\n                            {\n                                Ok: function() {\n                                    hide_modal();\n                                    run_jobs_deferred.resolve(false);\n                                }\n                            }\n                        );\n                    } else {\n                        run_jobs_deferred.resolve(true);\n                    }\n\n                    // Take action when deferred resolves.\n                    $.when(run_jobs_deferred).then(function(run_jobs) {\n                        if (!run_jobs) {\n                            return;\n                        }\n\n                        // Create and add tracks for each settings group.\n                        var new_tracks = _.map(all_settings, function(\n                            settings\n                        ) {\n                            var pm_track = new SweepsterTrack({\n                                settings: settings,\n                                regions: regions,\n                                mode: self.model.get(\"default_mode\")\n                            });\n                            self.add_track(pm_track);\n                            return pm_track;\n                        });\n\n                        // For each track, run tool using track's settings and update track.\n                        _.each(new_tracks, function(pm_track, index) {\n                            setTimeout(function() {\n                                // Set inputs and run tool.\n                                tool.set_input_values(\n                                    pm_track.get(\"settings\").get(\"values\")\n                                );\n                                $.when(\n                                    tool.rerun(dataset, regions)\n                                ).then(function(output) {\n                                    // HACKish: output is an HDA with track config attribute. To create a track\n                                    // that works correctly with Backbone relational, it is necessary to\n                                    // use a modified version of the track config.\n                                    var dataset = output.first(),\n                                        track_config = dataset.get(\n                                            \"track_config\"\n                                        );\n                                    // Set dataset to be the tool's output.\n                                    track_config.dataset = dataset;\n                                    // Set tool to null so that it is not unpacked; unpacking it messes with\n                                    // the tool parameters and parameter tree.\n                                    track_config.tool = null;\n\n                                    track_config.prefs = self.config.to_key_value_dict();\n\n                                    // Create and add track for output dataset.\n                                    var track_obj = tracks.object_from_template(\n                                        track_config,\n                                        self,\n                                        null\n                                    );\n                                    track_obj.init_for_tool_data();\n\n                                    pm_track.set(\"track\", track_obj);\n                                });\n                            }, index * 10000);\n                        });\n                    });\n                });\n            }\n        });\n\n        return {\n            SweepsterVisualization: SweepsterVisualization,\n            SweepsterVisualizationView: SweepsterVisualizationView\n        };\n    }\n);\n"]}