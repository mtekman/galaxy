{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","visualization_mod","data_mod","mod_icon_btn","layoutMode","layout","node","maxDepth","vertSeparation","parent","dist","defaultDist","defaults","y0","maxTextWidth","depthSeparation","children","sumChildVertSeparation","child","x0","length","forEach","x","PhyloTree","leafHeight","hierarchy","sort","value","height","leafIndex","inputLeafHeight","separation","self","mode","layoutAngle","angle","links","nodes","tree","d","i","toString","call","_nodes","numLeaves","_d","window","depth","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","val","fieldName","attr","isNumeric","replace","n","isNaN","parseFloat","isFinite","max","alert","search","fontSize","Visualization","selectedNode","nodeAttrChangedTime","initialize","title","id","dataset_id","translate","options","this","set","Dataset","toggle","_children","toggleAll","getData","cleanTree","save","config","jQuery","_selected","ajax","dataType","root","attributes","success","show_message","$","url","type","data","JSON","stringify","res","hide_modal","PhylovizLinearView","vis","stdInit","model","on","updateAndRender","renderNodes","renderLinks","source","width","duration","link","target","calcalateLinePos","addTooltips","enter","selectAll","linkUpdate","pos0","pos1","pos2","insert","transition","select","exit","selectNode","remove","classed","__data__","annotation","trigger","name","margins","PhyloTreeLayout","bootstrap","Math","round","nodeEnter","append","projection","y","get","nodeUpdate","event","stopPropagation","altKey","MAX_DISPLACEMENT","style","resize","render","phyloTree","zoomFunc","behavior","scaleExtent","scale","nodeRadius","nodeSelectionView","NodeSelectionView","setTimeout","zoomAndPan","text","nodeExit","mainSVG","linearView","MIN_SCALE","MAX_SCALE","zoomParams","translateParams","zoom","scaleFactor","translationCoor","zoomStatement","navMenu","HeaderButtons","settingsMenu","translateStatement","boundingRect","treeIndex","tree_index","layoutOptions","packedJson","phylovizView","initRightHeaderBtns","rightMenu","icon_class","on_click","show","nexSelected","tooltip_config","placement","initNavBtns","split","$el","reloadViz","inputs","data_type","off","hide","empty","each","$input","create_icon_buttons_menu","key","updateUI","saveChanges","cancelChanges","valuesOfConcern","open","isEnabled","removeAttr","checked","el","resetToDefaults","apply","PhyloVizSearch","condition","hasIllegalJsonCharacters","searchTerm","UI","enableEdit","PhylovizView","updateNodes","fn","enable","toggleUI","is","Date","searchConditionVal","searchTree","attrVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define(\n    [\"libs/d3\", \"viz/visualization\", \"mvc/dataset/data\", \"mvc/ui/icon-button\"],\n    function(d3, visualization_mod, data_mod, mod_icon_btn) {\n        /**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\n        var UserMenuBase = Backbone.View.extend({\n            className: \"UserMenuBase\",\n\n            /**\n     * Check if an input value is a number and falls within max min.\n     */\n            isAcceptableValue: function($inputKey, min, max) {\n                //TODO: use better feedback than alert\n                var value = $inputKey.val(),\n                    fieldName =\n                        $inputKey.attr(\"displayLabel\") ||\n                        $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n                function isNumeric(n) {\n                    return !isNaN(parseFloat(n)) && isFinite(n);\n                }\n\n                if (!isNumeric(value)) {\n                    alert(fieldName + \" is not a number!\");\n                    return false;\n                }\n\n                if (value > max) {\n                    alert(fieldName + \" is too large.\");\n                    return false;\n                } else if (value < min) {\n                    alert(fieldName + \" is too small.\");\n                    return false;\n                }\n                return true;\n            },\n\n            /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n            hasIllegalJsonCharacters: function($inputKey) {\n                if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n                    alert(\n                        \"Named fields cannot contain these illegal characters: \" +\n                            \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n                    );\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        /**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\n        function PhyloTreeLayout() {\n            var self = this,\n                hierarchy = d3.layout\n                    .hierarchy()\n                    .sort(null)\n                    .value(null),\n                height = 360, // ! represents both the layout angle and the height of the layout, in px\n                layoutMode = \"Linear\",\n                leafHeight = 18, // height of each individual leaf node\n                depthSeparation = 200, // separation between nodes of different depth, in px\n                leafIndex = 0, // change to recurssive call\n                defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n                maxTextWidth = 50; // maximum length of the text labels\n\n            self.leafHeight = function(inputLeafHeight) {\n                if (typeof inputLeafHeight === \"undefined\") {\n                    return leafHeight;\n                } else {\n                    leafHeight = inputLeafHeight;\n                    return self;\n                }\n            };\n\n            self.layoutMode = function(mode) {\n                if (typeof mode === \"undefined\") {\n                    return layoutMode;\n                } else {\n                    layoutMode = mode;\n                    return self;\n                }\n            };\n\n            // changes the layout angle of the display, which is really changing the height\n            self.layoutAngle = function(angle) {\n                if (typeof angle === \"undefined\") {\n                    return height;\n                }\n                // to use default if the user puts in strange values\n                if (isNaN(angle) || angle < 0 || angle > 360) {\n                    return self;\n                } else {\n                    height = angle;\n                    return self;\n                }\n            };\n\n            self.separation = function(dist) {\n                // changes the dist between the nodes of different depth\n                if (typeof dist === \"undefined\") {\n                    return depthSeparation;\n                } else {\n                    depthSeparation = dist;\n                    return self;\n                }\n            };\n\n            self.links = function(nodes) {\n                // uses d3 native method to generate links. Done.\n                return d3.layout.tree().links(nodes);\n            };\n\n            // -- Custom method for laying out phylogeny tree in a linear fashion\n            self.nodes = function(d, i) {\n                //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n                if (toString.call(d) === \"[object Array]\") {\n                    // if d is an array, replate with the first object (newick, phyloxml)\n                    d = d[0];\n                }\n                // self is to find the depth of all the nodes, assumes root is passed in\n                var _nodes = hierarchy.call(self, d, i),\n                    nodes = [],\n                    maxDepth = 0,\n                    numLeaves = 0;\n                //console.debug( JSON.stringify( _nodes, null, 2 ) )\n                window._d = d;\n                window._nodes = _nodes;\n\n                //TODO: remove dbl-touch loop\n                // changing from hierarchy's custom format for data to usable format\n                _nodes.forEach(function(node) {\n                    maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n                    nodes.push(node);\n                });\n                // counting the number of leaf nodes and assigning max depth\n                //  to nodes that do not have children to flush all the leave nodes\n                nodes.forEach(function(node) {\n                    if (!node.children) {\n                        //&& !node._children\n                        numLeaves += 1;\n                        node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n                    }\n                });\n\n                leafHeight =\n                    layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n                leafIndex = 0;\n                layout(nodes[0], maxDepth, leafHeight, null);\n\n                return nodes;\n            };\n\n            /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n            function layout(node, maxDepth, vertSeparation, parent) {\n                var children = node.children,\n                    sumChildVertSeparation = 0;\n\n                // calculation of node's dist from parents, going down.\n                var dist = node.dist || defaultDist;\n                dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n                node.dist = dist;\n                if (parent !== null) {\n                    node.y0 = parent.y0 + dist * depthSeparation;\n                } else {\n                    //root node\n                    node.y0 = maxTextWidth;\n                }\n\n                // if a node have no children, we will treat it as a leaf and start laying it out first\n                if (!children) {\n                    node.x0 = leafIndex * vertSeparation;\n                    leafIndex += 1;\n                } else {\n                    // if it has children, we will visit all its children and calculate its position from its children\n                    children.forEach(function(child) {\n                        child.parent = node;\n                        sumChildVertSeparation += layout(\n                            child,\n                            maxDepth,\n                            vertSeparation,\n                            node\n                        );\n                    });\n                    node.x0 = sumChildVertSeparation / children.length;\n                }\n\n                // adding properties to the newly created node\n                node.x = node.x0;\n                node.y = node.y0;\n                return node.x0;\n            }\n            return self;\n        }\n\n        /**\n * -- PhyloTree Model --\n */\n        var PhyloTree = visualization_mod.Visualization.extend({\n            defaults: {\n                layout: \"Linear\",\n                separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n                leafHeight: 18,\n                type: \"phyloviz\", // visualization type\n                title: \"Title\",\n                scaleFactor: 1,\n                translate: [0, 0],\n                fontSize: 12, //fontSize of node label\n                selectedNode: null,\n                nodeAttrChangedTime: 0\n            },\n\n            initialize: function(options) {\n                this.set(\n                    \"dataset\",\n                    new data_mod.Dataset({\n                        id: options.dataset_id\n                    })\n                );\n            },\n\n            root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n            /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n            toggle: function(d) {\n                if (typeof d === \"undefined\") {\n                    return;\n                }\n                if (d.children) {\n                    d._children = d.children;\n                    d.children = null;\n                } else {\n                    d.children = d._children;\n                    d._children = null;\n                }\n            },\n\n            /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n            toggleAll: function(d) {\n                if (d.children && d.children.length !== 0) {\n                    d.children.forEach(this.toggleAll);\n                    toggle(d);\n                }\n            },\n\n            /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n            getData: function() {\n                return this.root;\n            },\n\n            /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n            save: function() {\n                var root = this.root;\n                cleanTree(root);\n                //this.set(\"root\", root);\n\n                function cleanTree(node) {\n                    // we need to remove parent to delete circular reference\n                    delete node.parent;\n\n                    // removing unnecessary attributes\n                    if (node._selected) {\n                        delete node._selected;\n                    }\n\n                    if (node.children) {\n                        node.children.forEach(cleanTree);\n                    }\n                    if (node._children) {\n                        node._children.forEach(cleanTree);\n                    }\n                }\n\n                var config = jQuery.extend(true, {}, this.attributes);\n                config.selectedNode = null;\n\n                show_message(\"Saving to Galaxy\", \"progress\");\n\n                return $.ajax({\n                    url: this.url(),\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        config: JSON.stringify(config),\n                        type: \"phyloviz\"\n                    },\n                    success: function(res) {\n                        hide_modal();\n                    }\n                });\n            }\n        });\n\n        // -- Views --\n        /**\n *  Stores the default variable for setting up the visualization\n */\n        var PhylovizLayoutBase = Backbone.View.extend({\n            defaults: {\n                nodeRadius: 4.5 // radius of each node in the diagram\n            },\n\n            /**\n     *  Common initialization in layouts\n     */\n            stdInit: function(options) {\n                var self = this;\n                self.model.on(\n                    \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n                    self.updateAndRender,\n                    self\n                );\n\n                self.vis = options.vis;\n                self.i = 0;\n                self.maxDepth = -1; // stores the max depth of the tree\n\n                self.width = options.width;\n                self.height = options.height;\n            },\n\n            /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n            updateAndRender: function(source) {\n                var vis = d3.select(\".vis\"),\n                    self = this;\n                source = source || self.model.root;\n\n                self.renderNodes(source);\n                self.renderLinks(source);\n                self.addTooltips();\n            },\n\n            /**\n     * Renders the links for the visualization.\n     */\n            renderLinks: function(source) {\n                var self = this;\n                var diagonal = self.diagonal;\n                var duration = self.duration;\n                var layoutMode = self.layoutMode;\n                var link = self.vis\n                    .selectAll(\"g.completeLink\")\n                    .data(self.tree.links(self.nodes), function(d) {\n                        return d.target.id;\n                    });\n\n                var calcalateLinePos = function(d) {\n                    // position of the source node <=> starting location of the line drawn\n                    d.pos0 = d.source.y0 + \" \" + d.source.x0;\n                    // position where the line makes a right angle bend\n                    d.pos1 = d.source.y0 + \" \" + d.target.x0;\n                    // point where the horizontal line becomes a dotted line\n                    d.pos2 = d.target.y0 + \" \" + d.target.x0;\n                };\n\n                var linkEnter = link\n                    .enter()\n                    .insert(\"svg:g\", \"g.node\")\n                    .attr(\"class\", \"completeLink\");\n\n                linkEnter\n                    .append(\"svg:path\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"d\", function(d) {\n                        calcalateLinePos(d);\n                        return \"M \" + d.pos0 + \" L \" + d.pos1;\n                    });\n\n                var linkUpdate = link.transition().duration(500);\n\n                linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n                    calcalateLinePos(d);\n                    return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n                });\n\n                var linkExit = link.exit().remove();\n            },\n\n            // User Interaction methods below\n\n            /**\n     *  Displays the information for editing\n     */\n            selectNode: function(node) {\n                var self = this;\n                d3\n                    .selectAll(\"g.node\")\n                    .classed(\"selectedHighlight\", function(d) {\n                        if (node.id === d.id) {\n                            if (node._selected) {\n                                // for de=selecting node.\n                                delete node._selected;\n                                return false;\n                            } else {\n                                node._selected = true;\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n\n                self.model.set(\"selectedNode\", node);\n                $(\"#phyloVizSelectedNodeName\").val(node.name);\n                $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n                $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n            },\n\n            /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n            addTooltips: function() {\n                $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n                $(\".node\")\n                    .attr(\"data-original-title\", function() {\n                        var d = this.__data__,\n                            annotation = d.annotation || \"None\";\n                        return d\n                            ? (d.name ? d.name + \"<br/>\" : \"\") +\n                                  \"Dist: \" +\n                                  d.dist +\n                                  \" <br/>Annotation1: \" +\n                                  annotation +\n                                  (d.bootstrap\n                                      ? \"<br/>Confidence level: \" +\n                                        Math.round(100 * d.bootstrap)\n                                      : \"\")\n                            : \"\";\n                    })\n                    .tooltip({ placement: \"top\", trigger: \"hover\" });\n            }\n        });\n\n        /**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\n        var PhylovizLinearView = PhylovizLayoutBase.extend({\n            initialize: function(options) {\n                // Default values of linear layout\n                var self = this;\n                self.margins = options.margins;\n                self.layoutMode = \"Linear\";\n\n                self.stdInit(options);\n\n                self.layout();\n                self.updateAndRender(self.model.root);\n            },\n\n            /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n            layout: function() {\n                var self = this;\n                self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n                self.diagonal = d3.svg.diagonal().projection(function(d) {\n                    return [d.y, d.x];\n                });\n            },\n\n            /**\n     * Renders the nodes base on Linear layout.\n     */\n            renderNodes: function(source) {\n                var self = this,\n                    fontSize = self.model.get(\"fontSize\") + \"px\";\n\n                // assigning properties from models\n                self.tree\n                    .separation(self.model.get(\"separation\"))\n                    .leafHeight(self.model.get(\"leafHeight\"));\n\n                var duration = 500,\n                    nodes = self.tree\n                        .separation(self.model.get(\"separation\"))\n                        .nodes(self.model.root);\n\n                var node = self.vis\n                    .selectAll(\"g.node\")\n                    .data(nodes, function(d) {\n                        return d.name + d.id || (d.id = ++self.i);\n                    });\n\n                // These variables has to be passed into update links which are in the base methods\n                self.nodes = nodes;\n                self.duration = duration;\n\n                // ------- D3 ENTRY --------\n                // Enter any new nodes at the parent's previous position.\n                var nodeEnter = node\n                    .enter()\n                    .append(\"svg:g\")\n                    .attr(\"class\", \"node\")\n                    .on(\"dblclick\", function() {\n                        d3.event.stopPropagation();\n                    })\n                    .on(\"click\", function(d) {\n                        if (d3.event.altKey) {\n                            self.selectNode(d); // display info if alt is pressed\n                        } else {\n                            if (d.children && d.children.length === 0) {\n                                return;\n                            } // there is no need to toggle leaves\n                            self.model.toggle(d); // contract/expand nodes at data level\n                            self.updateAndRender(d); // re-render the tree\n                        }\n                    });\n                //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n                if (toString.call(source) === \"[object Array]\") {\n                    // if d is an array, replate with the first object (newick, phyloxml)\n                    source = source[0];\n                }\n                nodeEnter.attr(\"transform\", function(d) {\n                    return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n                });\n\n                nodeEnter\n                    .append(\"svg:circle\")\n                    .attr(\"r\", 1e-6)\n                    .style(\"fill\", function(d) {\n                        return d._children ? \"lightsteelblue\" : \"#fff\";\n                    });\n\n                nodeEnter\n                    .append(\"svg:text\")\n                    .attr(\"class\", \"nodeLabel\")\n                    .attr(\"x\", function(d) {\n                        return d.children || d._children ? -10 : 10;\n                    })\n                    .attr(\"dy\", \".35em\")\n                    .attr(\"text-anchor\", function(d) {\n                        return d.children || d._children ? \"end\" : \"start\";\n                    })\n                    .style(\"fill-opacity\", 1e-6);\n\n                // ------- D3 TRANSITION --------\n                // Transition nodes to their new position.\n                var nodeUpdate = node.transition().duration(duration);\n\n                nodeUpdate.attr(\"transform\", function(d) {\n                    return \"translate(\" + d.y + \",\" + d.x + \")\";\n                });\n\n                nodeUpdate\n                    .select(\"circle\")\n                    .attr(\"r\", self.defaults.nodeRadius)\n                    .style(\"fill\", function(d) {\n                        return d._children ? \"lightsteelblue\" : \"#fff\";\n                    });\n\n                nodeUpdate\n                    .select(\"text\")\n                    .style(\"fill-opacity\", 1)\n                    .style(\"font-size\", fontSize)\n                    .text(function(d) {\n                        return d.name && d.name !== \"\"\n                            ? d.name\n                            : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n                    });\n\n                // ------- D3 EXIT --------\n                // Transition exiting nodes to the parent's new position.\n                var nodeExit = node\n                    .exit()\n                    .transition()\n                    .duration(duration)\n                    .remove();\n\n                nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n                nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n                // Stash the old positions for transition.\n                nodes.forEach(function(d) {\n                    d.x0 = d.x; // we need the x0, y0 for parents with children\n                    d.y0 = d.y;\n                });\n            }\n        });\n\n        var PhylovizView = Backbone.View.extend({\n            className: \"phyloviz\",\n\n            initialize: function(options) {\n                var self = this;\n                // -- Default values of the vis\n                self.MIN_SCALE = 0.05; //for zooming\n                self.MAX_SCALE = 5;\n                self.MAX_DISPLACEMENT = 500;\n                self.margins = [10, 60, 10, 80];\n\n                self.width = $(\"#PhyloViz\").width();\n                self.height = $(\"#PhyloViz\").height();\n                self.radius = self.width;\n                self.data = options.data;\n\n                // -- Events Phyloviz view responses to\n                $(window).resize(function() {\n                    self.width = $(\"#PhyloViz\").width();\n                    self.height = $(\"#PhyloViz\").height();\n                    self.render();\n                });\n\n                // -- Create phyloTree model\n                self.phyloTree = new PhyloTree(options.config);\n                self.phyloTree.root = self.data;\n\n                // -- Set up UI functions of main view\n                self.zoomFunc = d3.behavior\n                    .zoom()\n                    .scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n                self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n                self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n                // -- set up header buttons, search and settings menu\n                self.navMenu = new HeaderButtons(self);\n                self.settingsMenu = new SettingsMenu({\n                    phyloTree: self.phyloTree\n                });\n                self.nodeSelectionView = new NodeSelectionView({\n                    phyloTree: self.phyloTree\n                });\n                self.search = new PhyloVizSearch();\n\n                // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n                setTimeout(function() {\n                    self.zoomAndPan();\n                }, 1000);\n            },\n\n            render: function() {\n                // -- Creating helper function for vis. --\n                var self = this;\n                $(\"#PhyloViz\").empty();\n\n                // -- Layout viz. --\n                self.mainSVG = d3\n                    .select(\"#PhyloViz\")\n                    .append(\"svg:svg\")\n                    .attr(\"width\", self.width)\n                    .attr(\"height\", self.height)\n                    .attr(\"pointer-events\", \"all\")\n                    .call(\n                        self.zoomFunc.on(\"zoom\", function() {\n                            self.zoomAndPan();\n                        })\n                    );\n\n                self.boundingRect = self.mainSVG\n                    .append(\"svg:rect\")\n                    .attr(\"class\", \"boundingRect\")\n                    .attr(\"width\", self.width)\n                    .attr(\"height\", self.height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"fill\", \"white\");\n\n                self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n                self.layoutOptions = {\n                    model: self.phyloTree,\n                    width: self.width,\n                    height: self.height,\n                    vis: self.vis,\n                    margins: self.margins\n                };\n\n                // -- Creating Title\n                $(\"#title\").text(\n                    \"Phylogenetic Tree from \" +\n                        self.phyloTree.get(\"title\") +\n                        \":\"\n                );\n\n                // -- Create Linear view instance --\n                var linearView = new PhylovizLinearView(self.layoutOptions);\n            },\n\n            /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n            zoomAndPan: function(event) {\n                var zoomParams, translateParams;\n                if (typeof event !== \"undefined\") {\n                    zoomParams = event.zoom;\n                    translateParams = event.translate;\n                }\n\n                var self = this,\n                    scaleFactor = self.zoomFunc.scale(),\n                    translationCoor = self.zoomFunc.translate(),\n                    zoomStatement = \"\",\n                    translateStatement = \"\";\n\n                // Do manual scaling.\n                switch (zoomParams) {\n                    case \"reset\":\n                        scaleFactor = 1.0;\n                        translationCoor = [0, 0];\n                        break;\n                    case \"+\":\n                        scaleFactor *= 1.1;\n                        break;\n                    case \"-\":\n                        scaleFactor *= 0.9;\n                        break;\n                    default:\n                        if (typeof zoomParams === \"number\") {\n                            scaleFactor = zoomParams;\n                        } else if (d3.event !== null) {\n                            scaleFactor = d3.event.scale;\n                        }\n                }\n                if (\n                    scaleFactor < self.MIN_SCALE ||\n                    scaleFactor > self.MAX_SCALE\n                ) {\n                    return;\n                }\n                self.zoomFunc.scale(scaleFactor); //update scale Factor\n                zoomStatement =\n                    \"translate(\" +\n                    self.margins[3] +\n                    \",\" +\n                    self.margins[0] +\n                    \")\" +\n                    \" scale(\" +\n                    scaleFactor +\n                    \")\";\n\n                // Do manual translation.\n                if (d3.event !== null) {\n                    translateStatement =\n                        \"translate(\" + d3.event.translate + \")\";\n                } else {\n                    if (typeof translateParams !== \"undefined\") {\n                        var x = translateParams.split(\",\")[0];\n                        var y = translateParams.split(\",\")[1];\n                        if (!isNaN(x) && !isNaN(y)) {\n                            translationCoor = [\n                                translationCoor[0] + parseFloat(x),\n                                translationCoor[1] + parseFloat(y)\n                            ];\n                        }\n                    }\n                    self.zoomFunc.translate(translationCoor); // update zoomFunc\n                    translateStatement = \"translate(\" + translationCoor + \")\";\n                }\n\n                self.phyloTree.set(\"scaleFactor\", scaleFactor);\n                self.phyloTree.set(\"translate\", translationCoor);\n                //refers to the view that we are actually zooming\n                self.vis.attr(\"transform\", translateStatement + zoomStatement);\n            },\n\n            /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n            reloadViz: function() {\n                var self = this,\n                    treeIndex = $(\"#phylovizNexSelector :selected\").val();\n                $.getJSON(\n                    self.phyloTree.get(\"dataset\").url(),\n                    {\n                        tree_index: treeIndex,\n                        data_type: \"raw_data\"\n                    },\n                    function(packedJson) {\n                        self.data = packedJson.data;\n                        self.config = packedJson;\n                        self.render();\n                    }\n                );\n            }\n        });\n\n        var HeaderButtons = Backbone.View.extend({\n            initialize: function(phylovizView) {\n                var self = this;\n                self.phylovizView = phylovizView;\n\n                // Clean up code - if the class initialized more than once\n                $(\"#panelHeaderRightBtns\").empty();\n                $(\"#phyloVizNavBtns\").empty();\n                $(\"#phylovizNexSelector\").off();\n\n                self.initNavBtns();\n                self.initRightHeaderBtns();\n\n                // Initial a tree selector in the case of nexus\n                $(\"#phylovizNexSelector\")\n                    .off()\n                    .on(\"change\", function() {\n                        self.phylovizView.reloadViz();\n                    });\n            },\n\n            initRightHeaderBtns: function() {\n                var self = this;\n\n                var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        {\n                            icon_class: \"gear\",\n                            title: \"PhyloViz Settings\",\n                            on_click: function() {\n                                $(\"#SettingsMenu\").show();\n                                self.settingsMenu.updateUI();\n                            }\n                        },\n                        {\n                            icon_class: \"disk\",\n                            title: \"Save visualization\",\n                            on_click: function() {\n                                var nexSelected = $(\n                                    \"#phylovizNexSelector option:selected\"\n                                ).text();\n                                if (nexSelected) {\n                                    self.phylovizView.phyloTree.set(\n                                        \"title\",\n                                        nexSelected\n                                    );\n                                }\n                                self.phylovizView.phyloTree.save();\n                            }\n                        },\n                        {\n                            icon_class: \"chevron-expand\",\n                            title: \"Search / Edit Nodes\",\n                            on_click: function() {\n                                $(\"#nodeSelectionView\").show();\n                            }\n                        },\n                        {\n                            icon_class: \"information\",\n                            title: \"Phyloviz Help\",\n                            on_click: function() {\n                                window.open(\n                                    \"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\"\n                                );\n                                // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n                $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n            },\n\n            initNavBtns: function() {\n                var self = this,\n                    navMenu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                icon_class: \"zoom-in\",\n                                title: \"Zoom in\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                                }\n                            },\n                            {\n                                icon_class: \"zoom-out\",\n                                title: \"Zoom out\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                                }\n                            },\n                            {\n                                icon_class: \"arrow-circle\",\n                                title: \"Reset Zoom/Pan\",\n                                on_click: function() {\n                                    self.phylovizView.zoomAndPan({\n                                        zoom: \"reset\"\n                                    });\n                                }\n                            }\n                        ],\n                        {\n                            tooltip_config: { placement: \"bottom\" }\n                        }\n                    );\n                $(\"#phyloVizNavBtns\").append(navMenu.$el);\n            }\n        });\n\n        var SettingsMenu = UserMenuBase.extend({\n            className: \"Settings\",\n\n            initialize: function(options) {\n                // settings needs to directly interact with the phyloviz model so it will get access to it.\n                var self = this;\n                self.phyloTree = options.phyloTree;\n                self.el = $(\"#SettingsMenu\");\n                self.inputs = {\n                    separation: $(\"#phyloVizTreeSeparation\"),\n                    leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n                    fontSize: $(\"#phyloVizTreeFontSize\")\n                };\n\n                //init all buttons of settings\n                $(\"#settingsCloseBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.el.hide();\n                    });\n                $(\"#phylovizResetSettingsBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.resetToDefaults();\n                    });\n                $(\"#phylovizApplySettingsBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.apply();\n                    });\n            },\n\n            /**\n     * Applying user values to phylotree model.\n     */\n            apply: function() {\n                var self = this;\n                if (\n                    !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n                    !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n                    !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n                ) {\n                    return;\n                }\n                $.each(self.inputs, function(key, $input) {\n                    self.phyloTree.set(key, $input.val());\n                });\n            },\n            /**\n     * Called to update the values input to that stored in the model\n     */\n            updateUI: function() {\n                var self = this;\n                $.each(self.inputs, function(key, $input) {\n                    $input.val(self.phyloTree.get(key));\n                });\n            },\n            /**\n     * Resets the value of the phyloTree model to its default\n     */\n            resetToDefaults: function() {\n                $(\".tooltip\").remove(); // just in case the tool tip was not removed\n                var self = this;\n                $.each(self.phyloTree.defaults, function(key, value) {\n                    self.phyloTree.set(key, value);\n                });\n                self.updateUI();\n            },\n\n            render: function() {}\n        });\n\n        /**\n * View for inspecting node properties and editing them\n */\n        var NodeSelectionView = UserMenuBase.extend({\n            className: \"Settings\",\n\n            initialize: function(options) {\n                var self = this;\n                self.el = $(\"#nodeSelectionView\");\n                self.phyloTree = options.phyloTree;\n\n                self.UI = {\n                    enableEdit: $(\"#phylovizEditNodesCheck\"),\n                    saveChanges: $(\"#phylovizNodeSaveChanges\"),\n                    cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n                    name: $(\"#phyloVizSelectedNodeName\"),\n                    dist: $(\"#phyloVizSelectedNodeDist\"),\n                    annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n                };\n\n                // temporarily stores the values in case user change their mind\n                self.valuesOfConcern = {\n                    name: null,\n                    dist: null,\n                    annotation: null\n                };\n\n                //init UI buttons\n                $(\"#nodeSelCloseBtn\")\n                    .off()\n                    .on(\"click\", function() {\n                        self.el.hide();\n                    });\n                self.UI.saveChanges.off().on(\"click\", function() {\n                    self.updateNodes();\n                });\n                self.UI.cancelChanges.off().on(\"click\", function() {\n                    self.cancelChanges();\n                });\n\n                (function($) {\n                    // extending jquery fxn for enabling and disabling nodes.\n                    $.fn.enable = function(isEnabled) {\n                        return $(this).each(function() {\n                            if (isEnabled) {\n                                $(this).removeAttr(\"disabled\");\n                            } else {\n                                $(this).attr(\"disabled\", \"disabled\");\n                            }\n                        });\n                    };\n                })(jQuery);\n\n                self.UI.enableEdit.off().on(\"click\", function() {\n                    self.toggleUI();\n                });\n            },\n\n            /**\n     * For turning on and off the child elements\n     */\n            toggleUI: function() {\n                var self = this,\n                    checked = self.UI.enableEdit.is(\":checked\");\n\n                if (!checked) {\n                    self.cancelChanges();\n                }\n\n                $.each(self.valuesOfConcern, function(key, value) {\n                    self.UI[key].enable(checked);\n                });\n                if (checked) {\n                    self.UI.saveChanges.show();\n                    self.UI.cancelChanges.show();\n                } else {\n                    self.UI.saveChanges.hide();\n                    self.UI.cancelChanges.hide();\n                }\n            },\n\n            /**\n     * Reverting to previous values in case user change their minds\n     */\n            cancelChanges: function() {\n                var self = this,\n                    node = self.phyloTree.get(\"selectedNode\");\n                if (node) {\n                    $.each(self.valuesOfConcern, function(key, value) {\n                        self.UI[key].val(node[key]);\n                    });\n                }\n            },\n\n            /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n            updateNodes: function() {\n                var self = this,\n                    node = self.phyloTree.get(\"selectedNode\");\n                if (node) {\n                    if (\n                        !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                        self.hasIllegalJsonCharacters(self.UI.name) ||\n                        self.hasIllegalJsonCharacters(self.UI.annotation)\n                    ) {\n                        return;\n                    }\n                    $.each(self.valuesOfConcern, function(key, value) {\n                        node[key] = self.UI[key].val();\n                    });\n                    self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n                } else {\n                    alert(\"No node selected\");\n                }\n            }\n        });\n\n        /**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\n        var PhyloVizSearch = UserMenuBase.extend({\n            initialize: function() {\n                var self = this;\n\n                $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n                    var searchTerm = $(\"#phyloVizSearchTerm\"),\n                        searchConditionVal = $(\"#phyloVizSearchCondition\")\n                            .val()\n                            .split(\"-\"),\n                        attr = searchConditionVal[0],\n                        condition = searchConditionVal[1];\n                    self.hasIllegalJsonCharacters(searchTerm);\n\n                    if (attr === \"dist\") {\n                        self.isAcceptableValue(searchTerm, 0, 1);\n                    }\n                    self.searchTree(attr, condition, searchTerm.val());\n                });\n            },\n\n            /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n            searchTree: function(attr, condition, val) {\n                d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n                    var attrVal = d[attr];\n                    if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                        if (attr === \"dist\") {\n                            switch (condition) {\n                                case \"greaterEqual\":\n                                    return attrVal >= +val;\n                                case \"lesserEqual\":\n                                    return attrVal <= +val;\n                                default:\n                                    return;\n                            }\n                        } else if (attr === \"name\" || attr === \"annotation\") {\n                            return (\n                                attrVal\n                                    .toLowerCase()\n                                    .indexOf(val.toLowerCase()) !== -1\n                            );\n                        }\n                    }\n                });\n            }\n        });\n\n        return {\n            PhylovizView: PhylovizView\n        };\n    }\n);\n"]}