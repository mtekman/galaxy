{"version":3,"sources":["layout/scratchbook.js"],"names":["define","Frames","Backbone","View","extend","initialize","options","this","self","visible","frames","$el","id","setElement","icon","buttonActive","_l","tooltip","active","onclick","set","toggle","note_cls","hide","onbeforeunload","length","collection","add","show_note","e","on","buttonLoad","history_cache","current_dataset","name","Galaxy","dataset_ids","currHistoryPanel","each","history_id","historyId","model","get","_findDataset","history_details","dataset","dataset_list","pos","push","offset","_loadDatasetOffset","new_dataset_id","_loadDataset","new_dataset","frame","trigger","disabled","config","_","menu","dataset_id","Dataset","DATA","createTabularDatasetChunkedView","TabularDataset","embedded","viz","title","callback","type","content","parent_elt","$","when","fetch","view_config","container","dbkey","indexOf","data_type","latest_revision","hda_ldda","is_tabular","view","create_visualization","url","toJSON","height","window","parent","location","addTrackster","viz_id","require","visualization","trackster","Visualization","then","ui","TracksterUI","root","frame_config","stand_alone","drawables","d","viewport","bookmarks","target","open","noscratchbook","$galaxy_main","document","find","attr"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine([\"mvc/ui/ui-frames\"], function(Frames) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            options = options || {};\n            this.frames = new Frames.View({ visible: false });\n            this.setElement(this.frames.$el);\n            this.buttonActive = options.collection.add({\n                id: \"enable-scratchbook\",\n                icon: \"fa-th\",\n                tooltip: _l(\"Enable/Disable Scratchbook\"),\n                onclick: function() {\n                    self.active = !self.active;\n                    self.buttonActive.set({\n                        toggle: self.active,\n                        show_note: self.active,\n                        note_cls: self.active && \"fa fa-check\"\n                    });\n                    !self.active && self.frames.hide();\n                },\n                onbeforeunload: function() {\n                    if (self.frames.length() > 0) {\n                        return (\n                            \"You opened \" +\n                            self.frames.length() +\n                            \" frame(s) which will be lost.\"\n                        );\n                    }\n                }\n            });\n            this.buttonLoad = options.collection.add({\n                id: \"show-scratchbook\",\n                icon: \"fa-eye\",\n                tooltip: _l(\"Show/Hide Scratchbook\"),\n                show_note: true,\n                visible: false,\n                onclick: function(e) {\n                    self.frames.visible\n                        ? self.frames.hide()\n                        : self.frames.show();\n                }\n            });\n            this.frames\n                .on(\"add remove\", function() {\n                    this.visible && this.length() == 0 && this.hide();\n                    self.buttonLoad.set({\n                        note: this.length(),\n                        visible: this.length() > 0\n                    });\n                })\n                .on(\"show hide \", function() {\n                    self.buttonLoad.set({\n                        toggle: this.visible,\n                        icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                    });\n                });\n            this.history_cache = {};\n        },\n\n        /** Add a dataset to the frames */\n        addDataset: function(dataset_id) {\n            var self = this;\n            var current_dataset = null;\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                var history_id = Galaxy.currHistoryPanel.collection.historyId;\n                this.history_cache[history_id] = {\n                    name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                    dataset_ids: []\n                };\n                Galaxy.currHistoryPanel.collection.each(function(model) {\n                    !model.get(\"deleted\") &&\n                        model.get(\"visible\") &&\n                        self.history_cache[history_id].dataset_ids.push(\n                            model.get(\"id\")\n                        );\n                });\n            }\n            var _findDataset = function(dataset, offset) {\n                if (dataset) {\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details && history_details.dataset_ids) {\n                        var dataset_list = history_details.dataset_ids;\n                        var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                        if (\n                            pos !== -1 &&\n                            pos + offset >= 0 &&\n                            pos + offset < dataset_list.length\n                        ) {\n                            return dataset_list[pos + offset];\n                        }\n                    }\n                }\n            };\n            var _loadDatasetOffset = function(dataset, offset, frame) {\n                var new_dataset_id = _findDataset(dataset, offset);\n                if (new_dataset_id) {\n                    self._loadDataset(new_dataset_id, function(\n                        new_dataset,\n                        config\n                    ) {\n                        current_dataset = new_dataset;\n                        frame.model.set(config);\n                    });\n                } else {\n                    frame.model.trigger(\"change\");\n                }\n            };\n            this._loadDataset(dataset_id, function(dataset, config) {\n                current_dataset = dataset;\n                self.add(\n                    _.extend(\n                        {\n                            menu: [\n                                {\n                                    icon: \"fa fa-chevron-circle-left\",\n                                    tooltip: \"Previous in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(\n                                            current_dataset,\n                                            -1,\n                                            frame\n                                        );\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(\n                                            current_dataset,\n                                            -1\n                                        );\n                                    }\n                                },\n                                {\n                                    icon: \"fa fa-chevron-circle-right\",\n                                    tooltip: \"Next in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(\n                                            current_dataset,\n                                            1,\n                                            frame\n                                        );\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(\n                                            current_dataset,\n                                            1\n                                        );\n                                    }\n                                }\n                            ]\n                        },\n                        config\n                    )\n                );\n            });\n        },\n\n        _loadDataset: function(dataset_id, callback) {\n            var self = this;\n            require([\"mvc/dataset/data\"], function(DATA) {\n                var dataset = new DATA.Dataset({ id: dataset_id });\n                $.when(dataset.fetch()).then(function() {\n                    var is_tabular = _.find([\"tabular\", \"interval\"], function(\n                        data_type\n                    ) {\n                        return (\n                            dataset.get(\"data_type\").indexOf(data_type) !== -1\n                        );\n                    });\n                    var title = dataset.get(\"name\");\n                    var history_details =\n                        self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details) {\n                        title = history_details.name + \": \" + title;\n                    }\n                    callback(\n                        dataset,\n                        is_tabular\n                            ? {\n                                  title: title,\n                                  url: null,\n                                  content: DATA.createTabularDatasetChunkedView(\n                                      {\n                                          model: new DATA.TabularDataset(\n                                              dataset.toJSON()\n                                          ),\n                                          embedded: true,\n                                          height: \"100%\"\n                                      }\n                                  ).$el\n                              }\n                            : {\n                                  title: title,\n                                  url:\n                                      Galaxy.root +\n                                      \"datasets/\" +\n                                      dataset_id +\n                                      \"/display/?preview=True\",\n                                  content: null\n                              }\n                    );\n                });\n            });\n        },\n\n        /** Add a trackster visualization to the frames. */\n        addTrackster: function(viz_id) {\n            var self = this;\n            require([\"viz/visualization\", \"viz/trackster\"], function(\n                visualization,\n                trackster\n            ) {\n                var viz = new visualization.Visualization({ id: viz_id });\n                $.when(viz.fetch()).then(function() {\n                    var ui = new trackster.TracksterUI(Galaxy.root);\n\n                    // Construct frame config based on dataset's type.\n                    var frame_config = {\n                        title: viz.get(\"name\"),\n                        type: \"other\",\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                    container: parent_elt,\n                                    name: viz.get(\"title\"),\n                                    id: viz.id,\n                                    // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                    dbkey: viz.get(\"dbkey\"),\n                                    stand_alone: false\n                                },\n                                latest_revision = viz.get(\"latest_revision\"),\n                                drawables =\n                                    latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(\n                                view_config,\n                                latest_revision.config.viewport,\n                                latest_revision.config.view.drawables,\n                                latest_revision.config.bookmarks,\n                                false\n                            );\n                        }\n                    };\n                    self.add(frame_config);\n                });\n            });\n        },\n\n        /** Add and display a new frame/window based on options. */\n        add: function(options) {\n            if (options.target == \"_blank\") {\n                window.open(options.url);\n            } else if (\n                options.target == \"_top\" ||\n                options.target == \"_parent\" ||\n                options.target == \"_self\"\n            ) {\n                window.location = options.url;\n            } else if (!this.active || options.noscratchbook) {\n                var $galaxy_main = $(window.parent.document).find(\n                    \"#galaxy_main\"\n                );\n                if (\n                    options.target == \"galaxy_main\" ||\n                    options.target == \"center\"\n                ) {\n                    if ($galaxy_main.length === 0) {\n                        window.location =\n                            options.url +\n                            (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") +\n                            \"use_panels=True\";\n                    } else {\n                        $galaxy_main.attr(\"src\", options.url);\n                    }\n                } else window.location = options.url;\n            } else {\n                this.frames.add(options);\n            }\n        }\n    });\n});\n"]}