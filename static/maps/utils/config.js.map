{"version":3,"sources":["utils/config.js"],"names":["define","_","config_mod","ConfigSetting","Backbone","Model","extend","initialize","key","get","this","set","label","find","type","default_value","mode","hidden","s","defaults","set_value","options","undefined","value","parseInt","util_mod","get_random_color","to_key_value_dict","rval","setting","ConfigSettingCollection","Collection","model","each","set_default_value","from_models_and_saved_values","saved_values","models","map","m","row","View","$","$el","select","val","param","index","tip","appendTo","addClass","attr","id","left","append","click","e","stopPropagation","document","unbind","new_color_icon","option","text","tip_arrow","farb_obj","width","callback","color","container_div","removeClass","siblings","css","position","top","height","show","update_from_form","bind","which","hide","cancel_fn","children","length","tooltip","title","ok_fn","tip_inner","farbtastic","input","self","is","fixed_farb_obj","setColor","ConfigSettingCollectionView","help","render_in_modal","Galaxy","modal","window","keyCode","render","body","buttons","Cancel","OK","collection"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["define([\"libs/underscore\", \"viz/trackster/util\", \"utils/config\"], function(\n    _,\n    util_mod,\n    config_mod\n) {\n    /**\n * A configuration setting. Currently key is used as id.\n */\n    var ConfigSetting = Backbone.Model.extend({\n        initialize: function(options) {\n            // Use key as id for now.\n            var key = this.get(\"key\");\n            this.set(\"id\", key);\n\n            // Set defaults based on key.\n            var defaults = _.find(\n                [\n                    {\n                        key: \"name\",\n                        label: \"Name\",\n                        type: \"text\",\n                        default_value: \"\"\n                    },\n                    {\n                        key: \"color\",\n                        label: \"Color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 32,\n                        hidden: true\n                    },\n                    {\n                        key: \"pos_color\",\n                        label: \"Positive Color\",\n                        type: \"color\",\n                        default_value: \"#FF8C00\"\n                    },\n                    {\n                        key: \"neg_color\",\n                        label: \"Negative Color\",\n                        type: \"color\",\n                        default_value: \"#4169E1\"\n                    },\n                    {\n                        key: \"block_color\",\n                        label: \"Block color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"label_color\",\n                        label: \"Label color\",\n                        type: \"color\",\n                        default_value: \"black\"\n                    },\n                    {\n                        key: \"show_insertions\",\n                        label: \"Show insertions\",\n                        type: \"bool\",\n                        default_value: false\n                    },\n                    {\n                        key: \"show_counts\",\n                        label: \"Show summary counts\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"reverse_strand_color\",\n                        label: \"Antisense strand color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"show_differences\",\n                        label: \"Show differences only\",\n                        type: \"bool\",\n                        default_value: true\n                    }\n                ],\n                function(s) {\n                    return s.key === key;\n                }\n            );\n            if (defaults) {\n                this.set(_.extend({}, defaults, options));\n            }\n\n            if (\n                this.get(\"value\") === undefined &&\n                this.get(\"default_value\") !== undefined\n            ) {\n                // Use default to set value (if present).\n                this.set_value(this.get(\"default_value\"));\n\n                // If no default value for color config, set random color.\n                if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                    // For color setting, set random color.\n                    this.set(\"value\", util_mod.get_random_color());\n                }\n            }\n        },\n\n        /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n        set_value: function(value, options) {\n            var type = this.get(\"type\");\n\n            if (type === \"float\") {\n                value = parseFloat(value);\n            } else if (type === \"int\") {\n                value = parseInt(value, 10);\n            }\n            // TODO: handle casting from string to bool?\n\n            this.set({ value: value }, options);\n        }\n    });\n\n    /**\n * Collection of config settings.\n */\n    var ConfigSettingCollection = Backbone.Collection.extend(\n        {\n            model: ConfigSetting,\n\n            /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n            to_key_value_dict: function() {\n                var rval = {};\n                this.each(function(setting) {\n                    rval[setting.get(\"key\")] = setting.get(\"value\");\n                });\n\n                return rval;\n            },\n\n            /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n            get_value: function(key) {\n                var s = this.get(key);\n                if (s) {\n                    return s.get(\"value\");\n                }\n\n                return undefined;\n            },\n\n            /**\n     * Set value for a setting.\n     */\n            set_value: function(key, value, options) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set_value(value, options);\n                }\n\n                return undefined;\n            },\n\n            /**\n      * Set default value for a setting.\n      */\n            set_default_value: function(key, default_value) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set(\"default_value\", default_value);\n                }\n\n                return undefined;\n            }\n        },\n        {\n            /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n            from_models_and_saved_values: function(models, saved_values) {\n                // If there are saved values, copy models and update with saved values.\n                if (saved_values) {\n                    models = _.map(models, function(m) {\n                        return _.extend({}, m, { value: saved_values[m.key] });\n                    });\n                }\n\n                return new ConfigSettingCollection(models);\n            }\n        }\n    );\n\n    /**\n * Viewer for config settings collection.\n */\n    var ConfigSettingCollectionView = Backbone.View.extend({\n        className: \"config-settings-view\",\n\n        /**\n     * Renders form for editing configuration settings.\n     */\n        render: function() {\n            var container = this.$el;\n\n            this.collection.each(function(param, index) {\n                // Hidden params have no representation in the form\n                if (param.get(\"hidden\")) {\n                    return;\n                }\n\n                // Build row for param.\n                var id = \"param_\" + index,\n                    type = param.get(\"type\"),\n                    value = param.get(\"value\");\n                var row = $(\"<div class='form-row' />\").appendTo(container);\n                row.append(\n                    $(\"<label />\")\n                        .attr(\"for\", id)\n                        .text(param.get(\"label\") + \":\")\n                );\n                // Draw parameter as checkbox\n                if (type === \"bool\") {\n                    row.append(\n                        $('<input type=\"checkbox\" />')\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .attr(\"checked\", value)\n                    );\n                } else if (type === \"text\") {\n                    // Draw parameter as textbox\n                    row.append(\n                        $('<input type=\"text\"/>')\n                            .attr(\"id\", id)\n                            .val(value)\n                            .click(function() {\n                                $(this).select();\n                            })\n                    );\n                } else if (type === \"select\") {\n                    // Draw parameter as select area\n                    var select = $(\"<select />\").attr(\"id\", id);\n                    _.each(param.get(\"options\"), function(option) {\n                        $(\"<option/>\")\n                            .text(option.label)\n                            .attr(\"value\", option.value)\n                            .appendTo(select);\n                    });\n                    select.val(value);\n                    row.append(select);\n                } else if (type === \"color\") {\n                    // Draw parameter as color picker\n                    var container_div = $(\"<div/>\").appendTo(row),\n                        input = $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                            .css(\"float\", \"left\")\n                            .appendTo(container_div)\n                            .click(function(e) {\n                                // Hide other pickers.\n                                $(\".tooltip\").removeClass(\"in\");\n\n                                // Show input's color picker.\n                                var tip = $(this)\n                                    .siblings(\".tooltip\")\n                                    .addClass(\"in\");\n                                tip\n                                    .css({\n                                        // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                        // top: $(this).position().top + $(this.height)\n                                        left:\n                                            $(this).position().left +\n                                            $(this).width() +\n                                            5,\n                                        top:\n                                            $(this).position().top -\n                                            $(tip).height() / 2 +\n                                            $(this).height() / 2\n                                    })\n                                    .show();\n\n                                // Click management:\n\n                                // Keep showing tip if clicking in tip.\n                                tip.click(function(e) {\n                                    e.stopPropagation();\n                                });\n\n                                // Hide tip if clicking outside of tip.\n                                $(document).bind(\n                                    \"click.color-picker\",\n                                    function() {\n                                        tip.hide();\n                                        $(document).unbind(\n                                            \"click.color-picker\"\n                                        );\n                                    }\n                                );\n\n                                // No propagation to avoid triggering document click (and tip hiding) above.\n                                e.stopPropagation();\n                            }),\n                        // Icon for setting a new random color; behavior set below.\n                        new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                            .addClass(\"icon-button arrow-circle\")\n                            .appendTo(container_div)\n                            .attr(\"title\", \"Set new random color\")\n                            .tooltip(),\n                        // Color picker in tool tip style.\n                        tip = $(\n                            \"<div class='tooltip right' style='position: absolute;' />\"\n                        )\n                            .appendTo(container_div)\n                            .hide(),\n                        // Inner div for padding purposes\n                        tip_inner = $(\n                            \"<div class='tooltip-inner' style='text-align: inherit'></div>\"\n                        ).appendTo(tip),\n                        tip_arrow = $(\n                            \"<div class='tooltip-arrow'></div>\"\n                        ).appendTo(tip),\n                        farb_obj = $.farbtastic(tip_inner, {\n                            width: 100,\n                            height: 100,\n                            callback: input,\n                            color: value\n                        });\n\n                    // Clear floating.\n                    container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                    // Use function to fix farb_obj value.\n                    (function(fixed_farb_obj) {\n                        new_color_icon.click(function() {\n                            fixed_farb_obj.setColor(\n                                util_mod.get_random_color()\n                            );\n                        });\n                    })(farb_obj);\n                } else {\n                    row.append(\n                        $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                    );\n                }\n                // Help text\n                if (param.help) {\n                    row.append($(\"<div class='help'/>\").text(param.help));\n                }\n            });\n\n            return this;\n        },\n\n        /**\n     * Render view in modal.\n     */\n        render_in_modal: function(title) {\n            // Set up handlers for cancel, ok button and for handling esc key.\n            var self = this,\n                cancel_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                },\n                ok_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                    self.update_from_form();\n                },\n                check_enter_esc = function(e) {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n            // Set keypress handler.\n            $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n            // Show modal.\n            if (this.$el.children().length === 0) {\n                this.render();\n            }\n            Galaxy.modal.show({\n                title: title || \"Configure\",\n                body: this.$el,\n                buttons: {\n                    Cancel: cancel_fn,\n                    OK: ok_fn\n                }\n            });\n        },\n\n        /**\n     * Update settings with new values entered via form.\n     */\n        update_from_form: function() {\n            var self = this;\n            this.collection.each(function(setting, index) {\n                if (!setting.get(\"hidden\")) {\n                    // Set value from view.\n                    var id = \"param_\" + index;\n                    var value = self.$el.find(\"#\" + id).val();\n                    if (setting.get(\"type\") === \"bool\") {\n                        value = self.$el.find(\"#\" + id).is(\":checked\");\n                    }\n                    setting.set_value(value);\n                }\n            });\n        }\n    });\n\n    return {\n        ConfigSetting: ConfigSetting,\n        ConfigSettingCollection: ConfigSettingCollection,\n        ConfigSettingCollectionView: ConfigSettingCollectionView\n    };\n});\n"]}