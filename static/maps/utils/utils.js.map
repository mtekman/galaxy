{"version":3,"sources":["utils/utils.js"],"names":["define","_l","deepeach","dict","callback","_","isObject","d","new_dict","i","response","console","contentType","type","options","success","fail","url","response_text","responseText","parseJSON","$","isEmptyObject","ajaxConfig","data","param","always","dataType","JSON","stringify","ajax","done","cssGetAttribute","name","replace","css","jQuery","e","debug","cssLoadFile","error","status","complete","roundToDecimalPlaces","number","numPlaces","unit","size","placesMultiplier","Math","round","kb","rounded","mb","normal_font","gb","tb","length","Galaxy","root","appendTo","classname","el","value","remove","get","top","__utils__get__","cache_key","cache","window","request","merge","bytesToString","numberPlaces","defaults","optionsDefault","iframe","src","__utils__uid__","hours","getHours","minutes","getDate","appendScriptStyle","script","decodeURIComponent","location","uid","document","title","time","getMinutes","sanitize","textify","isEmpty","content","text","html","isArray","lst","toString","substr","pos","undefined","indexOf","isJSON","test","clone","obj","parse","linkify","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","getQueryString","styles","key","search","RegExp","encodeURIComponent","setWindowTitle","config","brand"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine([\"utils/localization\"], function(_l) {\n    /** Builds a basic iframe */\n    function iframe(src) {\n        return (\n            '<iframe src=\"' +\n            src +\n            '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>'\n        );\n    }\n\n    /** Traverse through json */\n    function deepeach(dict, callback) {\n        for (var i in dict) {\n            var d = dict[i];\n            if (_.isObject(d)) {\n                var new_dict = callback(d);\n                new_dict && (dict[i] = new_dict);\n                deepeach(d, callback);\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify(inputText) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(\n            replacePattern1,\n            '<a href=\"$1\" target=\"_blank\">$1</a>'\n        );\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(\n            replacePattern2,\n            '$1<a href=\"http://$2\" target=\"_blank\">$2</a>'\n        );\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(\n            replacePattern3,\n            '<a href=\"mailto:$1\">$1</a>'\n        );\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone(obj) {\n        return JSON.parse(JSON.stringify(obj) || null);\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(\n            text\n                .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n                .replace(\n                    /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n                    \"]\"\n                )\n                .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n        );\n    }\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $(\"<div/>\")\n            .text(content)\n            .html();\n    }\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty(value) {\n        if (!(value instanceof Array)) {\n            value = [value];\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (var i in value) {\n            if (\n                [\"__null__\", \"__undefined__\", null, undefined].indexOf(\n                    value[i]\n                ) > -1\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify(lst) {\n        if ($.isArray(lst)) {\n            var lst = lst.toString().replace(/,/g, \", \");\n            var pos = lst.lastIndexOf(\", \");\n            if (pos != -1) {\n                lst = lst.substr(0, pos) + \" or \" + lst.substr(pos + 2);\n            }\n            return lst;\n        }\n        return \"\";\n    }\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get(options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify(options);\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug(\n                \"utils.js::get() - Fetching from cache [\" + options.url + \"].\"\n            );\n        } else {\n            request({\n                url: options.url,\n                data: options.data,\n                success: function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error: function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    }\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request(options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType: \"application/json\",\n            type: options.type || \"GET\",\n            data: options.data || {},\n            url: options.url\n        };\n        // encode data into url\n        if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n            if (!$.isEmptyObject(ajaxConfig.data)) {\n                ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = \"json\";\n            ajaxConfig.url = ajaxConfig.url;\n            ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig)\n            .done(function(response) {\n                if (typeof response === \"string\") {\n                    try {\n                        response = response.replace(\"Infinity,\", '\"Infinity\",');\n                        response = jQuery.parseJSON(response);\n                    } catch (e) {\n                        console.debug(e);\n                    }\n                }\n                options.success && options.success(response);\n            })\n            .fail(function(response) {\n                var response_text = null;\n                try {\n                    response_text = jQuery.parseJSON(response.responseText);\n                } catch (e) {\n                    response_text = response.responseText;\n                }\n                options.error && options.error(response_text, response.status);\n            })\n            .always(function() {\n                options.complete && options.complete();\n            });\n    }\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute(classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(\":eq(0)\");\n        var value = el.css(name);\n        el.remove();\n        return value;\n    }\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile(url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $(\n                '<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">'\n            ).appendTo(\"head\");\n        }\n    }\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge(options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    }\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces(number, numPlaces) {\n        var placesMultiplier = 1;\n        for (var i = 0; i < numPlaces; i++) {\n            placesMultiplier *= 10;\n        }\n        return Math.round(number * placesMultiplier) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString(size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb) {\n            size = size / tb;\n            unit = \"TB\";\n        } else if (size >= gb) {\n            size = size / gb;\n            unit = \"GB\";\n        } else if (size >= mb) {\n            size = size / mb;\n            unit = \"MB\";\n        } else if (size >= kb) {\n            size = size / kb;\n            unit = \"KB\";\n        } else if (size > 0) {\n            unit = \"b\";\n        } else {\n            return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n        }\n        // return formatted string\n        var rounded =\n            unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n        if (normal_font) {\n            return rounded + \" \" + unit;\n        } else {\n            return \"<strong>\" + rounded + \"</strong> \" + unit;\n        }\n    }\n\n    /** Create a unique id */\n    function uid() {\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return \"uid-\" + top.__utils__uid__++;\n    }\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n        return (\n            d.getDate() +\n            \"/\" +\n            (d.getMonth() + 1) +\n            \"/\" +\n            d.getFullYear() +\n            \", \" +\n            hours +\n            \":\" +\n            minutes\n        );\n    }\n\n    /** Append script and style tags to Galaxy main application */\n    function appendScriptStyle(data) {\n        // create a script tag inside head tag\n        if (data.script && data.script !== \"\") {\n            $(\"<script/>\", { type: \"text/javascript\" })\n                .text(data.script)\n                .appendTo(\"head\");\n        }\n        // create a style tag inside head tag\n        if (data.styles && data.styles !== \"\") {\n            $(\"<style/>\", { type: \"text/css\" })\n                .text(data.styles)\n                .appendTo(\"head\");\n        }\n    }\n\n    /** Get querystrings from url */\n    function getQueryString(key) {\n        return decodeURIComponent(\n            window.location.search.replace(\n                new RegExp(\n                    \"^(?:.*[&\\\\?]\" +\n                        encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") +\n                        \"(?:\\\\=([^&]*))?)?.*$\",\n                    \"i\"\n                ),\n                \"$1\"\n            )\n        );\n    }\n\n    function setWindowTitle(title) {\n        if (title) {\n            window.document.title =\n                \"Galaxy \" +\n                (window.Galaxy.config.brand\n                    ? \" | \" + window.Galaxy.config.brand\n                    : \"\") +\n                \" | \" +\n                _l(title);\n        } else {\n            window.document.title =\n                \"Galaxy \" +\n                (window.Galaxy.config.brand\n                    ? \" | \" + window.Galaxy.config.brand\n                    : \"\");\n        }\n    }\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify,\n        appendScriptStyle: appendScriptStyle,\n        getQueryString: getQueryString,\n        setWindowTitle: setWindowTitle\n    };\n});\n"]}