{"version":3,"sources":["utils/natural-sort.js"],"names":["define","a","b","re","naturalSort","x","toString","toLowerCase","y","nC","split","String","fromCharCode","xN","replace","getTime","yN","Date","yD","xD","oFxNcL","oFyNcL","numS","Math","max","length","cLoc","parseFloat"],"mappings":"aAAAA,UAAW,WAsCP,OAtCJA,SAAsBC,EAAAC,GAElB,IAAAC,EAASC,gBACLC,EAAAJ,EAAAK,WAAAC,eAAA,GACIJ,EAAAA,EAAKG,WAAAC,eAAT,GACIF,EAAIJ,OAAEK,aAAWC,GACjBC,EAAIN,EAAEI,QAAFH,EAAaI,EAAAA,KAAbE,GAA8BC,MAFtCD,GAGIA,EAAKE,EAAAA,QAAOC,EAAAA,EAAP,KAHTH,GAAAC,MAAAD,GAIII,EAAKR,IAAES,KAAFT,GAAAU,UACLC,EAAKR,EAAEM,IAAFG,KAAcR,GAAAA,UAAd,KALT,GAOIS,EAAAA,CACJ,GAAAC,EAAAD,EACQ,OAAA,EACAC,GAAJA,EAAaD,EACT,OAAO,EAKf,IACIE,IAFHA,EAAAC,EAEGD,EAAQC,EAAZC,EAAAC,KAAAC,IAAAX,EAAAY,OAAAT,EAAAS,QACAC,EACQA,EAIJN,IACAC,CAGC,GAFDD,EAAIA,WAAJP,EAAqBa,KAAAb,EAAAa,GACjBL,EAAAM,WAAAX,EAAAU,KAAAV,EAAAU,GADJN,EAEWA,EACP,OAAA,EACH,GAAAA,EAAAC,EACJ,OAAA,EACD,OAAO","file":"../../scripts/utils/natural-sort.js","sourcesContent":["define([], function() {\n    // Alphanumeric/natural sort fn\n    function naturalSort(a, b) {\n        // setup temp-scope variables for comparison evauluation\n        var re = /(-?[0-9\\.]+)/g,\n            x = a.toString().toLowerCase() || \"\",\n            y = b.toString().toLowerCase() || \"\",\n            nC = String.fromCharCode(0),\n            xN = x.replace(re, nC + \"$1\" + nC).split(nC),\n            yN = y.replace(re, nC + \"$1\" + nC).split(nC),\n            xD = new Date(x).getTime(),\n            yD = xD ? new Date(y).getTime() : null;\n        // natural sorting of dates\n        if (yD) {\n            if (xD < yD) {\n                return -1;\n            } else if (xD > yD) {\n                return 1;\n            }\n        }\n        // natural sorting through split numeric strings and default strings\n        var oFxNcL, oFyNcL;\n        for (\n            var cLoc = 0, numS = Math.max(xN.length, yN.length);\n            cLoc < numS;\n            cLoc++\n        ) {\n            oFxNcL = parseFloat(xN[cLoc]) || xN[cLoc];\n            oFyNcL = parseFloat(yN[cLoc]) || yN[cLoc];\n            if (oFxNcL < oFyNcL) {\n                return -1;\n            } else if (oFxNcL > oFyNcL) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    return naturalSort;\n});\n"]}