{"version":3,"sources":["utils/ajax-queue.js"],"names":["define","AjaxQueue","initialFunctions","self","jQuery","Deferred","deferred","queue","responses","numToProcess","running","start","NamedAjaxQueue","this","names","prototype","init","fn","add","index","length","fnIndex","push","xhr","response","notify","curr","always","stop","causeFail","msg","reject","resolve","done","fail","progress","create","constructor","obj","hasOwnProperty","Error","JSON","name","call","clear"],"mappings":"aAAAA,UAAW,WAWP,SAASC,EAAUC,GAAnB,IAAAC,EAASF,KAeLE,OAbAA,EAAIA,SAAJC,OAAAC,WAEAF,EAAKG,SAELH,EAAKI,aAELJ,EAAKK,aAAL,EAEAL,EAAKM,SAAAA,EAELN,EAAKO,KAAAA,OAGLP,EAAKQ,QAAAA,EA6GT,SAASC,EAAeV,GACpB,IAAIC,EAAOU,KACXV,OAFJA,EAASS,SACLX,EAAIE,KAAJU,KAAAX,GACKY,EA0CLb,OAnJJA,EAAUc,UAAUC,KAAO,SAAcd,GADzC,IAAAC,EAAAU,KACAZ,EAAoBe,QAAO,SAASA,GAC5Bb,EAAAA,IAAOc,MAOfhB,EAAUc,UAAUG,IAAM,SAAaD,GAAvChB,IAAAA,EAAUc,KACNI,EAAAN,KAAAN,MAAAa,OAyBK,OAxBLP,KAAIV,cAAJ,EAEAU,KAAKJ,MAAAA,KAAAA,WAGD,IAAIY,EAAUF,EADbZ,EAAMe,IACPC,EACIA,KAAAA,SADJC,GAEArB,EAAAG,SAAAmB,QACAC,KAASL,EACLlB,MAAKG,EAASmB,aACVC,SAAML,MAKdE,EAAAI,OAAA,SAAAH,GACArB,EAAAK,UAAAc,KAAAE,GACIG,EAAOpB,MAAAa,OACPjB,EAAKK,MAAUc,OAAfnB,GAEIA,EAAKI,WAHbM,MAaRZ,EAAUc,UAAUJ,MAAQ,WAGpB,OAJRE,KAAAN,MAAAa,SACAnB,KAAUc,SAAUJ,EACZE,KAAKN,MAAMa,OAAXP,IAEAA,MASRZ,EAAUc,UAAUa,KAAO,SAAcC,EAAWC,GAUhD,OAVJ7B,KAAAA,SAAA,EACIY,KAAAN,SACAsB,EAEIA,KAAAA,SAAWE,OAAAD,GAEXjB,KAAKP,SAASyB,QAAOD,KAArBtB,WAEAK,KAAAJ,aAAcuB,EACjBnB,KAAAP,SAAAF,OAAAC,WACII,MAKTR,EAAAc,UAAAkB,KAAA,SAAAhB,GACA,OAAAJ,KAAAP,SAAA2B,KAAAhB,IAGChB,EAFDc,UAAAmB,KAAA,SAAAjB,GAGA,OAAAJ,KAAAP,SAAA4B,KAAAjB,IAGChB,EAFDc,UAAAY,OAAA,SAAAV,GAGA,OAAAJ,KAAAP,SAAAqB,OAAAV,IAGChB,EAFDc,UAAAoB,SAAA,SAAAlB,GAGA,OAAAJ,KAAAP,SAAA6B,SAAAlB,IAQAhB,EAAUmC,OAAS,SAAgBlC,GAC/B,OAAO,IAAID,EAAUC,GAAkBI,UAkBvCM,EAAAG,UAAA,IAAAd,EACHW,EAAAG,UAAAsB,YAAAzB,EAKDA,EAAeG,UAAUG,IAAM,SAAaoB,GACxC,IAAAA,EAAAC,eAAA,UAAAD,EAAAC,eAAA,MACA,MAAA,IAAAC,MACMF,oEACIG,KAAID,UACNF,IAKJ,IAAAzB,KAAAC,MAAAyB,eAAAD,EAAAI,MAMJ,OAFA7B,KAAAC,MAAAwB,EAAAI,OAAA,EAEAzC,EAAAc,UAAAG,IAAAyB,KAAA9B,KAAAyB,EAAArB,KAKAL,EAAAG,UAAA6B,MAAA,WADJ,OAEI/B,KAAAC,SAFJD,MASID,EAAWA,OAAAA,SAAeV,GAD9B,OAAA,IAAAU,EAAAV,GAAAI,WAOIM,UAAAA,EAFJA,eAAAA","file":"../../scripts/utils/ajax-queue.js","sourcesContent":["define([], function() {\n    //ASSUMES: jquery\n    //=============================================================================\n    /** @class AjaxQueue\n *  Class that allows queueing functions that return jQuery promises (such\n *  as ajax calls). Each function waits for the previous to complete before\n *  being called\n *\n *  @constructor accepts a list of functions and automatically begins\n *      processing them\n */\n    function AjaxQueue(initialFunctions) {\n        //TODO: possibly rename to DeferredQueue\n        var self = this;\n        /** the main deferred for the entire queue - note: also sends notifications of progress */\n        self.deferred = jQuery.Deferred();\n        /** the queue array of functions */\n        self.queue = [];\n        /** cache the response from each deferred call - error or success */\n        self.responses = [];\n        /** total number of fn's to process */\n        self.numToProcess = 0;\n        /** is the queue processing/waiting for any calls to return? */\n        self.running = false;\n\n        self.init(initialFunctions || []);\n        self.start();\n\n        return self;\n    }\n\n    /** add all fns in initialFunctions (if any) to the queue */\n    AjaxQueue.prototype.init = function init(initialFunctions) {\n        var self = this;\n        initialFunctions.forEach(function(fn) {\n            self.add(fn);\n        });\n    };\n\n    /** add a fn to the queue */\n    AjaxQueue.prototype.add = function add(fn) {\n        //console.debug( 'AjaxQueue.prototype.add:', fn );\n        var self = this,\n            index = this.queue.length;\n        this.numToProcess += 1;\n\n        this.queue.push(function() {\n            var fnIndex = index,\n                xhr = fn();\n            // if successful, notify using the deferred to allow tracking progress\n            xhr.done(function(response) {\n                self.deferred.notify({\n                    curr: fnIndex,\n                    total: self.numToProcess,\n                    response: response\n                });\n            });\n            // (regardless of previous error or success) if not last ajax call, shift and call the next\n            //  if last fn, resolve deferred\n            xhr.always(function(response) {\n                self.responses.push(response);\n                if (self.queue.length) {\n                    self.queue.shift()();\n                } else {\n                    self.stop();\n                }\n            });\n        });\n        return this;\n    };\n\n    /** start processing the queue */\n    AjaxQueue.prototype.start = function start() {\n        if (this.queue.length) {\n            this.running = true;\n            this.queue.shift()();\n        }\n        return this;\n    };\n\n    /** stop the queue\n *  @param {boolean} causeFail  cause an error/fail on the main deferred\n *  @param {String} msg         message to send when rejecting the main deferred\n */\n    AjaxQueue.prototype.stop = function stop(causeFail, msg) {\n        //TODO: doesn't abort current call\n        this.running = false;\n        this.queue = [];\n        if (causeFail) {\n            //TODO: spliced args instead\n            this.deferred.reject(msg);\n        } else {\n            this.deferred.resolve(this.responses);\n        }\n        this.numToProcess = 0;\n        this.deferred = jQuery.Deferred();\n        return this;\n    };\n\n    // only a handful of the deferred interface for now - possible YAGNI\n    /** implement done from the jq deferred interface */\n    AjaxQueue.prototype.done = function done(fn) {\n        return this.deferred.done(fn);\n    };\n    /** implement fail from the jq deferred interface */\n    AjaxQueue.prototype.fail = function fail(fn) {\n        return this.deferred.fail(fn);\n    };\n    /** implement always from the jq deferred interface */\n    AjaxQueue.prototype.always = function always(fn) {\n        return this.deferred.always(fn);\n    };\n    /** implement progress from the jq deferred interface */\n    AjaxQueue.prototype.progress = function progress(fn) {\n        return this.deferred.progress(fn);\n    };\n\n    /** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\n    AjaxQueue.create = function create(initialFunctions) {\n        return new AjaxQueue(initialFunctions).deferred;\n    };\n\n    //=============================================================================\n    /** @class NamedAjaxQueue\n *  @augments AjaxQueue\n *  Allows associating a name with a deferring fn and prevents adding deferring\n *  fns if the name has already been used. Useful to prevent build up of duplicate\n *  async calls.\n *  Both the array initialFunctions sent to constructor and any added later with\n *  add() should be objects (NOT functions) of the form:\n *  { name: some unique id,\n *    fn:   the deferring fn or ajax call }\n */\n    function NamedAjaxQueue(initialFunctions) {\n        var self = this;\n        self.names = {};\n        AjaxQueue.call(this, initialFunctions);\n        return self;\n    }\n    NamedAjaxQueue.prototype = new AjaxQueue();\n    NamedAjaxQueue.prototype.constructor = NamedAjaxQueue;\n\n    /** add the obj.fn to the queue if obj.name hasn't been used before */\n    NamedAjaxQueue.prototype.add = function add(obj) {\n        //console.debug( 'NamedAjaxQueue.adding:', obj )\n        //console.debug( 'NamedAjaxQueue.prototype.add:', obj );\n        if (!(obj.hasOwnProperty(\"name\") && obj.hasOwnProperty(\"fn\"))) {\n            throw new Error(\n                'NamedAjaxQueue.add requires an object with both \"name\" and \"fn\": ' +\n                    JSON.stringify(obj)\n            );\n        }\n        if (this.names.hasOwnProperty(obj.name)) {\n            //console.warn( 'name has been used:', obj.name );\n            return;\n        }\n        this.names[obj.name] = true;\n        //console.debug( '\\t names: ', this.names )\n        return AjaxQueue.prototype.add.call(this, obj.fn);\n        //console.debug( '\\t queue: ', this.queue.length );\n    };\n\n    /** override to remove names */\n    NamedAjaxQueue.prototype.clear = function clear() {\n        this.names = {};\n        return this;\n    };\n\n    /** shortcut constructor / fire and forget\n *  @returns {Deferred} the queue's main deferred\n */\n    NamedAjaxQueue.create = function create(initialFunctions) {\n        return new NamedAjaxQueue(initialFunctions).deferred;\n    };\n\n    //=============================================================================\n    return {\n        AjaxQueue: AjaxQueue,\n        NamedAjaxQueue: NamedAjaxQueue\n    };\n});\n"]}