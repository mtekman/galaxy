{"version":3,"sources":["utils/uploadbox.js"],"names":["$","jQuery","props","push","uploadpost","config","extend","data","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_login","cnf","error_message","form","append","FormData","key","payload","sizes","d","name","file","size","xhr","setRequestHeader","onreadystatechange","response","DONE","responseText","extra_info","parseJSON","status","text","e","lengthComputable","Math","round","loaded","total","Galaxy","emit","debug","uploadinput","el","ondragover","fn","options","this","opts","onchange","ondragleave","on","alert","target","files","val","dataTransfer","preventDefault","uploadbox","dragleave","announce","initialize","dialog","complete","trigger","queue_length","queue","index","queue_running","_","each","mode","filter","f","length","queue_stop","duplicate","String","queue_index","remove","process","message","percentage","dragover","multiple","m","add","select","start","stop","reset","window","configure","compatible","File","XMLHttpRequest","FileList"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n(function($) {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = function(config) {\n        // parse options\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: function() {},\n                error: function() {},\n                progress: function() {},\n                url: null,\n                maxfilesize: 2048,\n                error_filesize: \"File exceeds 2GB. Please use a FTP client.\",\n                error_default: \"Please make sure the file is available.\",\n                error_server: \"Upload request failed.\",\n                error_login: \"Uploads require you to log in.\"\n            },\n            config\n        );\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        // captures state changes\n        xhr.onreadystatechange = function() {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                var extra_info = \"\";\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                        extra_info = response.err_msg;\n                    } catch (e) {\n                        response = xhr.responseText;\n                        extra_info = response;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + \" (\" + xhr.status + \"). \" + extra_info);\n                } else {\n                    cnf.success(response);\n                }\n            }\n        };\n\n        // prepare upload progress\n        xhr.upload.addEventListener(\n            \"progress\",\n            function(e) {\n                if (e.lengthComputable) {\n                    cnf.progress(Math.round(e.loaded * 100 / e.total));\n                }\n            },\n            false\n        );\n\n        // send request\n        Galaxy.emit.debug(\n            \"uploadbox::uploadpost()\",\n            \"Posting following data.\",\n            cnf\n        );\n        xhr.send(form);\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend(\n            {},\n            {\n                ondragover: function() {},\n                ondragleave: function() {},\n                onchange: function() {},\n                multiple: false\n            },\n            options\n        );\n\n        // append hidden upload field\n        var $input = $(\n            '<input type=\"file\" style=\"display: none\" ' +\n                ((opts.multiple && \"multiple\") || \"\") +\n                \"/>\"\n        );\n        el.append(\n            $input.change(function(e) {\n                opts.onchange(e.target.files);\n                $(this).val(\"\");\n            })\n        );\n\n        // drag/drop events\n        el.on(\"drop\", function(e) {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", function(e) {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", function(e) {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function() {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend(\n            {},\n            {\n                dragover: function() {},\n                dragleave: function() {},\n                announce: function(d) {},\n                initialize: function(d) {},\n                progress: function(d, m) {},\n                success: function(d, m) {},\n                error: function(d, m) {\n                    alert(m);\n                },\n                complete: function() {}\n            },\n            options\n        );\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: function(files) {\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, function(file, key) {\n                    if (\n                        file.mode !== \"new\" &&\n                        _.filter(queue, function(f) {\n                            return f.name === file.name && f.size === file.size;\n                        }).length\n                    ) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, function(file) {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            $.uploadpost({\n                url: opts.url,\n                data: opts.initialize(index),\n                success: function(message) {\n                    opts.success(index, message);\n                    process();\n                },\n                error: function(message) {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: function(percentage) {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return (\n                window.File &&\n                window.FormData &&\n                window.XMLHttpRequest &&\n                window.FileList\n            );\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n"]}