{"version":3,"sources":["galaxy.library.js"],"names":["define","LibraryRouter","initialize","Backbone","mod_masthead","mod_utils","mod_toastr","routes","mod_library_model","mod_folderlist_view","mod_librarylist_view","mod_librarytoolbar_view","mod_foldertoolbar_view","mod_library_dataset_view","mod_library_library_view","mod_library_folder_view","Router","extend","this","routesHit","history","on","bind","trackPageview","url","library/:library_id/permissions","folders/:folder_id/permissions","folders/:id/page/:show_page","folders/:folder_id/datasets/:dataset_id","ga","folders/:folder_id/datasets/:dataset_id/versions/:ldda_id","folders/:folder_id/download/:format","folders/:folder_id/import/:source","folder_page_size","window","back","navigate","trigger","replace","libraryListView","library_router","getFragment","folderToolbarView","test","folderListView","Galaxy","root","LibraryPrefs","mod_baseMVC","SessionStorageModel","a","m","parentNode","sort_by","GalaxyApp","View","libraryToolbarView","libraries","datasetView","i","s","o","g","r","render","show_page","q","push","arguments","l","Date","$el","unbind","async","id","preferences","$","download","folder_id","LibraryToolbarView","LibraryListView","dataset_id","show_version","show_permissions","FolderToolbarView","FolderListView","folderView","FolderView","source","showImportModal","format","find","length","info","LibraryDatasetView","ldda_id","library_id","libraryView","LibraryView","start","pushState"],"mappings":"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","file":"../scripts/galaxy.library.js","sourcesContent":["// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\ndefine(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/base-mvc\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderlist-view\",\n        \"mvc/library/library-librarylist-view\",\n        \"mvc/library/library-librarytoolbar-view\",\n        \"mvc/library/library-foldertoolbar-view\",\n        \"mvc/library/library-dataset-view\",\n        \"mvc/library/library-library-view\",\n        \"mvc/library/library-folder-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_baseMVC,\n        mod_library_model,\n        mod_folderlist_view,\n        mod_librarylist_view,\n        mod_librarytoolbar_view,\n        mod_foldertoolbar_view,\n        mod_library_dataset_view,\n        mod_library_library_view,\n        mod_library_folder_view\n    ) {\n        // ============================================================================\n        /**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\n        var LibraryRouter = Backbone.Router.extend({\n            initialize: function() {\n                this.routesHit = 0;\n                // keep count of number of routes handled by the application\n                Backbone.history.on(\n                    \"route\",\n                    function() {\n                        this.routesHit++;\n                    },\n                    this\n                );\n\n                this.bind(\"route\", this.trackPageview);\n            },\n\n            routes: {\n                \"\": \"libraries\",\n                \"page/:show_page\": \"libraries_page\",\n                \"library/:library_id/permissions\": \"library_permissions\",\n                \"folders/:folder_id/permissions\": \"folder_permissions\",\n                \"folders/:id\": \"folder_content\",\n                \"folders/:id/page/:show_page\": \"folder_page\",\n                \"folders/:folder_id/datasets/:dataset_id\": \"dataset_detail\",\n                \"folders/:folder_id/datasets/:dataset_id/permissions\":\n                    \"dataset_permissions\",\n                \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\":\n                    \"dataset_version\",\n                \"folders/:folder_id/download/:format\": \"download\",\n                \"folders/:folder_id/import/:source\": \"import_datasets\"\n            },\n\n            /**\n   * If more than one route has been hit the user did not land on current\n   * page directly so we can go back safely. Otherwise go to the home page.\n   * Use replaceState if available so the navigation doesn't create an\n   * extra history entry\n   */\n            back: function() {\n                if (this.routesHit > 1) {\n                    window.history.back();\n                } else {\n                    this.navigate(\"#\", { trigger: true, replace: true });\n                }\n            },\n\n            /**\n   * Track every route change as a page view in Google Analytics.\n   */\n            trackPageview: function() {\n                var url = Backbone.history.getFragment();\n                //prepend slash\n                if (!/^\\//.test(url) && url != \"\") {\n                    url = \"/\" + url;\n                }\n                if (typeof ga !== \"undefined\") {\n                    ga(\"send\", \"pageview\", Galaxy.root + \"library/list\" + url);\n                }\n            }\n        });\n\n        // ============================================================================\n        /** session storage for library preferences */\n        var LibraryPrefs = mod_baseMVC.SessionStorageModel.extend({\n            defaults: {\n                with_deleted: false,\n                without_restricted: false,\n                sort_order: \"asc\",\n                sort_by: \"name\",\n                library_page_size: 20,\n                folder_page_size: 15\n            }\n        });\n\n        // ============================================================================\n        /**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\n        var GalaxyLibrary = Backbone.View.extend({\n            libraryToolbarView: null,\n            libraryListView: null,\n            library_router: null,\n            libraryView: null,\n            folderToolbarView: null,\n            folderListView: null,\n            datasetView: null,\n\n            initialize: function() {\n                // This should go upstream in the js app once available\n                if (window.Galaxy.config.ga_code) {\n                    (function(i, s, o, g, r, a, m) {\n                        i[\"GoogleAnalyticsObject\"] = r;\n                        (i[r] =\n                            i[r] ||\n                            function() {\n                                (i[r].q = i[r].q || []).push(arguments);\n                            }),\n                            (i[r].l = 1 * new Date());\n                        (a = s.createElement(o)),\n                            (m = s.getElementsByTagName(o)[0]);\n                        a.async = 1;\n                        a.src = g;\n                        m.parentNode.insertBefore(a, m);\n                    })(\n                        window,\n                        document,\n                        \"script\",\n                        \"//www.google-analytics.com/analytics.js\",\n                        \"ga\"\n                    );\n                    ga(\"create\", window.Galaxy.config.ga_code, \"auto\");\n                    ga(\"send\", \"pageview\");\n                }\n\n                Galaxy.libraries = this;\n\n                this.preferences = new LibraryPrefs({ id: \"global-lib-prefs\" });\n\n                this.library_router = new LibraryRouter();\n\n                this.library_router.on(\"route:libraries\", function() {\n                    if (Galaxy.libraries.libraryToolbarView) {\n                        Galaxy.libraries.libraryToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                    Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView();\n                });\n\n                this.library_router.on(\"route:libraries_page\", function(\n                    show_page\n                ) {\n                    if (Galaxy.libraries.libraryToolbarView === null) {\n                        Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                        Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView(\n                            { show_page: show_page }\n                        );\n                    } else {\n                        Galaxy.libraries.libraryListView.render({\n                            show_page: show_page\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:folder_content\", function(id) {\n                    if (Galaxy.libraries.folderToolbarView) {\n                        Galaxy.libraries.folderToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                        { id: id }\n                    );\n                    Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                        { id: id }\n                    );\n                });\n\n                this.library_router.on(\"route:folder_page\", function(\n                    id,\n                    show_page\n                ) {\n                    if (Galaxy.libraries.folderToolbarView === null) {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                            { id: id }\n                        );\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                            { id: id, show_page: show_page }\n                        );\n                    } else {\n                        Galaxy.libraries.folderListView.render({\n                            id: id,\n                            show_page: parseInt(show_page)\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:download\", function(\n                    folder_id,\n                    format\n                ) {\n                    if ($(\"#folder_list_body\").find(\":checked\").length === 0) {\n                        mod_toastr.info(\n                            \"You must select at least one dataset to download\"\n                        );\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + folder_id,\n                            { trigger: true, replace: true }\n                        );\n                    } else {\n                        Galaxy.libraries.folderToolbarView.download(\n                            folder_id,\n                            format\n                        );\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + folder_id,\n                            { trigger: false, replace: true }\n                        );\n                    }\n                });\n\n                this.library_router.on(\"route:dataset_detail\", function(\n                    folder_id,\n                    dataset_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        {\n                            id: dataset_id,\n                            show_version: false,\n                            show_permissions: false\n                        }\n                    );\n                });\n\n                this.library_router.on(\"route:dataset_version\", function(\n                    folder_id,\n                    dataset_id,\n                    ldda_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        { id: dataset_id, ldda_id: ldda_id, show_version: true }\n                    );\n                });\n\n                this.library_router.on(\"route:dataset_permissions\", function(\n                    folder_id,\n                    dataset_id\n                ) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView(\n                        { id: dataset_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:library_permissions\", function(\n                    library_id\n                ) {\n                    if (Galaxy.libraries.libraryView) {\n                        Galaxy.libraries.libraryView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryView = new mod_library_library_view.LibraryView(\n                        { id: library_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:folder_permissions\", function(\n                    folder_id\n                ) {\n                    if (Galaxy.libraries.folderView) {\n                        Galaxy.libraries.folderView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderView = new mod_library_folder_view.FolderView(\n                        { id: folder_id, show_permissions: true }\n                    );\n                });\n\n                this.library_router.on(\"route:import_datasets\", function(\n                    folder_id,\n                    source\n                ) {\n                    if (\n                        Galaxy.libraries.folderToolbarView &&\n                        Galaxy.libraries.folderListView\n                    ) {\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    } else {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView(\n                            { id: folder_id }\n                        );\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView(\n                            { id: folder_id }\n                        );\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    }\n                });\n\n                Backbone.history.start({ pushState: false });\n            }\n        });\n\n        return {\n            GalaxyApp: GalaxyLibrary\n        };\n    }\n);\n"]}