{"version":3,"sources":["mvc/form/form-view.js"],"names":["define","initialize","initial_errors","icon","Ui","FormSection","FormData","always_refresh","status","options","hide_operations","Backbone","Model","onchange","setElement","render","set","self","this","input","data","matchModel","update","node","input_id","new_options","field","field_list","value","indexOf","type","emit","debug","i","opt","length","push","label","input_list","is_dynamic","wait","portlet","trigger","silent","$panel","parents","$","unwait","first","active","highlight","message","input_element","element_list","error_messages","filter","css","animate","scrollTop","$el","offset","top","errors","current_check","refresh_on_change","new_check","get","_renderForm","remove","inputs","title","operations","buttons","collapsible","collapsed","onchange_title","section","empty","persistent","checksum","model","on","_","each","reset","attributes","UnescapedMessage","View","Portlet","cls","append","Galaxy"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-section\",\n        \"mvc/form/form-data\"\n    ],\n    function(Utils, Portlet, Ui, FormSection, FormData) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.model = new Backbone.Model({\n                    initial_errors: false,\n                    cls: \"ui-portlet-limited\",\n                    icon: null,\n                    always_refresh: true,\n                    status: \"warning\",\n                    hide_operations: false,\n                    onchange: function() {}\n                }).set(options);\n                this.setElement(\"<div/>\");\n                this.render();\n            },\n\n            /** Update available options */\n            update: function(new_model) {\n                var self = this;\n                this.data.matchModel(new_model, function(node, input_id) {\n                    var input = self.input_list[input_id];\n                    if (input && input.options) {\n                        if (!_.isEqual(input.options, node.options)) {\n                            input.options = node.options;\n                            var field = self.field_list[input_id];\n                            if (field.update) {\n                                var new_options = [];\n                                if (\n                                    [\n                                        \"data\",\n                                        \"data_collection\",\n                                        \"drill_down\"\n                                    ].indexOf(input.type) != -1\n                                ) {\n                                    new_options = input.options;\n                                } else {\n                                    for (var i in node.options) {\n                                        var opt = node.options[i];\n                                        if (opt.length > 2) {\n                                            new_options.push({\n                                                label: opt[0],\n                                                value: opt[1]\n                                            });\n                                        }\n                                    }\n                                }\n                                field.update(new_options);\n                                field.trigger(\"change\");\n                                Galaxy.emit.debug(\n                                    \"form-view::update()\",\n                                    \"Updating options for \" + input_id\n                                );\n                            }\n                        }\n                    }\n                });\n            },\n\n            /** Set form into wait mode */\n            wait: function(active) {\n                for (var i in this.input_list) {\n                    var field = this.field_list[i];\n                    var input = this.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        field[active ? \"wait\" : \"unwait\"]();\n                    }\n                }\n            },\n\n            /** Highlight and scroll to input element (currently only used for error notifications) */\n            highlight: function(input_id, message, silent) {\n                var input_element = this.element_list[input_id];\n                if (input_element) {\n                    input_element.error(\n                        message || \"Please verify this parameter.\"\n                    );\n                    this.portlet.expand();\n                    this.trigger(\"expand\", input_id);\n                    if (!silent) {\n                        var $panel = this.$el\n                            .parents()\n                            .filter(function() {\n                                return (\n                                    [\"auto\", \"scroll\"].indexOf(\n                                        $(this).css(\"overflow\")\n                                    ) != -1\n                                );\n                            })\n                            .first();\n                        $panel.animate(\n                            {\n                                scrollTop:\n                                    $panel.scrollTop() +\n                                    input_element.$el.offset().top -\n                                    120\n                            },\n                            500\n                        );\n                    }\n                }\n            },\n\n            /** Highlights errors */\n            errors: function(options) {\n                this.trigger(\"reset\");\n                if (options && options.errors) {\n                    var error_messages = this.data.matchResponse(\n                        options.errors\n                    );\n                    for (var input_id in this.element_list) {\n                        var input = this.element_list[input_id];\n                        if (error_messages[input_id]) {\n                            this.highlight(\n                                input_id,\n                                error_messages[input_id],\n                                true\n                            );\n                        }\n                    }\n                }\n            },\n\n            /** Render tool form */\n            render: function() {\n                var self = this;\n                this.off(\"change\");\n                this.off(\"reset\");\n                // contains the dom field elements as created by the parameter factory i.e. form-parameters\n                this.field_list = {};\n                // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n                this.input_list = {};\n                // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n                this.element_list = {};\n                // converts the form into a json data structure\n                this.data = new FormData.Manager(this);\n                this._renderForm();\n                this.data.create();\n                this.model.get(\"initial_errors\") &&\n                    this.errors(this.model.attributes);\n                // add listener which triggers on checksum change, and reset the form input wrappers\n                var current_check = this.data.checksum();\n                this.on(\"change\", function(input_id) {\n                    var input = self.input_list[input_id];\n                    if (\n                        !input ||\n                        input.refresh_on_change ||\n                        self.model.get(\"always_refresh\")\n                    ) {\n                        var new_check = self.data.checksum();\n                        if (new_check != current_check) {\n                            current_check = new_check;\n                            self.model.get(\"onchange\")();\n                        }\n                    }\n                });\n                this.on(\"reset\", function() {\n                    _.each(self.element_list, function(input_element) {\n                        input_element.reset();\n                    });\n                });\n                return this;\n            },\n\n            /** Renders/appends dom elements of the form */\n            _renderForm: function() {\n                $(\".tooltip\").remove();\n                var options = this.model.attributes;\n                this.message = new Ui.UnescapedMessage();\n                this.section = new FormSection.View(this, {\n                    inputs: options.inputs\n                });\n                this.portlet = new Portlet.View({\n                    icon: options.icon,\n                    title: options.title,\n                    cls: options.cls,\n                    operations: !options.hide_operations && options.operations,\n                    buttons: options.buttons,\n                    collapsible: options.collapsible,\n                    collapsed: options.collapsed,\n                    onchange_title: options.onchange_title\n                });\n                this.portlet.append(this.message.$el);\n                this.portlet.append(this.section.$el);\n                this.$el.empty();\n                options.inputs && this.$el.append(this.portlet.$el);\n                options.message &&\n                    this.message.update({\n                        persistent: true,\n                        status: options.status,\n                        message: options.message\n                    });\n                Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n            }\n        });\n    }\n);\n"]}