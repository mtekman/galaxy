{"version":3,"sources":["mvc/form/form-data.js"],"names":["define","Utils","Manager","Backbone","Model","extend","initialize","app","checksum","sum","this","create","$el","find","each","self","$","attr","field","field_list","id","JSON","stringify","value","collapsed","dict","add","flat_id","input_id","input_value","flat_dict","result_dict","index","node","convert","identifier","head","input","section_label","block_indices","pos","block_prefix","block_label","indexOf","length","substr","sort","a","b","i","test_param","name","selectedCase","matchCase","flat","undefined","ignore","collapsible_value","payload","p_id","response","_iterate","section","separator","match","search","parent","matchModel","child","visitInputs","input_list","callback","matchResponse","result","type","new_id","falsevalue","cases","context","hasClass","inputs","key","Galaxy","debug","_","prefix","cache","j","emit"],"mappings":"aACAA,QAAQ,eAAgB,SAASC,GADjC,IAAAC,EAAAC,SAAAC,MAAAC,QACQC,WAAA,SAAgBC,GAChBL,KAAAA,IAAUC,GAMVK,SAAU,WADV,IAAAC,EAAA,GACAD,EAAUE,KAoBVC,OAnBID,KAAID,IAAAA,QAAJG,IAAAC,KAAA,gBAAAC,KAAA,WACIC,IAAAA,EAAOC,EAAXN,MAAAO,KAAA,MACAC,EAAAH,EAAqBF,IAArBM,WAA0BC,GAClBA,IACAF,GACAA,EACAT,IAOHY,KAAAC,UAAAJ,EAAAK,OAAAL,EAAAK,SAXL,IAaAL,EAAAM,UAtB4B,OA0BxBf,GAIJE,OAAIc,WAcH,SAAAC,EAAAC,EAAAC,EAAAC,GACDd,EAAAe,UAAAH,GAAAC,EACAG,EAAAJ,GAAAE,EACId,EAAKR,IAAIyB,aAATJ,IACIb,EAAIkB,IAAAA,aAAJL,GAAAhB,IAAAK,KACIgB,UACAN,GAIC,SAAAO,EAAAC,EAAAC,GACDT,IAAAA,IAAAA,KAAAA,EAAWU,CACX,IAAAJ,EAAAG,EAAQC,GACJ,GAAAJ,EAAAI,MAAK,CACD,IAAAA,EAAIC,EAAAA,MACJX,EAAIY,EAOIC,OANJC,IAAJN,IACAR,GAAK,KAIDA,GAAAU,EAAIG,KACAA,EAAAA,MACAD,IAAAA,SAGA,IACIE,KAIHA,EAAA,KACJ,IAAA,IAAAC,KAAAT,EAAA,CACJ,IAAAO,EAAAE,EAAAC,QAPYF,aAQb,GAAAD,IAGIR,GAXSS,WAWbG,OACKL,EAASA,KAENZ,SAAAA,EAAgBK,OAChBC,KAGRQ,IACCA,EAALC,EAAAG,OACgB9B,EAIEyB,KAedD,EAAAO,KAAA,SAAAC,EAAAC,GACC,OAALD,EAAAC,IAEIhB,EAAA,EACJ,IAAA,IAAAiB,KAAAV,EACQrB,EACAA,EAASA,IAAbc,IACQT,EAAAA,EAAQgB,EAAZU,KASQ1B,MACH,IAAA,cACDG,EAAIC,EAAAA,IAASU,WACbA,EAAAjB,IACIG,QACIG,EAKHC,EAAA,IAAAU,EAAAa,WAAAC,KACJd,EAAAjB,GACJG,GAjFb,IAAA6B,EAAAC,EAAAhB,EAAAd,IAoFH,GAAA6B,GACJlB,EACJP,EACDS,EACAC,EAAAjB,GAhJ4B,YAyGQgC,IA6CxBzB,MACAG,IAAL,UAvJqBI,GAAAG,EAAAiB,MAAA3B,GAAA,GAAAM,GAgHR,MA0CxB,QAxCwB,IAAIf,EAAQH,EAAKR,IAAIY,WAAWkB,EAAMjB,IA0CnD,GAAAF,GAAgBK,EAAhBA,MAAuB,CACvB,IAAiBA,EAAxBL,EAAAK,QA7J4B,SAsHiBgC,IAAjBlB,EAAMmB,QA0CtCnB,EAAAmB,QAAAjC,KAGIL,EAAAM,WAC0Ba,EAASA,oBAAnCd,EAAAc,EAAAoB,mBArC4B/B,EAAIC,EAASU,EAAMjB,GAAIG,GA0CvDc,EAAAqB,SAxCoC,IAAK,IAAIC,KAAQtB,EAAMqB,QA0CnCE,EACpBD,EACAtB,EAAAjB,GAC0BiB,EAAAqB,QAAAC,QA/I1B,IAAA5C,EAAK8C,KAGD9B,KACJrB,KAAKoB,SAALpB,KAAAH,IAAAuD,QAAAlD,IAAAa,GAGIM,IAAAA,KAmJa,OAlJbhB,KAAAA,aAiJgBgD,EAAAA,GAAAA,GACHhC,GAMhBiC,MAAA,SAAArC,GACDsC,OAAOvD,KAAIkD,WAAXlD,KAAAoB,UAAAH,IApCJ0B,UAAW,SAAShB,EAAOd,GA0C3BsC,OAAUR,EAAAhB,EAAS6B,IAKXC,WAAI/C,SAAOgD,EAAOnD,GAClB,IAAAF,EAAMqD,KACFC,EAAIhC,EAAAA,OAAa9B,SAAI+D,EAATnB,GACZ1B,EAAAA,UAAYY,IAASkC,EAASlC,EAAnBtB,EAA+Be,UAA1CqB,OAMXqB,cAAA,SAAAZ,GAGL,SAAAK,EAAA7C,EAAAgB,GAxCY,GAAoB,iBAATA,EAAmB,CAC1B,IAAIR,EAAWb,EAAKe,UAAUV,GAC9BQ,IAAa6C,EAAO7C,GAAYQ,QA2ClCc,IAAAA,IAAWwB,KAAjBtC,EAAyB,CACrBb,IAASoD,EAAQ1B,EACTZ,GAAMa,KAANb,EAAMa,CACX,IAAAa,EAAA,IACWb,aAAW0B,QAC5Bb,EAAA,KAEec,EAAOzD,EAAA2C,EAAAY,EAEnBV,EAAAU,EAAAvC,EAAAa,KArOZ,IAAAwB,KA6KY1D,EAAOL,KAoBX,OA0BRuD,EAAA,GAAAL,GA1Bea,GA8CXJ,SAAAA,SAAcH,EAAdG,GACAS,IAAAA,EAAYzE,KACGW,EAAAkD,GAAS7B,WAChBA,KAASA,WACTyC,IAAAA,EAAQzC,KACXjB,EAAAJ,EAAAoD,GAAAnD,KAAA,MAHL,GAAAD,EAAAoD,GAAAW,SAAA,eAAA,CAKA,IAAgBC,EAAQjE,EAAAR,IAAA+D,WAAAlD,GAChBa,EAAO+C,GAAOC,IAAlB5C,MAAAA,OACKc,EAAOlB,SAAAmC,EAAZ3C,EAAAL,SAEQa,EAAKyC,SAAbN,EAAA3C,QAiBY4B,EAAA,SAAID,EAAAA,GACAiB,WAAAA,EAAAA,WAAAA,OAOAa,EARJ,QAOC3D,EACG2D,EAAAA,WAAYC,WACR,OAnBZ9C,EAwBOa,WAAA0B,YAAA,SAOP,IAAA,IAAA3B,KAAAZ,EAAAwC,MACJ,GAAAxC,EAAKwC,MAAA5B,GAAL1B,OAAAA,EACI8C,OAAAA,EAGAE,OAAAA,GAOZF,EAAaA,SAAbA,EAAaA,EAAAA,EAAAA,EAAAA,GAFjBS,EAAA9D,EAAAX,QAAA,KAAAyE,GA3SJM,EAAAtE,KAAAkE,EAAA,SAAA3C,GAmPgBA,GAASA,EAAMqC,MAAQrC,EAAMc,OAC7B2B,EAAQzC,EAAMc,MAAQd,KAG9B,IAAK,IAAI4C,KAAOD,EAAQ,CACpB,IAAI/C,EAAO+C,EAAOC,GAClBhD,EAAKkB,KAAOlB,EAAKkB,MAAQ8B,EACzB,IAAI9B,EAAOkC,EAASA,EAAS,IAAMpD,EAAKkB,KAAOlB,EAAKkB,KACpD,OAAQlB,EAAKyC,MACT,IAAK,SACDU,EAAEtE,KAAKmB,EAAKqD,MAAO,SAASA,EAAOC,GAC/BlB,EAAYiB,EAAOf,EAAUpB,EAAO,IAAMoC,EAAGT,KAEjD,MACJ,IAAK,cACD,GAAI7C,EAAKiB,WAAY,CACjBqB,EACItC,EAAKiB,WACLC,EAAO,IAAMlB,EAAKiB,WAAWC,KAC7B2B,GAEJ,IAAI1B,EAAeC,EACfpB,EACAA,EAAKiB,WAAW3B,QAEC,GAAjB6B,EACAiB,EACIpC,EAAK4C,MAAMzB,GAAc4B,OACzBT,EACApB,EACA2B,GAGJI,OAAOM,KAAKL,MACR,+CACIhC,EACA,UAIZ+B,OAAOM,KAAKL,MACR,qEACIhC,EACA,KAGZ,MACJ,IAAK,UACDkB,EAAYpC,EAAK+C,OAAQT,EAAUpB,EAAM2B,GACzC,MACJ,QACIP,EAAStC,EAAMkB,EAAM2B,MAKrC,OACI5E,QAASA,EACTmE,YAAaA","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([\"utils/utils\"], function(Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function() {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum +=\n                        id +\n                        \":\" +\n                        JSON.stringify(field.value && field.value()) +\n                        \":\" +\n                        field.collapsed +\n                        \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] &&\n                    self.app.element_list[input_id].$el.attr(\n                        \"tour_id\",\n                        flat_id\n                    );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(\n                                        section_label\n                                    );\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(\n                                            parseInt(block_label.substr(pos))\n                                        );\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(\n                                                0,\n                                                pos\n                                            );\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function(a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(\n                                        flat_id + \"_\" + index++,\n                                        node[block_prefix + block_indices[i]]\n                                    );\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[\n                                    input.id\n                                ].value();\n                                add(\n                                    flat_id + \"|\" + input.test_param.name,\n                                    input.id,\n                                    value\n                                );\n                                var selectedCase = matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(\n                                        flat_id,\n                                        head[\n                                            input.id +\n                                                \"-section-\" +\n                                                selectedCase\n                                        ]\n                                    );\n                                }\n                                break;\n                            case \"section\":\n                                convert((!input.flat && flat_id) || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (\n                                        input.ignore === undefined ||\n                                        input.ignore != value\n                                    ) {\n                                        if (\n                                            field.collapsed &&\n                                            input.collapsible_value\n                                        ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(\n                                                    p_id,\n                                                    input.id,\n                                                    input.payload[p_id]\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function(input, value) {\n            return matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function(input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function() {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = (input && { input: input }) || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function(input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function(cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(\n                            node.test_param,\n                            name + \"|\" + node.test_param.name,\n                            context\n                        );\n                        var selectedCase = matchCase(\n                            node,\n                            node.test_param.value\n                        );\n                        if (selectedCase != -1) {\n                            visitInputs(\n                                node.cases[selectedCase].inputs,\n                                callback,\n                                name,\n                                context\n                            );\n                        } else {\n                            Galaxy.emit.debug(\n                                \"form-data::visitInputs() - Invalid case for \" +\n                                    name +\n                                    \".\"\n                            );\n                        }\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n});\n"]}