{"version":3,"sources":["mvc/form/form-section.js"],"names":["define","View","initialize","Utils","render","Portlet","Repeat","InputElement","Parameters","Backbone","extend","app","options","this","inputs","self","empty","$","each","$el","input_def","jQuery","input","add","_addRepeat","uid","input_list","id","type","_addSection","_addConditional","_addRow","test_param","field","selectedCase","cases","case_def","section_row","nonhidden","model","set","value","data","matchCase","i","j","hidden","sub_section","fadeIn","hide","trigger","block_index","title","addClass","sub_section_id","create","Math","repeat","get","ondel","input_element","del","portlet","max","onnew","_","size","cls","collapsible","collapsible_button","min","collapsed","expanded","append","n_cache","input_id","hideOptions","name","help","onchange","_append","label","hide_label","text_value","collapsible_value","collapsible_preview","disabled","color","backdrop","fixed","element_list","expand","parameters","field_list","argument","style","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/form/form-repeat\",\n        \"mvc/form/form-input\",\n        \"mvc/form/form-parameters\"\n    ],\n    function(Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n        var View = Backbone.View.extend({\n            initialize: function(app, options) {\n                this.app = app;\n                this.inputs = options.inputs;\n                this.parameters = new Parameters();\n                this.setElement($(\"<div/>\"));\n                this.render();\n            },\n\n            /** Render section view */\n            render: function() {\n                var self = this;\n                this.$el.empty();\n                _.each(this.inputs, function(input) {\n                    self.add(input);\n                });\n            },\n\n            /** Add a new input element */\n            add: function(input) {\n                var input_def = jQuery.extend(true, {}, input);\n                input_def.id = input.id = Utils.uid();\n                this.app.input_list[input_def.id] = input_def;\n                switch (input_def.type) {\n                    case \"conditional\":\n                        this._addConditional(input_def);\n                        break;\n                    case \"repeat\":\n                        this._addRepeat(input_def);\n                        break;\n                    case \"section\":\n                        this._addSection(input_def);\n                        break;\n                    default:\n                        this._addRow(input_def);\n                }\n            },\n\n            /** Add a conditional block */\n            _addConditional: function(input_def) {\n                var self = this;\n                input_def.test_param.id = input_def.id;\n                this.app.model.get(\"sustain_conditionals\") &&\n                    (input_def.test_param.disabled = true);\n                var field = this._addRow(input_def.test_param);\n\n                // set onchange event for test parameter\n                field.model &&\n                    field.model.set(\"onchange\", function(value) {\n                        var selectedCase = self.app.data.matchCase(\n                            input_def,\n                            value\n                        );\n                        for (var i in input_def.cases) {\n                            var case_def = input_def.cases[i];\n                            var section_row = self.$(\n                                \"#\" + input_def.id + \"-section-\" + i\n                            );\n                            var nonhidden = false;\n                            for (var j in case_def.inputs) {\n                                if (!case_def.inputs[j].hidden) {\n                                    nonhidden = true;\n                                    break;\n                                }\n                            }\n                            if (i == selectedCase && nonhidden) {\n                                section_row.fadeIn(\"fast\");\n                            } else {\n                                section_row.hide();\n                            }\n                        }\n                        self.app.trigger(\"change\");\n                    });\n\n                // add conditional sub sections\n                for (var i in input_def.cases) {\n                    var sub_section = new View(this.app, {\n                        inputs: input_def.cases[i].inputs\n                    });\n                    this._append(\n                        sub_section.$el.addClass(\"ui-form-section\"),\n                        input_def.id + \"-section-\" + i\n                    );\n                }\n\n                // trigger refresh on conditional input field after all input elements have been created\n                field.trigger(\"change\");\n            },\n\n            /** Add a repeat block */\n            _addRepeat: function(input_def) {\n                var self = this;\n                var block_index = 0;\n\n                // create repeat block element\n                var repeat = new Repeat.View({\n                    title: input_def.title || \"Repeat\",\n                    min: input_def.min,\n                    max: input_def.max,\n                    onnew: function() {\n                        create(input_def.inputs);\n                        self.app.trigger(\"change\");\n                    }\n                });\n\n                // helper function to create new repeat blocks\n                function create(inputs) {\n                    var sub_section_id =\n                        input_def.id + \"-section-\" + block_index++;\n                    var sub_section = new View(self.app, { inputs: inputs });\n                    repeat.add({\n                        id: sub_section_id,\n                        $el: sub_section.$el,\n                        ondel: function() {\n                            repeat.del(sub_section_id);\n                            self.app.trigger(\"change\");\n                        }\n                    });\n                }\n\n                //\n                // add parsed/minimum number of repeat blocks\n                //\n                var n_cache = _.size(input_def.cache);\n                for (\n                    var i = 0;\n                    i <\n                    Math.max(\n                        Math.max(n_cache, input_def.min || 0),\n                        input_def.default || 0\n                    );\n                    i++\n                ) {\n                    create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n                }\n\n                // hide options\n                this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n                // create input field wrapper\n                var input_element = new InputElement(this.app, {\n                    label: input_def.title || input_def.name,\n                    help: input_def.help,\n                    field: repeat\n                });\n                this._append(input_element.$el, input_def.id);\n            },\n\n            /** Add a customized section */\n            _addSection: function(input_def) {\n                var portlet = new Portlet.View({\n                    title: input_def.title || input_def.name,\n                    cls: \"ui-portlet-section\",\n                    collapsible: true,\n                    collapsible_button: true,\n                    collapsed: !input_def.expanded\n                });\n                portlet.append(\n                    new View(this.app, { inputs: input_def.inputs }).$el\n                );\n                portlet.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(input_def.help)\n                );\n                this.app.on(\"expand\", function(input_id) {\n                    portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n                });\n                this._append(portlet.$el, input_def.id);\n            },\n\n            /** Add a single input field element */\n            _addRow: function(input_def) {\n                var self = this;\n                var id = input_def.id;\n                input_def.onchange =\n                    input_def.onchange ||\n                    function() {\n                        self.app.trigger(\"change\", id);\n                    };\n                var field = this.parameters.create(input_def);\n                this.app.field_list[id] = field;\n                var input_element = new InputElement(this.app, {\n                    name: input_def.name,\n                    label: input_def.hide_label\n                        ? \"\"\n                        : input_def.label || input_def.name,\n                    value: input_def.value,\n                    text_value: input_def.text_value,\n                    collapsible_value: input_def.collapsible_value,\n                    collapsible_preview: input_def.collapsible_preview,\n                    help: input_def.help,\n                    argument: input_def.argument,\n                    disabled: input_def.disabled,\n                    color: input_def.color,\n                    style: input_def.style,\n                    backdrop: input_def.backdrop,\n                    hidden: input_def.hidden,\n                    fixed: input_def.fixed,\n                    field: field\n                });\n                this.app.element_list[id] = input_element;\n                this._append(input_element.$el, input_def.id);\n                return field;\n            },\n\n            /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n            _append: function($el, id) {\n                this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n"]}