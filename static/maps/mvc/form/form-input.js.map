{"version":3,"sources":["mvc/form/form-input.js"],"names":["define","Backbone","View","extend","initialize","app","options","model","attributes","this","field","app_options","text_enable","text_disable","cls_enable","cls_disable","always_refresh","setElement","_template","$field","$collapsible","$collapsible_text","$collapsible_icon","$title","$","$title_text","$error_text","$error","$backdrop","prepend","collapsed","collapsible_value","get","undefined","self","JSON","on","trigger","render","listenTo","backdrop","set","error","text","reset","help_argument","hide","help_text","error_text","$info","html","$el","$preview","color","removeClass","show","style","collapsible_state","addClass","attr","tooltip","placement","append"],"mappings":"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","file":"../../../scripts/mvc/form/form-input.js","sourcesContent":["/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = (options && options.field) || new Backbone.View();\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    text_enable: this.app_options.text_enable || \"Enable\",\n                    text_disable: this.app_options.text_disable || \"Disable\",\n                    cls_enable:\n                        this.app_options.cls_enable ||\n                        \"fa fa-caret-square-o-down\",\n                    cls_disable:\n                        this.app_options.cls_disable ||\n                        \"fa fa-caret-square-o-up\",\n                    always_refresh: this.app_options.always_refresh\n                }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed =\n                collapsible_value !== undefined &&\n                JSON.stringify(this.model.get(\"value\")) ==\n                    JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function() {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (\n                help_argument &&\n                help_text.indexOf(\"(\" + help_argument + \")\") == -1\n            ) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview\n                [\n                    (this.field.collapsed &&\n                        this.model.get(\"collapsible_preview\")) ||\n                    this.model.get(\"disabled\")\n                        ? \"show\"\n                        : \"hide\"\n                ]()\n                .html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\")\n                ? this.$field.hide()\n                : this.$field.show();\n            // render input field color and style\n            this.field.model &&\n                this.field.model.set({\n                    color: this.model.get(\"color\"),\n                    style: this.model.get(\"style\")\n                });\n            // render collapsible options\n            if (\n                !this.model.get(\"disabled\") &&\n                this.model.get(\"collapsible_value\") !== undefined\n            ) {\n                var collapsible_state = this.field.collapsed\n                    ? \"enable\"\n                    : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon\n                    .removeClass()\n                    .addClass(\"icon\")\n                    .addClass(this.model.get(\"cls_\" + collapsible_state))\n                    .attr(\n                        \"data-original-title\",\n                        this.model.get(\"text_\" + collapsible_state)\n                    )\n                    .tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-form-element\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-error ui-error\")\n                        .append($(\"<span/>\").addClass(\"fa fa-arrow-down\"))\n                        .append($(\"<span/>\").addClass(\"ui-form-error-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-title\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-collapsible\")\n                                .append(\n                                    $(\"<i/>\").addClass(\n                                        \"ui-form-collapsible-icon\"\n                                    )\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\n                                        \"ui-form-collapsible-text\"\n                                    )\n                                )\n                        )\n                        .append($(\"<span/>\").addClass(\"ui-form-title-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-field\")\n                        .append($(\"<span/>\").addClass(\"ui-form-info\"))\n                        .append($(\"<div/>\").addClass(\"ui-form-backdrop\"))\n                )\n                .append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n});\n"]}