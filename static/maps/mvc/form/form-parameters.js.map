{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["define","types","text","password","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","hidden_data","extend","library_data","ftpfile","upload","genomespacefile","input_def","fieldClass","field","Galaxy","emit","hidden","extensions","optional","type","multiple","call","this","onchange","options","_fieldSelect","_fieldText","debug","undefined","value","_fieldData","SelectContent","View","id","each","push","label","flavor","SelectClass","Ui","is_workflow","error_text","readonly","option","Select","display","_fieldDrilldown","Checkbox","RadioButton","str_value","Drilldown","datalist","Utils","isEmpty","$","isArray","Slider","i","String","max","Hidden","info","area","placeholder","_fieldBoolean","_fieldSlider","precise","_fieldColor","min","ColorPicker","_fieldLibrary","SelectLibrary","_fieldGenomeSpace","self","SelectGenomeSpace","_fieldUpload","Upload","_fieldFtp","SelectFtp","app","trigger"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-select-content\",\n        \"mvc/ui/ui-select-library\",\n        \"mvc/ui/ui-select-ftp\",\n        \"mvc/ui/ui-select-genomespace\",\n        \"mvc/ui/ui-color-picker\"\n    ],\n    function(\n        Utils,\n        Ui,\n        SelectContent,\n        SelectLibrary,\n        SelectFtp,\n        SelectGenomeSpace,\n        ColorPicker\n    ) {\n        // create form view\n        return Backbone.Model.extend({\n            /** Available parameter types */\n            types: {\n                text: \"_fieldText\",\n                password: \"_fieldText\",\n                select: \"_fieldSelect\",\n                data_column: \"_fieldSelect\",\n                genomebuild: \"_fieldSelect\",\n                data: \"_fieldData\",\n                data_collection: \"_fieldData\",\n                integer: \"_fieldSlider\",\n                float: \"_fieldSlider\",\n                boolean: \"_fieldBoolean\",\n                drill_down: \"_fieldDrilldown\",\n                color: \"_fieldColor\",\n                hidden: \"_fieldHidden\",\n                hidden_data: \"_fieldHidden\",\n                baseurl: \"_fieldHidden\",\n                library_data: \"_fieldLibrary\",\n                ftpfile: \"_fieldFtp\",\n                upload: \"_fieldUpload\",\n                genomespacefile: \"_fieldGenomeSpace\"\n            },\n\n            /** Returns an input field for a given field type */\n            create: function(input_def) {\n                var fieldClass = this.types[input_def.type];\n                var field =\n                    typeof this[fieldClass] === \"function\"\n                        ? this[fieldClass].call(this, input_def)\n                        : null;\n                if (!field) {\n                    field = input_def.options\n                        ? this._fieldSelect(input_def)\n                        : this._fieldText(input_def);\n                    Galaxy.emit.debug(\n                        \"form-parameters::_addRow()\",\n                        \"Auto matched field type (\" + input_def.type + \").\"\n                    );\n                }\n                input_def.value === undefined && (input_def.value = null);\n                field.value(input_def.value);\n                return field;\n            },\n\n            /** Data input field */\n            _fieldData: function(input_def) {\n                return new SelectContent.View({\n                    id: \"field-\" + input_def.id,\n                    extensions: input_def.extensions,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    type: input_def.type,\n                    flavor: input_def.flavor,\n                    data: input_def.options,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Select/Checkbox/Radio options field */\n            _fieldSelect: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // customize properties\n                if (input_def.type == \"data_column\") {\n                    input_def.error_text =\n                        \"Missing columns in referenced dataset.\";\n                }\n\n                // identify available options\n                var data = input_def.data;\n                if (!data) {\n                    data = [];\n                    _.each(input_def.options, function(option) {\n                        data.push({ label: option[0], value: option[1] });\n                    });\n                }\n\n                // identify display type\n                var SelectClass = Ui.Select;\n                switch (input_def.display) {\n                    case \"checkboxes\":\n                        SelectClass = Ui.Checkbox;\n                        break;\n                    case \"radio\":\n                        SelectClass = Ui.Radio;\n                        break;\n                    case \"radiobutton\":\n                        SelectClass = Ui.RadioButton;\n                        break;\n                }\n\n                // create select field\n                return new SelectClass.View({\n                    id: \"field-\" + input_def.id,\n                    data: data,\n                    error_text: input_def.error_text || \"No options available\",\n                    readonly: input_def.readonly,\n                    multiple: input_def.multiple,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange,\n                    individual: input_def.individual,\n                    searchable: input_def.flavor !== \"workflow\"\n                });\n            },\n\n            /** Drill down options field */\n            _fieldDrilldown: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // create drill down field\n                return new Ui.Drilldown.View({\n                    id: \"field-\" + input_def.id,\n                    data: input_def.options,\n                    display: input_def.display,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Text input field */\n            _fieldText: function(input_def) {\n                // field replaces e.g. a select field\n                if (input_def.options && input_def.data) {\n                    input_def.area = input_def.multiple;\n                    if (Utils.isEmpty(input_def.value)) {\n                        input_def.value = null;\n                    } else {\n                        if ($.isArray(input_def.value)) {\n                            var str_value = \"\";\n                            for (var i in input_def.value) {\n                                str_value += String(input_def.value[i]);\n                                if (!input_def.multiple) {\n                                    break;\n                                }\n                                str_value += \"\\n\";\n                            }\n                            input_def.value = str_value;\n                        }\n                    }\n                }\n                // create input element\n                return new Ui.Input({\n                    id: \"field-\" + input_def.id,\n                    type: input_def.type,\n                    area: input_def.area,\n                    readonly: input_def.readonly,\n                    placeholder: input_def.placeholder,\n                    datalist: input_def.datalist,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Slider field */\n            _fieldSlider: function(input_def) {\n                return new Ui.Slider.View({\n                    id: \"field-\" + input_def.id,\n                    precise: input_def.type == \"float\",\n                    is_workflow: input_def.is_workflow,\n                    min: input_def.min,\n                    max: input_def.max,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Hidden field */\n            _fieldHidden: function(input_def) {\n                return new Ui.Hidden({\n                    id: \"field-\" + input_def.id,\n                    info: input_def.info\n                });\n            },\n\n            /** Boolean field */\n            _fieldBoolean: function(input_def) {\n                return new Ui.RadioButton.View({\n                    id: \"field-\" + input_def.id,\n                    data: [\n                        { label: \"Yes\", value: \"true\" },\n                        { label: \"No\", value: \"false\" }\n                    ],\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Color picker field */\n            _fieldColor: function(input_def) {\n                return new ColorPicker({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Library dataset field */\n            _fieldLibrary: function(input_def) {\n                return new SelectLibrary.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** FTP file field */\n            _fieldFtp: function(input_def) {\n                return new SelectFtp.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** GenomeSpace file select field\n         */\n            _fieldGenomeSpace: function(input_def) {\n                var self = this;\n                return new SelectGenomeSpace.View({\n                    id: \"field-\" + input_def.id,\n                    onchange: function() {\n                        self.app.trigger(\"change\");\n                    }\n                });\n            },\n\n            /** Upload file field */\n            _fieldUpload: function(input_def) {\n                return new Ui.Upload({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            }\n        });\n    }\n);\n"]}