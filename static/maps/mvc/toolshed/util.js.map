{"version":3,"sources":["mvc/toolshed/util.js"],"names":["define","searchShed","request","response","that","this","shed_url","Galaxy","root","$","get","base_url","term","tool_shed_url","result_list","shedParser","data","jsondata","hits","each","record","label","result","value","results","repository","name","repo_owner_username","addToQueue","metadata","id","key","queued_repos","JSON","substr","localStorage","length","repo_queue","queue_length","changeset_revision","Object","repositories","parse","stringify","queueLength","hasOwnProperty","keys"],"mappings":"aAAAA,UAAW,WA+DP,OACIC,WA/Da,SAASC,EAASC,GADhC,IAAIC,EAAAC,KACHJ,EAAaI,KAAAC,SACTF,EAAJG,OAAAC,KAAA,uBACAC,EAAAC,IACIC,GAEAA,KAAAA,EACEC,KAAMV,cAAcW,GAElB,SAAIC,GACJX,IAAAA,EAAAC,EAAAW,WAAAC,GALRb,EAAAW,MA4DAC,WAhDWE,SAASC,GACpBT,IAAEU,KACED,EAAIE,EAASF,KAoBjB,OAnBIT,EAAAU,KAAAD,EAAIG,SACAD,GAKJ,IAAIE,EAASJ,EAAEK,GACfC,EATJJ,EAAAK,WAAAC,KAWOF,OAdXJ,EAAAK,WAAAE,oBASY,KAQRC,EAAaH,WAAbG,YACIC,GAAShB,MAATO,EAAAK,WAAJK,GAA8CT,MAAAA,GAC1CQ,EAAAA,KAAShB,KAKTkB,GA2BJH,WAnBII,SAAeC,GAClB,KAAAJ,EAAAhB,cAAAqB,QAAA,KACDF,EAAaD,cAAbF,EAAAhB,cAAAqB,OACAC,EAlBJN,EAAAhB,cAAAuB,OAAA,IAsBI,IAAID,EACAN,EAAIQ,cACJ,IACAR,EAAOS,cAHX,IAKIT,EAAAU,mBACHP,EAAA,IAAAQ,OAPLL,aAAAM,eANQT,EAAeC,KAAKS,MAAMP,aAAaM,eAiB3CxC,EAAYA,GAAAA,EACZc,aAAYA,aAFTkB,KAAAU,UAAAX,IAIHY,YAJJ,WA/DJ,GAAAT,aAAAU,eAAA,gBAAA,CAuDY,IAAIR,EAAaJ,KAAKS,MAAMP,aAAaM,cAEzC,OADmBD,OAAOM,KAAKT,GAAYD,OAG3C,OAAO","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["define([], function() {\n    var searchShed = function(request, response) {\n        var that = this;\n        var shed_url = this.shed_url;\n        var base_url = Galaxy.root + \"api/tool_shed/search\";\n        $.get(\n            base_url,\n            { term: request.term, tool_shed_url: shed_url },\n            function(data) {\n                var result_list = that.shedParser(data);\n                response(result_list);\n            }\n        );\n    };\n\n    var shedParser = function(jsondata) {\n        var results = [];\n        var hits = jsondata.hits;\n        $.each(hits, function(hit) {\n            var record = hits[hit];\n            var label =\n                record.repository.name +\n                \" by \" +\n                record.repository.repo_owner_username +\n                \": \" +\n                record.repository.description;\n            var result = { value: record.repository.id, label: label };\n            results.push(result);\n        });\n        return results;\n    };\n\n    var addToQueue = function(metadata) {\n        if (metadata.tool_shed_url.substr(-1) == \"/\") {\n            metadata.tool_shed_url = metadata.tool_shed_url.substr(\n                0,\n                metadata.tool_shed_url.length - 1\n            );\n        }\n        var key =\n            metadata.tool_shed_url +\n            \"|\" +\n            metadata.repository_id +\n            \"|\" +\n            metadata.changeset_revision;\n        var queued_repos = new Object();\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        queued_repos[key] = metadata;\n        localStorage.repositories = JSON.stringify(queued_repos);\n    };\n\n    var queueLength = function() {\n        if (localStorage.hasOwnProperty(\"repositories\")) {\n            var repo_queue = JSON.parse(localStorage.repositories);\n            var queue_length = Object.keys(repo_queue).length;\n            return queue_length;\n        } else {\n            return 0;\n        }\n    };\n\n    return {\n        searchShed: searchShed,\n        shedParser: shedParser,\n        addToQueue: addToQueue,\n        queueLength: queueLength\n    };\n});\n"]}