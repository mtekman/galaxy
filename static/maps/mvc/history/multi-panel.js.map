{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["define","logNamespace","HistoryViewColumn","tagName","className","id","historyCopyDialog","ERROR_MODAL","baseMVC","ajaxQueue","Backbone","View","extend","LoggableMixin","_logNamespace","HISTORY_VIEW_EDIT","model","purgeAllowed","this","get","initialize","options","setUpListeners","column","_","isUndefined","trigger","panel","setUpPanelListeners","HistoryViewEdit","listenTo","defaults","dragItems","$el","once","viewLeft","columnRight","columnLeft","viewRight","rendered","speed","view","$","off","html","inView","offset","left","width","$panel","render","history","undefined","data","modelData","toJSON","controlsRightTemplate","template","css","renderPanel","setUpBehaviors","setElement","setAsCurrent","isCurrentHistory","currentHistory","_delete","controlsLeftTemplate","undelete","_l","purge","join","copy","$list","before","_renderDropTargetHelp","events","click .switch-to.btn","click .delete-history","done","click .undelete-history","click .purge-history","confirm","addClass","borderWidth","collection","columnMap","columnOptions","historySearch","datasetSearch","variable","multipanel","stopListening","setUpCollectionListeners","createColumns","hdaQueue","toString","MultiPanelColumns","sort","log","columnWidth","$scrollContainer","scrollLeft","controlsHeight","setCurrentHistory","NamedAjaxQueue","oldCurrentColumn","height","newCurrentColumn","setCollection","histories","on","fetchMore","removeColumn","HISTORY_MODEL","HistoryCollection","clear","addModels","models","message","isArray","addColumn","xhr","status","error","errorHandler","add","all-fetched","_postFetchAll","ajaxErrorModal","apply","addAsCurrentColumn","set-as-current","change:deleted change:purged","create","renderColumns","fetchData","remove","currentHistoryId","setUpColumnListeners","_recalcFirstColumnHeight","handleDeletedHistory","newColumn","queueHdaFetch","includeDeleted","widthToRemove","readyState","isString","title","errorModal","badGatewayErrorModal","currentColumnDropTargetOff","_ajaxErrorHandler","contents","_dropData","name","fn","current","toCopy","forEach","createColumn","queue","responses","columnMapLength","Object","config","length","sortedFilteredColumns","filters","sortedColumns","sorted","columnGap","fadeOut","isNumber","sortedAndFiltered","allFetched","numExisting","$middle","children","delegateEvents","preventStackWidthAdj","JSON","parse","numColumns","dataTransfer","currentColumnDropTargetOn","ev","droptarget:drop","filter","json","contentsShown","values","fetchOptions","ids","currentPage","fetchPage","fetchCurrentPage","start","content","fetch","keys","running","msg","index","every","map","call","window","Galaxy","toggleOptionsPopover","_clickToggleDeletedHistories","location","fxSpeed","mainTemplate","_clickToggleDeletedDatasets","toggleHiddenDatasets","self","empty","append","loadingIndicatorTemplate","checkColumnsInView","orderKey","setOrder","currentHistoryModel","fetchFirst","silent","_calcMiddleWidth","columns","i","appendTo","onsearch","searchFor","matchesAll","storage","allExpanded","details","searchInput","renderItems","renderInfo","searchItems","_renderEmptyMessage","text","checkForEndOfScroll","click .create-new.btn","click #include-deleted","click .order .set-order","_moreOptionsPopover","click #toggle-hidden","optionsPopoverTemplate","root","toggleDeletedHistories","currentTarget","is","popover","$firstColumn","show","controlHeight","middleHeight","toggleDeletedDatasets","viewport","_viewport","toggleShowDeleted","vp","_clickToggleHiddenDatasets","END_PADDING","delay","parent","toggleShowHidden","_chooseOrder","currentColumn","dataDropped","slice","unshift","dropTarget","_scrollLeft","val","placeholder","update_time","fetchAll","onclear","onfirstsearch","queueHdaFetchDetails","progress","curr","total","deferred","clearSearch","resize","debouncedInView","debounce","scroll","container","placement","first","find","$outerMiddle","right","columnsInView","dropTargetOn","prototype","dataDrop","orderDescriptions","update_time-asc","name-dsc","size","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["define(\n    [\n        \"utils/localization\",\n        \"mvc/history/history-model\",\n        \"mvc/history/history-view-edit\",\n        \"mvc/history/copy-dialog\",\n        \"mvc/ui/error-modal\",\n        \"mvc/base-mvc\",\n        \"utils/ajax-queue\",\n        \"ui/mode-button\",\n        \"ui/search-input\"\n    ],\n    function(\n        _l,\n        HISTORY_MODEL,\n        HISTORY_VIEW_EDIT,\n        historyCopyDialog,\n        ERROR_MODAL,\n        baseMVC,\n        ajaxQueue\n    ) {\n        \"use strict\";\n\n        var logNamespace = \"history\";\n        /* ==============================================================================\nTODO:\n\n============================================================================== */\n        /** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\n        var HistoryViewColumn = Backbone.View\n            .extend(baseMVC.LoggableMixin)\n            .extend({\n                _logNamespace: logNamespace,\n\n                tagName: \"div\",\n                className: \"history-column flex-column flex-row-container\",\n                id: function id() {\n                    if (!this.model) {\n                        return \"\";\n                    }\n                    return \"history-column-\" + this.model.get(\"id\");\n                },\n\n                // ------------------------------------------------------------------------ set up\n                /** set up passed-in panel (if any) and listeners */\n                initialize: function initialize(options) {\n                    options = options || {};\n                    this.purgeAllowed = !_.isUndefined(options.purgeAllowed)\n                        ? options.purgeAllowed\n                        : false;\n                    this.panel = options.panel || this.createPanel(options);\n\n                    this.setUpListeners();\n                },\n\n                /** create a history panel for this column */\n                createPanel: function createPanel(panelOptions) {\n                    return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n                        _.defaults(panelOptions, {\n                            model: this.model,\n                            // non-current panels should set their hdas to draggable\n                            purgeAllowed: this.purgeAllowed,\n                            dragItems: true,\n                            $scrollContainer: function() {\n                                return this.$el;\n                            }\n                        })\n                    );\n                },\n\n                /** set up reflexive listeners */\n                setUpListeners: function setUpListeners() {\n                    var column = this;\n                    //this.log( 'setUpListeners', this );\n                    this.once(\"rendered\", function() {\n                        column.trigger(\"rendered:initial\", column);\n                    });\n                    this.setUpPanelListeners();\n                },\n\n                /** set listeners needed for panel */\n                setUpPanelListeners: function setUpPanelListeners() {\n                    var column = this;\n                    this.listenTo(\n                        this.panel,\n                        {\n                            //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                            // assumes panel will take the longest to render\n                            rendered: function() {\n                                column.trigger(\"rendered\", column);\n                            },\n                            // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                            // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                            // TODO: hack\n                            \"view:expanded view:rendered\": function(view) {\n                                view.$(\".rerun-btn\").off();\n                            }\n                        },\n                        this\n                    );\n                },\n\n                /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n                inView: function(viewLeft, viewRight) {\n                    var columnLeft = this.$el.offset().left,\n                        columnRight = columnLeft + this.$el.width();\n                    if (columnRight < viewLeft) {\n                        return false;\n                    }\n                    if (columnLeft > viewRight) {\n                        return false;\n                    }\n                    return true;\n                },\n\n                /** shortcut to the panel */\n                $panel: function $panel() {\n                    return this.$(\".history-panel\");\n                },\n\n                // ------------------------------------------------------------------------ render\n                /** render ths column, its panel, and set up plugins */\n                render: function render(speed) {\n                    speed = speed !== undefined ? speed : \"fast\";\n                    //this.log( this + '.render', this.$el, this.el );\n                    //TODO: not needed\n                    var modelData = this.model ? this.model.toJSON() : {};\n                    this.$el.html(this.template(modelData));\n                    this.renderPanel(speed);\n                    // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n                    this.panel.$el.css(\"display\", \"flex\");\n                    // if model and not children\n                    // template\n                    // render controls\n                    this.setUpBehaviors();\n                    // add panel\n                    return this;\n                },\n\n                /** set up plugins */\n                setUpBehaviors: function setUpBehaviors() {\n                    //this.log( 'setUpBehaviors:', this );\n                    //var column = this;\n                    // on panel size change, ...\n                },\n\n                /** column body template with inner div for panel based on data (model json) */\n                template: function template(data) {\n                    data = _.extend(data || {}, {\n                        isCurrentHistory: this.currentHistory\n                    });\n                    return $(\n                        [\n                            '<div class=\"panel-controls clear flex-row\">',\n                            this.controlsLeftTemplate({\n                                history: data,\n                                view: this\n                            }),\n                            //'<button class=\"btn btn-default\">Herp</button>',\n                            this.controlsRightTemplate({\n                                history: data,\n                                view: this\n                            }),\n                            \"</div>\",\n                            '<div class=\"inner flex-row flex-column-container\">',\n                            '<div id=\"history-',\n                            data.id,\n                            '\" class=\"history-column history-panel flex-column\"></div>',\n                            \"</div>\"\n                        ].join(\"\")\n                    );\n                },\n\n                /** render the panel contained in the column using speed for fx speed */\n                renderPanel: function renderPanel(speed) {\n                    speed = speed !== undefined ? speed : \"fast\";\n                    this.panel.setElement(this.$panel()).render(speed);\n                    if (this.currentHistory) {\n                        this.panel\n                            .$list()\n                            .before(this.panel._renderDropTargetHelp());\n                    }\n                    return this;\n                },\n\n                // ------------------------------------------------------------------------ behaviors and events\n                /** event map */\n                events: {\n                    // will make this the current history\n                    \"click .switch-to.btn\": function() {\n                        this.model.setAsCurrent();\n                    },\n                    //TODO: remove boiler plate from next 3\n                    \"click .delete-history\": function() {\n                        var column = this;\n                        this.model._delete().done(function(data) {\n                            column.render();\n                        });\n                    },\n                    \"click .undelete-history\": function() {\n                        var column = this;\n                        this.model.undelete().done(function(data) {\n                            column.render();\n                        });\n                    },\n                    \"click .purge-history\": function() {\n                        if (\n                            confirm(\n                                _l(\n                                    \"This will permanently remove the data. Are you sure?\"\n                                )\n                            )\n                        ) {\n                            var column = this;\n                            this.model.purge().done(function(data) {\n                                column.render();\n                            });\n                        }\n                    },\n                    // will copy this history and make the copy the current history\n                    \"click .copy-history\": \"copy\"\n                },\n\n                // ------------------------------------------------------------------------ non-current controls\n                /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n                copy: function copy() {\n                    historyCopyDialog(this.model);\n                },\n\n                // ------------------------------------------------------------------------ templates\n                /** controls template displaying controls above the panel based on this.currentHistory */\n                controlsLeftTemplate: _.template(\n                    [\n                        '<div class=\"pull-left\">',\n                        \"<% if( data.history.isCurrentHistory ){ %>\",\n                        '<strong class=\"current-label\">',\n                        _l(\"Current History\"),\n                        \"</strong>\",\n                        \"<% } else { %>\",\n                        '<button class=\"switch-to btn btn-default\">',\n                        _l(\"Switch to\"),\n                        \"</button>\",\n                        \"<% } %>\",\n                        \"</div>\"\n                    ].join(\"\"),\n                    { variable: \"data\" }\n                ),\n\n                /** controls template displaying controls above the panel based on this.currentHistory */\n                controlsRightTemplate: _.template(\n                    [\n                        '<div class=\"pull-right\">',\n                        \"<% if( !data.history.purged ){ %>\",\n                        '<div class=\"panel-menu btn-group\">',\n                        '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                        \"<% if( !data.history.deleted ){ %>\",\n                        '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n                        _l(\"Copy\"),\n                        \"</a></li>\",\n                        //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n                        //    _l( 'Publish' ),\n                        //'</a></li>',\n                        '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n                        _l(\"Delete\"),\n                        \"</a></li>\",\n                        \"<% } else /* if is deleted */ { %>\",\n                        '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n                        _l(\"Undelete\"),\n                        \"</a></li>\",\n                        \"<% } %>\",\n                        \"<% if( data.view.purgeAllowed ){ %>\",\n                        '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n                        _l(\"Purge\"),\n                        \"</a></li>\",\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"</div>\",\n                        \"<% } %>\",\n                        \"</div>\"\n                    ].join(\"\"),\n                    { variable: \"data\" }\n                ),\n\n                // ------------------------------------------------------------------------ misc\n                /** String rep */\n                toString: function() {\n                    return (\n                        \"HistoryViewColumn(\" +\n                        (this.panel ? this.panel : \"\") +\n                        \")\"\n                    );\n                }\n            });\n\n        //==============================================================================\n        /** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\n        var MultiPanelColumns = Backbone.View\n            .extend(baseMVC.LoggableMixin)\n            .extend({\n                _logNamespace: logNamespace,\n\n                className: \"multi-panel-history\",\n\n                // ------------------------------------------------------------------------ set up\n                /** Set up internals, history collection, and columns to display the history */\n                initialize: function initialize(options) {\n                    options = options || {};\n                    this.log(this + \".init\", options);\n\n                    // add the className here (since we gen. pass the el in options)\n                    this.$el.addClass(this.className);\n\n                    // --- instance vars\n                    //TODO: move these to some defaults\n                    this.options = {\n                        columnWidth: 312,\n                        borderWidth: 1,\n                        columnGap: 8,\n                        headerHeight: 29,\n                        footerHeight: 0,\n                        controlsHeight: 20\n                    };\n\n                    /** how many histories to get when fetching a new batch/page */\n                    this.perPage = options.perPage || 10;\n\n                    /** named ajax queue for loading hdas */\n                    this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n                    // --- set up models, sub-views, and listeners\n                    /** the original unfiltered and unordered collection of histories */\n                    this.collection = null;\n                    /** model id to column map */\n                    this.columnMap = {};\n                    /** model id to column map */\n                    this.columnOptions = options.columnOptions || {};\n\n                    /** what to search for within all histories */\n                    this.historySearch = null;\n                    /** what to search for within all datasets */\n                    this.datasetSearch = null;\n\n                    this.setCollection(options.histories);\n                    this.setUpListeners();\n                },\n\n                /** Set up reflexive listeners */\n                setUpListeners: function setUpListeners() {\n                    var multipanel = this;\n                    //multipanel.log( 'setUpListeners', multipanel );\n                    this.on(\"end-of-scroll\", function() {\n                        multipanel.collection.fetchMore();\n                    });\n                },\n\n                // ------------------------------------------------------------------------ collection\n                /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n                setCollection: function setCollection(collection) {\n                    // console.log( 'setCollection:', collection );\n                    this.stopListening(this.collection);\n\n                    this.collection =\n                        collection || new HISTORY_MODEL.HistoryCollection();\n                    this.setUpCollectionListeners();\n\n                    this.createColumns();\n                    this.hdaQueue.clear();\n\n                    this.trigger(\"new-collection\", this);\n                    return this;\n                },\n\n                /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n                addModels: function addModels(models, collection, options) {\n                    // console.log( 'addModels:', models, collection, options );\n                    options = options || {};\n                    var multipanel = this;\n                    models = _.isArray(models) ? models : [models];\n                    models.forEach(function(model) {\n                        multipanel.addColumn(model, false);\n                        // if this is from a fetch, sort will be called and it will call render\n                    });\n                    return this;\n                },\n\n                /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n                setUpCollectionListeners: function() {\n                    var multipanel = this;\n                    multipanel.listenTo(multipanel.collection, {\n                        // handle ajax errors from the collection\n                        error: multipanel.errorHandler,\n                        // add multiple models\n                        add: multipanel.addModels,\n                        // when all the histories a user has have been fetched\n                        \"all-fetched\": multipanel._postFetchAll,\n                        // handle addition of histories, triggered by column copy and create new\n                        \"new-current\": multipanel.addAsCurrentColumn,\n                        // handle setting a history as current, triggered by history.setAsCurrent\n                        \"set-as-current\": multipanel.setCurrentHistory,\n                        // handle deleting a history (depends on whether panels is including deleted or not)\n                        \"change:deleted change:purged\":\n                            multipanel.handleDeletedHistory,\n                        // re-render columns after a sort\n                        sort: function() {\n                            multipanel.renderColumns(0);\n                        }\n                    });\n                },\n\n                _postFetchAll: function(fetchData) {\n                    // console.log( '_postFetchAll' );\n                    this.$(\".histories-loading-indicator\").remove();\n                    // when new histories is fetched and the indicator is not required,\n                    // the panel will jump slightly left - totally aesthetic but jarring\n                    // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n                    if (!this.historySearch) {\n                        var $scrollContainer = this.$(\".outer-middle\");\n                        $scrollContainer.scrollLeft(\n                            $scrollContainer.scrollLeft() + 24\n                        );\n                    }\n                },\n\n                /** Re-render and set currentHistoryId to reflect a new current history */\n                setCurrentHistory: function setCurrentHistory(history) {\n                    this.log(\"setCurrentHistory:\", history);\n                    var oldCurrentColumn = _.findWhere(this.columnMap, {\n                        currentHistory: true\n                    });\n                    if (oldCurrentColumn) {\n                        oldCurrentColumn.currentHistory = false;\n                        oldCurrentColumn.$el.height(\"\");\n                    }\n\n                    var newCurrentColumn = this.columnMap[\n                        this.collection.currentHistoryId\n                    ];\n                    newCurrentColumn.currentHistory = true;\n                    this.collection.sort();\n                    this._recalcFirstColumnHeight();\n                    return newCurrentColumn;\n                },\n\n                /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n                handleDeletedHistory: function handleDeletedHistory(history) {\n                    if (history.get(\"deleted\") || history.get(\"purged\")) {\n                        this.log(\n                            \"handleDeletedHistory\",\n                            this.collection.includeDeleted,\n                            history\n                        );\n                        var multipanel = this,\n                            column = multipanel.columnMap[history.id];\n                        if (!column) {\n                            return;\n                        }\n\n                        // if it's the current column, create a new, empty history as the new current\n                        if (\n                            column.model.id === this.collection.currentHistoryId\n                        ) {\n                            //TODO: figuring out the order of async here is tricky\n                            //  - for now let the user handle the two step process\n                            //multipanel.collection.create().done( function(){\n                            //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                            //});\n                        } else if (!multipanel.collection.includeDeleted) {\n                            multipanel.removeColumn(column);\n                        }\n                    }\n                },\n\n                // ........................................................................ error handling\n                /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n                errorHandler: function(model, xhr, options) {\n                    // interrupted ajax or no connection\n                    if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                        // return ERROR_MODAL.offlineErrorModal();\n                        // fail silently\n                        return;\n                    }\n                    // otherwise, leave something to report in the console\n                    this.error(model, xhr, options);\n                    // and feedback to a modal\n                    // if sent two strings (and possibly details as 'options'), use those as message and title\n                    if (_.isString(model) && _.isString(xhr)) {\n                        var message = model;\n                        var title = xhr;\n                        return ERROR_MODAL.errorModal(message, title, options);\n                    }\n                    // bad gateway\n                    // TODO: possibly to global handler\n                    if (xhr && xhr.status === 502) {\n                        return ERROR_MODAL.badGatewayErrorModal();\n                    }\n                    return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n                },\n\n                /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n                _ajaxErrorHandler: function() {\n                    ERROR_MODAL.ajaxErrorModal.apply(\n                        null,\n                        _.toArray(arguments)\n                    );\n                },\n\n                /** create a new history and set it to current */\n                create: function(ev) {\n                    return this.collection.create({ current: true });\n                },\n\n                // ------------------------------------------------------------------------ columns\n                /** create columns from collection */\n                createColumns: function createColumns(models, columnOptions) {\n                    columnOptions = columnOptions || this.options.columnOptions;\n                    var multipanel = this;\n                    // clear column map\n                    // TODO: make cummulative\n                    multipanel.columnMap = {};\n                    multipanel.collection.each(function(model, i) {\n                        var column = multipanel.createColumn(\n                            model,\n                            columnOptions\n                        );\n                        multipanel.columnMap[model.id] = column;\n                    });\n                },\n\n                /** create a column and its panel and set up any listeners to them */\n                createColumn: function createColumn(history, options) {\n                    // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n                    options = _.extend({}, options, {\n                        model: history,\n                        purgeAllowed: Galaxy.config.allow_user_dataset_purge\n                    });\n                    var column = new HistoryViewColumn(options);\n                    if (history.id === this.collection.currentHistoryId) {\n                        column.currentHistory = true;\n                    }\n                    this.setUpColumnListeners(column);\n                    if (this.datasetSearch) {\n                        column.panel.searchItems(this.datasetSearch);\n                        this.queueHdaFetchDetails(column);\n                    }\n                    return column;\n                },\n\n                /** add a new column for history and render all columns if render is true */\n                addColumn: function add(history, render) {\n                    // console.debug( 'adding column for:', history, render );\n                    render = render !== undefined ? render : true;\n                    var newColumn = this.createColumn(history);\n                    this.columnMap[history.id] = newColumn;\n                    if (render) {\n                        this.renderColumns();\n                    }\n                    return newColumn;\n                },\n\n                /** add a new column for history and make it the current history/column */\n                addAsCurrentColumn: function add(history, collection, options) {\n                    //this.log( 'adding current column for:', history );\n                    var multipanel = this,\n                        newColumn = this.addColumn(history, false);\n                    this.setCurrentHistory(history);\n                    newColumn.once(\"rendered\", function() {\n                        multipanel.queueHdaFetch(newColumn);\n                    });\n                    return newColumn;\n                },\n\n                /** remove the given column, it's listeners, and optionally render */\n                removeColumn: function remove(column, render) {\n                    render = render !== undefined ? render : true;\n                    this.log(\"removeColumn\", column);\n                    if (!column) {\n                        return;\n                    }\n                    var multipanel = this,\n                        widthToRemove =\n                            this.options.columnWidth + this.options.columnGap;\n                    column.$el.fadeOut(\"fast\", function() {\n                        if (render) {\n                            $(this).remove();\n                            multipanel\n                                .$(\".middle\")\n                                .width(\n                                    multipanel.$(\".middle\").width() -\n                                        widthToRemove\n                                );\n                            multipanel.checkColumnsInView();\n                            multipanel._recalcFirstColumnHeight();\n                        }\n\n                        //TODO: to freeColumn (where Columns have freePanel)\n                        multipanel.stopListening(column.panel);\n                        multipanel.stopListening(column);\n                        delete multipanel.columnMap[column.model.id];\n                        column.remove();\n                    });\n                },\n\n                /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n                setUpColumnListeners: function setUpColumnListeners(column) {\n                    var multipanel = this;\n                    multipanel.listenTo(column, {\n                        //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n                        \"in-view\": multipanel.queueHdaFetch\n                    });\n\n                    multipanel.listenTo(column.panel, {\n                        //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n                        \"view:draggable:dragstart\": function(\n                            ev,\n                            view,\n                            panel,\n                            column\n                        ) {\n                            multipanel._dropData = JSON.parse(\n                                ev.dataTransfer.getData(\"text\")\n                            );\n                            multipanel.currentColumnDropTargetOn();\n                        },\n                        \"view:draggable:dragend\": function(\n                            ev,\n                            view,\n                            panel,\n                            column\n                        ) {\n                            multipanel._dropData = null;\n                            multipanel.currentColumnDropTargetOff();\n                        },\n                        \"droptarget:drop\": function(ev, data, panel) {\n                            //note: bad copy sources fail silently\n                            var toCopy = multipanel._dropData.filter(function(\n                                json\n                            ) {\n                                return panel.model.contents.isCopyable(json);\n                            });\n                            multipanel._dropData = null;\n\n                            var queue = new ajaxQueue.NamedAjaxQueue();\n                            if (panel.model.contents.currentPage !== 0) {\n                                queue.add({\n                                    name: \"fetch-front-page\",\n                                    fn: function() {\n                                        return panel.model.contents.fetchPage(\n                                            0\n                                        );\n                                    }\n                                });\n                            }\n                            // need to reverse to better match expected order\n                            // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                            toCopy.reverse().forEach(function(content) {\n                                queue.add({\n                                    name: \"copy-\" + content.id,\n                                    fn: function() {\n                                        return panel.model.contents.copy(\n                                            content\n                                        );\n                                    }\n                                });\n                            });\n                            queue.start();\n                            queue.done(function(responses) {\n                                panel.model.fetch();\n                            });\n                        }\n                    });\n                },\n\n                /** conv. fn to count the columns in columnMap */\n                columnMapLength: function() {\n                    return Object.keys(this.columnMap).length;\n                },\n\n                /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n                sortedFilteredColumns: function(filters) {\n                    filters = filters || this.filters;\n                    if (!filters || !filters.length) {\n                        return this.sortedColumns();\n                    }\n                    var multipanel = this;\n                    return multipanel\n                        .sortedColumns()\n                        .filter(function(column, index) {\n                            var filtered =\n                                column.currentHistory ||\n                                _.every(\n                                    filters.map(function(filter) {\n                                        return filter.call(column);\n                                    })\n                                );\n                            return filtered;\n                        });\n                },\n\n                /** return array of Columns sorted to match the collection */\n                sortedColumns: function() {\n                    var multipanel = this;\n                    var sorted = this.collection.map(function(history, index) {\n                        return multipanel.columnMap[history.id];\n                    });\n                    return sorted;\n                },\n\n                // ------------------------------------------------------------------------ render\n                /** Render this view, columns, and set up view plugins */\n                render: function render(speed) {\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    var multipanel = this;\n\n                    multipanel.log(multipanel + \".render\");\n                    multipanel.$el.html(multipanel.mainTemplate(multipanel));\n                    multipanel.renderColumns(speed);\n\n                    // set the columns to full height allowed and set up behaviors for thie multipanel\n                    multipanel.setUpBehaviors();\n                    //TODO: wrong - has to wait for columns to render\n                    //  - create a column listener that fires this when all columns are rendered\n                    multipanel.trigger(\"rendered\", multipanel);\n                    return multipanel;\n                },\n\n                /** Render the columns and panels */\n                renderColumns: function renderColumns(speed) {\n                    speed = _.isNumber(speed) ? speed : this.fxSpeed;\n                    // console.log( 'renderColumns:', speed );\n                    // render columns and track the total number rendered, firing an event when all are rendered\n                    var self = this;\n                    var sortedAndFiltered = self.sortedFilteredColumns();\n                    // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n                    var $middle = self.$(\".middle\").empty();\n\n                    self._addColumns(sortedAndFiltered, speed);\n                    if (!self.collection.allFetched) {\n                        $middle.append(self.loadingIndicatorTemplate(self));\n                    }\n                    //TODO: sorta - at least their fx queue has started the re-rendering\n                    self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n                    if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n                    } else {\n                        // check for in-view, hda lazy-loading if so\n                        self.checkColumnsInView();\n                        // the first, current column has position: fixed and flex css will not apply - adjust height manually\n                        self._recalcFirstColumnHeight();\n                    }\n                    return sortedAndFiltered;\n                },\n\n                _addColumns: function(columns, speed) {\n                    speed = _.isNumber(speed) ? speed : this.fxSpeed;\n                    var $middle = this.$(\".middle\");\n\n                    var numExisting = $middle.children(\".history-column\")\n                        .length;\n                    $middle.width(\n                        this._calcMiddleWidth(columns.length + numExisting)\n                    );\n\n                    columns.forEach(function(column, i) {\n                        column\n                            .delegateEvents()\n                            .render(speed)\n                            .$el.appendTo($middle);\n                    });\n                },\n\n                _calcMiddleWidth: function(numColumns) {\n                    var preventStackWidthAdj = 16;\n                    return (\n                        numColumns *\n                            (this.options.columnWidth +\n                                this.options.columnGap) +\n                        // last column gap\n                        this.options.columnGap +\n                        // the amount that safely prevents stacking of columns when adding a new one\n                        preventStackWidthAdj\n                    );\n                },\n\n                //TODO: combine the following two more sensibly\n                //TODO: could have HistoryContents.haveDetails return false\n                //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n                /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n                queueHdaFetch: function queueHdaFetch(column) {\n                    // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n                    var contents = column.model.contents;\n                    // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n                    // if the history model says it has hdas but none are present, queue an ajax req for them\n                    if (contents.length === 0 && column.model.contentsShown()) {\n                        var fetchOptions = { silent: true };\n                        var ids = _.values(\n                            contents.storage.allExpanded()\n                        ).join();\n                        if (ids) {\n                            fetchOptions.details = ids;\n                        }\n                        // this uses a 'named' queue so that duplicate requests are ignored\n                        this.hdaQueue.add({\n                            name: column.model.id,\n                            fn: function() {\n                                return contents\n                                    .fetchCurrentPage(fetchOptions)\n                                    .done(function() {\n                                        column.panel.renderItems();\n                                    });\n                            }\n                        });\n                        // the queue is re-used, so if it's not processing requests - start it again\n                        if (!this.hdaQueue.running) {\n                            this.hdaQueue.start();\n                        }\n                    }\n                },\n\n                /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n                queueHdaFetchDetails: function(column) {\n                    var contents = column.model.contents;\n                    var needsContentsLoaded =\n                        contents.length === 0 && column.model.contentsShown();\n                    if (needsContentsLoaded || !contents.haveDetails()) {\n                        // this uses a 'named' queue so that duplicate requests are ignored\n                        this.hdaQueue.add({\n                            name: column.model.id,\n                            fn: function() {\n                                return contents\n                                    .progressivelyFetchDetails()\n                                    .done(function() {\n                                        column.panel._renderEmptyMessage();\n                                    });\n                            }\n                        });\n                        // the queue is re-used, so if it's not processing requests - start it again\n                        if (!this.hdaQueue.running) {\n                            this.hdaQueue.start();\n                        }\n                    }\n                },\n\n                /** put a text msg in the header */\n                renderInfo: function(msg) {\n                    return this.$(\".header .header-info\").text(msg);\n                },\n\n                // ------------------------------------------------------------------------ events/behaviors\n                events: {\n                    // will move to the server root (gen. Analyze data)\n                    \"click .done.btn\": \"close\",\n                    // creates a new empty history and makes it current\n                    \"click .create-new.btn\": \"create\",\n                    \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n                    // these change the collection and column sort order\n                    \"click .order .set-order\": \"_chooseOrder\",\n                    \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n                    \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n                    //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n                },\n\n                close: function(ev) {\n                    //TODO: switch to pushState/router\n                    window.location = Galaxy.root;\n                },\n\n                _clickToggleDeletedHistories: function(ev) {\n                    this.toggleDeletedHistories(\n                        $(ev.currentTarget).is(\":checked\")\n                    );\n                    this.toggleOptionsPopover();\n                },\n                /** Include deleted histories in the collection */\n                toggleDeletedHistories: function(show) {\n                    if (show) {\n                        window.location =\n                            Galaxy.root +\n                            \"history/view_multiple?include_deleted_histories=True\";\n                    } else {\n                        window.location = Galaxy.root + \"history/view_multiple\";\n                    }\n                },\n\n                _clickToggleDeletedDatasets: function(ev) {\n                    this.toggleDeletedDatasets(\n                        $(ev.currentTarget).is(\":checked\")\n                    );\n                    this.toggleOptionsPopover();\n                },\n                toggleDeletedDatasets: function(show) {\n                    show = show !== undefined ? show : false;\n                    var multipanel = this;\n                    multipanel\n                        .sortedFilteredColumns()\n                        .forEach(function(column, i) {\n                            _.delay(function() {\n                                column.panel.toggleShowDeleted(show, false);\n                            }, i * 200);\n                        });\n                },\n\n                _clickToggleHiddenDatasets: function(ev) {\n                    this.toggleHiddenDatasets(\n                        $(ev.currentTarget).is(\":checked\")\n                    );\n                    this.toggleOptionsPopover();\n                },\n                toggleHiddenDatasets: function(show) {\n                    show = show !== undefined ? show : false;\n                    var multipanel = this;\n                    multipanel\n                        .sortedFilteredColumns()\n                        .forEach(function(column, i) {\n                            _.delay(function() {\n                                column.panel.toggleShowHidden(show, false);\n                            }, i * 200);\n                        });\n                },\n\n                /** change the collection order and re-fetch when the drop down in the options menu is changed */\n                _chooseOrder: function(ev) {\n                    var multipanel = this,\n                        collection = multipanel.collection,\n                        orderKey = $(ev.currentTarget).data(\"order\");\n                    // set the sort order text also\n                    multipanel\n                        .$(\".current-order\")\n                        .text(multipanel.orderDescriptions[orderKey]);\n                    multipanel.toggleOptionsPopover();\n                    // set the order and re-fetch using the new order, saving the current history as the first\n                    collection.setOrder(orderKey);\n                    var currentHistoryModel = collection.slice(0, 1);\n                    collection.fetchFirst().done(function() {\n                        collection.unshift(currentHistoryModel, {\n                            silent: true\n                        });\n                        multipanel.createColumns();\n                        // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n                        multipanel.hdaQueue.clear();\n                        multipanel.render();\n                    });\n                    multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n                    //TODO: check allFetched and do not reset if so - just sort instead\n                },\n\n                /** scroll the column container right or left */\n                _scrollLeft: function(val) {\n                    val = _.isNumber(val) ? val : 0;\n                    this.$(\".outer-middle\").scrollLeft(val);\n                },\n\n                /** Set up any view plugins */\n                setUpBehaviors: function() {\n                    var multipanel = this;\n                    multipanel._moreOptionsPopover();\n\n                    // input to search histories\n                    multipanel.$(\"#search-histories\").searchInput({\n                        name: \"search-histories\",\n                        placeholder: _l(\"search histories\"),\n\n                        onfirstsearch: function(searchFor) {\n                            multipanel\n                                .$(\"#search-histories\")\n                                .searchInput(\"toggle-loading\");\n                            multipanel.renderInfo(\n                                _l(\"loading all histories for search\")\n                            );\n                            multipanel.collection.fetchAll().done(function() {\n                                multipanel\n                                    .$(\"#search-histories\")\n                                    .searchInput(\"toggle-loading\");\n                                multipanel.renderInfo(\"\");\n                            });\n                        },\n                        onsearch: function(searchFor) {\n                            multipanel.historySearch = searchFor;\n                            multipanel.filters = [\n                                function() {\n                                    return this.model.matchesAll(\n                                        multipanel.historySearch\n                                    );\n                                }\n                            ];\n                            multipanel.renderColumns(0);\n                        },\n                        onclear: function(searchFor) {\n                            multipanel.historySearch = null;\n                            //TODO: remove specifically not just reset\n                            multipanel.filters = [];\n                            multipanel.renderColumns(0);\n                        }\n                    });\n\n                    // input to search datasets\n                    multipanel.$(\"#search-datasets\").searchInput({\n                        name: \"search-datasets\",\n                        placeholder: _l(\"search all datasets\"),\n\n                        onfirstsearch: function(searchFor) {\n                            multipanel.hdaQueue.clear();\n                            multipanel\n                                .$(\"#search-datasets\")\n                                .searchInput(\"toggle-loading\");\n                            multipanel.datasetSearch = searchFor;\n                            multipanel\n                                .sortedFilteredColumns()\n                                .forEach(function(column) {\n                                    column.panel.searchItems(searchFor);\n                                    // load details for them that need\n                                    multipanel.queueHdaFetchDetails(column);\n                                });\n                            multipanel.hdaQueue.progress(function(progress) {\n                                multipanel.renderInfo(\n                                    [\n                                        _l(\"searching\"),\n                                        progress.curr + 1,\n                                        _l(\"of\"),\n                                        progress.total\n                                    ].join(\" \")\n                                );\n                            });\n                            multipanel.hdaQueue.deferred.done(function() {\n                                multipanel.renderInfo(\"\");\n                                multipanel\n                                    .$(\"#search-datasets\")\n                                    .searchInput(\"toggle-loading\");\n                            });\n                        },\n                        onsearch: function(searchFor) {\n                            multipanel.datasetSearch = searchFor;\n                            multipanel\n                                .sortedFilteredColumns()\n                                .forEach(function(column) {\n                                    column.panel.searchItems(searchFor);\n                                });\n                        },\n                        onclear: function(searchFor) {\n                            multipanel.datasetSearch = null;\n                            multipanel\n                                .sortedFilteredColumns()\n                                .forEach(function(column) {\n                                    column.panel.clearSearch();\n                                });\n                        }\n                    });\n\n                    // resize first (fixed position) column on page resize\n                    $(window).resize(function() {\n                        multipanel._recalcFirstColumnHeight();\n                    });\n\n                    // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n                    //TODO:?? might be able to simplify and not use pub-sub\n                    var debouncedInView = _.debounce(\n                        function _debouncedInner() {\n                            var viewport = multipanel._viewport();\n                            multipanel.checkColumnsInView(viewport);\n                            multipanel.checkForEndOfScroll(viewport);\n                        },\n                        100\n                    );\n                    this.$(\".middle\")\n                        .parent()\n                        .scroll(debouncedInView);\n                },\n\n                /** create the options popover */\n                _moreOptionsPopover: function() {\n                    return this.$(\".open-more-options.btn\").popover({\n                        container: \".header\",\n                        placement: \"bottom\",\n                        html: true,\n                        content: $(this.optionsPopoverTemplate(this))\n                    });\n                },\n\n                /** change the collection order and re-fetch when the drop down in the options menu is changed */\n                toggleOptionsPopover: function(ev) {\n                    // hide seems broken in our version\n                    this.$(\".open-more-options.btn\").popover(\"toggle\");\n                },\n\n                /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n                _recalcFirstColumnHeight: function() {\n                    var $firstColumn = this.$(\".history-column\").first(),\n                        middleHeight = this.$(\".middle\").height(),\n                        controlHeight = $firstColumn\n                            .find(\".panel-controls\")\n                            .height();\n                    $firstColumn\n                        .height(middleHeight)\n                        .find(\".inner\")\n                        .height(middleHeight - controlHeight);\n                },\n\n                /** Get the left and right pixel coords of the middle element */\n                _viewport: function() {\n                    var $outerMiddle = this.$(\".middle\").parent(),\n                        viewLeft = $outerMiddle.offset().left,\n                        width = $outerMiddle.width();\n                    return {\n                        left: viewLeft,\n                        right: viewLeft + width\n                    };\n                },\n\n                /** returns the columns currently in the viewport */\n                columnsInView: function(viewport) {\n                    //TODO: uses offset which is render intensive\n                    //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n                    var vp = viewport || this._viewport();\n                    return this.sortedFilteredColumns().filter(function(\n                        column\n                    ) {\n                        return (\n                            column.currentHistory ||\n                            column.inView(vp.left, vp.right)\n                        );\n                    });\n                },\n\n                //TODO: sortByInView - return cols in view, then others\n                /** trigger in-view from columns in-view */\n                checkColumnsInView: function() {\n                    //TODO: assbackward - don't fire from the column, fire from here and listen from here\n                    this.columnsInView().forEach(function(column) {\n                        column.trigger(\"in-view\", column);\n                    });\n                },\n\n                /** is the middle, horizontally scrolling section scrolled fully to the right? */\n                checkForEndOfScroll: function(viewport) {\n                    viewport = viewport || this._viewport();\n                    var END_PADDING = 16,\n                        $middle = this.$(\".middle\"),\n                        scrollRight =\n                            $middle.parent().scrollLeft() + viewport.right;\n                    if (scrollRight >= $middle.width() - END_PADDING) {\n                        this.trigger(\"end-of-scroll\");\n                    }\n                },\n\n                /** Show and enable the current columns drop target */\n                currentColumnDropTargetOn: function() {\n                    var currentColumn = this.columnMap[\n                        this.collection.currentHistoryId\n                    ];\n                    if (!currentColumn) {\n                        return;\n                    }\n                    //TODO: fix this - shouldn't need monkeypatch\n                    currentColumn.panel.dataDropped = function(data) {};\n                    currentColumn.panel.dropTargetOn();\n                },\n\n                /** Hide and disable the current columns drop target */\n                currentColumnDropTargetOff: function() {\n                    var currentColumn = this.columnMap[\n                        this.collection.currentHistoryId\n                    ];\n                    if (!currentColumn) {\n                        return;\n                    }\n                    currentColumn.panel.dataDropped =\n                        HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n                    // slight override of dropTargetOff to not erase drop-target-help\n                    currentColumn.panel.dropTarget = false;\n                    currentColumn.panel.$(\".history-drop-target\").remove();\n                },\n\n                // ------------------------------------------------------------------------ misc\n                /** String rep */\n                toString: function() {\n                    return (\n                        \"MultiPanelColumns(\" +\n                        (this.columns ? this.columns.length : 0) +\n                        \")\"\n                    );\n                },\n\n                // ------------------------------------------------------------------------ templates\n                mainTemplate: _.template(\n                    [\n                        '<div class=\"header flex-column-container\">',\n                        '<div class=\"control-column control-column-left flex-column\">',\n                        '<button class=\"done btn btn-default\" tabindex=\"1\">',\n                        _l(\"Done\"),\n                        \"</button>\",\n                        '<div id=\"search-histories\" class=\"search-control\"></div>',\n                        '<div id=\"search-datasets\" class=\"search-control\"></div>',\n                        '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n                        '<span class=\"fa fa-ellipsis-h\"></span>',\n                        \"</a>\",\n                        \"</div>\",\n                        // feedback\n                        '<div class=\"control-column control-column-center flex-column\">',\n                        '<div class=\"header-info\">',\n                        \"</div>\",\n                        \"</div>\",\n                        '<div class=\"control-column control-column-right flex-column\">',\n                        '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n                        _l(\"Create new\"),\n                        \"</button> \",\n                        \"</div>\",\n                        \"</div>\",\n                        // middle - where the columns go\n                        '<div class=\"outer-middle flex-row flex-row-container\">',\n                        '<div class=\"middle flex-column-container flex-row\"></div>',\n                        \"</div>\",\n                        // footer\n                        '<div class=\"footer flex-column-container\"></div>'\n                    ].join(\"\"),\n                    { variable: \"view\" }\n                ),\n\n                loadingIndicatorTemplate: _.template(\n                    [\n                        '<div class=\"histories-loading-indicator\">',\n                        '<span class=\"fa fa-spin fa-spinner\"></span>',\n                        _l(\"Loading histories\"),\n                        \"...\",\n                        \"</div>\"\n                    ].join(\"\"),\n                    { variable: \"view\" }\n                ),\n\n                orderDescriptions: {\n                    update_time: _l(\"most recent first\"),\n                    \"update_time-asc\": _l(\"least recent first\"),\n                    name: _l(\"name, a to z\"),\n                    \"name-dsc\": _l(\"name, z to a\"),\n                    size: _l(\"size, large to small\"),\n                    \"size-asc\": _l(\"size, small to large\")\n                },\n\n                optionsPopoverTemplate: _.template(\n                    [\n                        '<div class=\"more-options\">',\n                        '<div class=\"order btn-group\">',\n                        '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                        _l(\"Order histories by\") + \" \",\n                        '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n                        '<span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n                        '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n                        \"<%- text %>\",\n                        \"</a></li>\",\n                        \"<% }); %>\",\n                        \"</ul>\",\n                        \"</div>\",\n\n                        '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n                        '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n                        _l(\"Include deleted histories\"),\n                        \"</label></div>\",\n\n                        \"<hr />\",\n\n                        '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n                        _l(\"Include deleted datasets\"),\n                        \"</label></div>\",\n                        '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n                        _l(\"Include hidden datasets\"),\n                        \"</label></div>\",\n                        \"</div>\"\n                    ].join(\"\"),\n                    { variable: \"view\" }\n                )\n            });\n\n        //==============================================================================\n        return {\n            MultiPanelColumns: MultiPanelColumns\n        };\n    }\n);\n"]}