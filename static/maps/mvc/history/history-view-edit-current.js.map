{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["define","HISTORY_MODEL","HISTORY_VIEW_EDIT","BASE_MVC","_l","tagsEditorShown","SessionStorageModel","extend","annotationEditorShown","scrollPosition","toString","storageKey","JSON","stringify","this","toJSON","HistoryViewPrefs","_super","HistoryViewEdit","CurrentHistoryView","className","prototype","attributes","HDCAViewClass","foldoutStyle","_","panelStack","currentContentId","join","initialize","panel","preferences","id","pick","loadHistory","defaults","call","trigger","historyId","_setUpListeners","createNewHistory","on","set","setModel","url","Galaxy","root","switchToHistory","user","isAnonymous","_setUpModelListeners","$","when","once","_setUpCollectionListeners","collection","removeItemView","$where","model","render","_debouncedScrollCaptureHandler","$scrollContainer","listenTo","change:nice_size change:size","arguments","_renderQuotaMessage","$newRender","checkForUpdates","tagsEditor","storage","includeHidden","annotationEditor","toggle","_setUpBehaviors","debounce","$el","is","scrollTop","off","$whereTo","_attachItems","_buildNewRender","addItemView","find","length","_collapseDrilldownPanel","_setUpItemViewListeners","templates","quotaMsg","prependTo","_renderTags","_expandDrilldownPanel","drilldown","get","setCurrentContent","addClass","hidden","view","viewFromModelId","_renderAnnotation","$controls","parentName","delegateEvents","_swapNewRender","clone","events","delay","upload","pos","scrollTo","$toolMenu","_setCurrentContentById","hdaId","report_error","options","rerun","show_params","connectToQuotaMeter","v","quotaMeter","collapsed:drilldown","showQuotaMessage","removeClass","$msg","push","slideDown","add","$list","hide","hideQuotaMessage","appendTo","pop","show","self","ev","click .get-data-link","jQuery","parent","click","listenToGalaxy","contents","galaxy","data","pathToMatch","fullpath","useToURLRegexMap","display","edit","regex","use","result","match","center-panel:load","isOverQuota","clearMessages","$target","isUndefined","$messages","children","currentTarget","not","fadeOut","fxSpeed","remove","slideUp","unhideHidden","confirm","_filterAndUpdate","visible","deleted","purged","done","renderItems","deleteHidden","quotaMsgTemplate","wrapTemplate"],"mappings":"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","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["define(\n    [\n        \"mvc/history/history-model\",\n        \"mvc/history/history-view-edit\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(HISTORY_MODEL, HISTORY_VIEW_EDIT, BASE_MVC, _l) {\n        \"use strict\";\n\n        // ============================================================================\n        /** session storage for history panel preferences (and to maintain state)\n */\n        var HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n            /** @lends HistoryViewPrefs.prototype */ {\n                defaults: {\n                    /** should the tags editor be shown or hidden initially? */\n                    tagsEditorShown: false,\n                    /** should the annotation editor be shown or hidden initially? */\n                    annotationEditorShown: false,\n                    ///** what is the currently focused content (dataset or collection) in the current history?\n                    // *      (the history panel will highlight and scroll to the focused content view)\n                    // */\n                    //focusedContentId : null\n                    /** Current scroll position */\n                    scrollPosition: 0\n                },\n                toString: function() {\n                    return (\n                        \"HistoryViewPrefs(\" +\n                        JSON.stringify(this.toJSON()) +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        /** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\n        HistoryViewPrefs.storageKey = function storageKey() {\n            return \"history-panel\";\n        };\n\n        /* =============================================================================\nTODO:\n\n============================================================================= */\n        var _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n        // used in root/index.mako\n        /** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\n        var CurrentHistoryView = _super.extend(\n            /** @lends CurrentHistoryView.prototype */ {\n                className:\n                    _super.prototype.className + \" current-history-panel\",\n\n                /** override to use drilldown (and not foldout) for how collections are displayed */\n                HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n                    foldoutStyle: \"drilldown\"\n                }),\n\n                emptyMsg: [\n                    _l(\"This history is empty\"),\n                    \". \",\n                    _l(\"You can \"),\n                    '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n                    _l(\"load your own data\"),\n                    \"</a>\",\n                    _l(\" or \"),\n                    '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n                    _l(\"get data from an external source\"),\n                    \"</a>\"\n                ].join(\"\"),\n\n                // ......................................................................... SET UP\n                /** Set up the view, set up storage, bind listeners to HistoryContents events */\n                initialize: function(attributes) {\n                    attributes = attributes || {};\n\n                    // ---- persistent preferences\n                    /** maintain state / preferences over page loads */\n                    this.preferences = new HistoryViewPrefs(\n                        _.extend(\n                            {\n                                id: HistoryViewPrefs.storageKey()\n                            },\n                            _.pick(\n                                attributes,\n                                _.keys(HistoryViewPrefs.prototype.defaults)\n                            )\n                        )\n                    );\n\n                    _super.prototype.initialize.call(this, attributes);\n\n                    /** sub-views that will overlay this panel (collections) */\n                    this.panelStack = [];\n\n                    /** id of currently focused content */\n                    this.currentContentId = attributes.currentContentId || null;\n                    //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n                },\n\n                /** Override to cache the current scroll position with a listener */\n                _setUpListeners: function() {\n                    _super.prototype._setUpListeners.call(this);\n\n                    var panel = this;\n                    // reset scroll position when there's a new history\n                    this.on(\"new-model\", function() {\n                        panel.preferences.set(\"scrollPosition\", 0);\n                    });\n                },\n\n                // ------------------------------------------------------------------------ loading history/item models\n                // TODO: next three more appropriate moved to the app level\n                /** (re-)loads the user's current history & contents w/ details */\n                loadCurrentHistory: function() {\n                    return this.loadHistory(null, {\n                        url: Galaxy.root + \"history/current_history_json\"\n                    });\n                },\n\n                /** loads a history & contents w/ details and makes them the current history */\n                switchToHistory: function(historyId, attributes) {\n                    if (Galaxy.user.isAnonymous()) {\n                        this.trigger(\n                            \"error\",\n                            _l(\"You must be logged in to switch histories\"),\n                            _l(\"Anonymous user\")\n                        );\n                        return $.when();\n                    }\n                    return this.loadHistory(historyId, {\n                        url:\n                            Galaxy.root +\n                            \"history/set_as_current?id=\" +\n                            historyId\n                    });\n                },\n\n                /** creates a new history on the server and sets it as the user's current history */\n                createNewHistory: function(attributes) {\n                    if (Galaxy.user.isAnonymous()) {\n                        this.trigger(\n                            \"error\",\n                            _l(\"You must be logged in to create histories\"),\n                            _l(\"Anonymous user\")\n                        );\n                        return $.when();\n                    }\n                    return this.loadHistory(null, {\n                        url: Galaxy.root + \"history/create_new_current\"\n                    });\n                },\n\n                /** release/free/shutdown old models and set up panel for new models */\n                setModel: function(model, attributes, render) {\n                    _super.prototype.setModel.call(\n                        this,\n                        model,\n                        attributes,\n                        render\n                    );\n                    if (this.model && this.model.id) {\n                        this.log(\"checking for updates\");\n                        this.model.checkForUpdates();\n                    }\n                    return this;\n                },\n\n                // ------------------------------------------------------------------------ history/content event listening\n                /** listening for history events */\n                _setUpModelListeners: function() {\n                    _super.prototype._setUpModelListeners.call(this);\n                    // re-broadcast any model change events so that listeners don't have to re-bind to each history\n                    return this.listenTo(this.model, {\n                        \"change:nice_size change:size\": function() {\n                            this.trigger(\n                                \"history-size-change\",\n                                this,\n                                this.model,\n                                arguments\n                            );\n                        },\n                        \"change:id\": function() {\n                            this.once(\"loading-done\", function() {\n                                this.model.checkForUpdates();\n                            });\n                        }\n                    });\n                },\n\n                /** listening for collection events */\n                _setUpCollectionListeners: function() {\n                    _super.prototype._setUpCollectionListeners.call(this);\n                    // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n                    //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n                    this.listenTo(this.collection, \"state:ready\", function(\n                        model,\n                        newState,\n                        oldState\n                    ) {\n                        if (\n                            !model.get(\"visible\") &&\n                            !this.collection.storage.includeHidden()\n                        ) {\n                            this.removeItemView(model);\n                        }\n                    });\n                },\n\n                // ------------------------------------------------------------------------ panel rendering\n                /** override to add a handler to capture the scroll position when the parent scrolls */\n                _setUpBehaviors: function($where) {\n                    $where = $where || this.$el;\n                    // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n                    // we need to call this in _setUpBehaviors which is called after render since the $el\n                    // may not be attached to $el.parent and $scrollContainer() may not work\n                    var panel = this;\n                    _super.prototype._setUpBehaviors.call(panel, $where);\n\n                    // cache the handler to remove and re-add so we don't pile up the handlers\n                    if (!this._debouncedScrollCaptureHandler) {\n                        this._debouncedScrollCaptureHandler = _.debounce(\n                            function scrollCapture() {\n                                // cache the scroll position (only if visible)\n                                if (panel.$el.is(\":visible\")) {\n                                    panel.preferences.set(\n                                        \"scrollPosition\",\n                                        $(this).scrollTop()\n                                    );\n                                }\n                            },\n                            40\n                        );\n                    }\n\n                    panel\n                        .$scrollContainer($where)\n                        .off(\"scroll\", this._debouncedScrollCaptureHandler)\n                        .on(\"scroll\", this._debouncedScrollCaptureHandler);\n                    return panel;\n                },\n\n                /** In this override, handle null models and move the search input to the top */\n                _buildNewRender: function() {\n                    if (!this.model) {\n                        return $();\n                    }\n                    var $newRender = _super.prototype._buildNewRender.call(\n                        this\n                    );\n                    $newRender\n                        .find(\".search\")\n                        .prependTo($newRender.find(\"> .controls\"));\n                    this._renderQuotaMessage($newRender);\n                    return $newRender;\n                },\n\n                /** render the message displayed when a user is over quota and can't run jobs */\n                _renderQuotaMessage: function($whereTo) {\n                    $whereTo = $whereTo || this.$el;\n                    return $(this.templates.quotaMsg({}, this)).prependTo(\n                        $whereTo.find(\".messages\")\n                    );\n                },\n\n                /** In this override, get and set current panel preferences when editor is used */\n                _renderTags: function($where) {\n                    var panel = this;\n                    // render tags and show/hide based on preferences\n                    _super.prototype._renderTags.call(panel, $where);\n                    if (panel.preferences.get(\"tagsEditorShown\")) {\n                        panel.tagsEditor.toggle(true);\n                    }\n                    // store preference when shown or hidden\n                    panel.listenTo(\n                        panel.tagsEditor,\n                        \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                        function(tagsEditor) {\n                            panel.preferences.set(\n                                \"tagsEditorShown\",\n                                tagsEditor.hidden\n                            );\n                        }\n                    );\n                },\n\n                /** In this override, get and set current panel preferences when editor is used */\n                _renderAnnotation: function($where) {\n                    var panel = this;\n                    // render annotation and show/hide based on preferences\n                    _super.prototype._renderAnnotation.call(panel, $where);\n                    if (panel.preferences.get(\"annotationEditorShown\")) {\n                        panel.annotationEditor.toggle(true);\n                    }\n                    // store preference when shown or hidden\n                    panel.listenTo(\n                        panel.annotationEditor,\n                        \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                        function(annotationEditor) {\n                            panel.preferences.set(\n                                \"annotationEditorShown\",\n                                annotationEditor.hidden\n                            );\n                        }\n                    );\n                },\n\n                /** Override to scroll to cached position (in prefs) after swapping */\n                _swapNewRender: function($newRender) {\n                    _super.prototype._swapNewRender.call(this, $newRender);\n                    var panel = this;\n                    _.delay(function() {\n                        var pos = panel.preferences.get(\"scrollPosition\");\n                        if (pos) {\n                            panel.scrollTo(pos, 0);\n                        }\n                    }, 10);\n                    //TODO: is this enough of a delay on larger histories?\n\n                    return this;\n                },\n\n                // ------------------------------------------------------------------------ sub-views\n                /** Override to add the current-content highlight class to currentContentId's view */\n                _attachItems: function($whereTo) {\n                    _super.prototype._attachItems.call(this, $whereTo);\n                    var panel = this;\n                    if (panel.currentContentId) {\n                        panel._setCurrentContentById(panel.currentContentId);\n                    }\n                    return this;\n                },\n\n                /** Override to remove any drill down panels */\n                addItemView: function(model, collection, options) {\n                    var view = _super.prototype.addItemView.call(\n                        this,\n                        model,\n                        collection,\n                        options\n                    );\n                    if (!view) {\n                        return view;\n                    }\n                    if (this.panelStack.length) {\n                        return this._collapseDrilldownPanel();\n                    }\n                    return view;\n                },\n\n                // ------------------------------------------------------------------------ collection sub-views\n                /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    _super.prototype._setUpItemViewListeners.call(panel, view);\n                    // use pub-sub to: handle drilldown expansion and collapse\n                    return panel.listenTo(view, {\n                        \"expanded:drilldown\": function(v, drilldown) {\n                            this._expandDrilldownPanel(drilldown);\n                        },\n                        \"collapsed:drilldown\": function(v, drilldown) {\n                            this._collapseDrilldownPanel(drilldown);\n                        }\n                    });\n                },\n\n                /** display 'current content': add a visible highlight and store the id of a content item */\n                setCurrentContent: function(view) {\n                    this.$(\".history-content.current-content\").removeClass(\n                        \"current-content\"\n                    );\n                    if (view) {\n                        view.$el.addClass(\"current-content\");\n                        this.currentContentId = view.model.id;\n                    } else {\n                        this.currentContentId = null;\n                    }\n                },\n\n                /** find the view with the id and then call setCurrentContent on it */\n                _setCurrentContentById: function(id) {\n                    var view = this.viewFromModelId(id) || null;\n                    this.setCurrentContent(view);\n                },\n\n                /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n                _expandDrilldownPanel: function(drilldown) {\n                    this.panelStack.push(drilldown);\n                    // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n                    this.$controls()\n                        .add(this.$list())\n                        .hide();\n                    drilldown.parentName = this.model.get(\"name\");\n                    drilldown\n                        .delegateEvents()\n                        .render()\n                        .$el.appendTo(this.$el);\n                },\n\n                /** Handle drilldown close by freeing the panel and re-rendering this panel */\n                _collapseDrilldownPanel: function(drilldown) {\n                    this.panelStack.pop();\n                    //TODO: MEM: free the panel\n                    this.$controls()\n                        .add(this.$list())\n                        .show();\n                },\n\n                // ........................................................................ panel events\n                /** event map */\n                events: _.extend(_.clone(_super.prototype.events), {\n                    // the two links in the empty message\n                    \"click .uploader-link\": function(ev) {\n                        Galaxy.upload.show(ev);\n                    },\n                    \"click .get-data-link\": function(ev) {\n                        var $toolMenu = $(\".toolMenuContainer\");\n                        $toolMenu.parent().scrollTop(0);\n                        $toolMenu.find('span:contains(\"Get Data\")').click();\n                    }\n                }),\n\n                // ........................................................................ external objects/MVC\n                listenToGalaxy: function(galaxy) {\n                    this.listenTo(galaxy, {\n                        // when the galaxy_main iframe is loaded with a new page,\n                        // compare the url to the following list and if there's a match\n                        // pull the id from url and indicate in the history view that\n                        // the dataset with that id is the 'current'ly active dataset\n                        \"center-frame:load\": function(data) {\n                            var pathToMatch = data.fullpath;\n                            var hdaId = null;\n                            var useToURLRegexMap = {\n                                display: /datasets\\/([a-f0-9]+)\\/display/,\n                                edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                                report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                                rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                                show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                                // no great way to do this here? (leave it in the dataset event handlers above?)\n                                // 'visualization' : 'visualization',\n                            };\n                            _.find(useToURLRegexMap, function(regex, use) {\n                                // grab the more specific match result (1), save, and use it as the find flag\n                                hdaId = _.result(pathToMatch.match(regex), 1);\n                                return hdaId;\n                            });\n                            // need to type mangle to go from web route to history contents\n                            this._setCurrentContentById(\n                                hdaId ? \"dataset-\" + hdaId : null\n                            );\n                        },\n                        // when the center panel is given a new view, clear the current indicator\n                        \"center-panel:load\": function(view) {\n                            this._setCurrentContentById();\n                        }\n                    });\n                },\n\n                //TODO: remove quota meter from panel and remove this\n                /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n                connectToQuotaMeter: function(quotaMeter) {\n                    if (!quotaMeter) {\n                        return this;\n                    }\n                    // show/hide the 'over quota message' in the history when the meter tells it to\n                    this.listenTo(\n                        quotaMeter,\n                        \"quota:over\",\n                        this.showQuotaMessage\n                    );\n                    this.listenTo(\n                        quotaMeter,\n                        \"quota:under\",\n                        this.hideQuotaMessage\n                    );\n\n                    // having to add this to handle re-render of hview while overquota (the above do not fire)\n                    this.on(\"rendered rendered:initial\", function() {\n                        if (quotaMeter && quotaMeter.isOverQuota()) {\n                            this.showQuotaMessage();\n                        }\n                    });\n                    return this;\n                },\n\n                /** Override to preserve the quota message */\n                clearMessages: function(ev) {\n                    var $target = !_.isUndefined(ev)\n                        ? $(ev.currentTarget)\n                        : this.$messages().children('[class$=\"message\"]');\n                    $target = $target.not(\".quota-message\");\n                    $target.fadeOut(this.fxSpeed, function() {\n                        $(this).remove();\n                    });\n                    return this;\n                },\n\n                /** Show the over quota message (which happens to be in the history panel).\n     */\n                showQuotaMessage: function() {\n                    var $msg = this.$(\".quota-message\");\n                    if ($msg.is(\":hidden\")) {\n                        $msg.slideDown(this.fxSpeed);\n                    }\n                },\n\n                /** Hide the over quota message (which happens to be in the history panel).\n     */\n                hideQuotaMessage: function() {\n                    var $msg = this.$(\".quota-message\");\n                    if (!$msg.is(\":hidden\")) {\n                        $msg.slideUp(this.fxSpeed);\n                    }\n                },\n\n                // ........................................................................ options menu\n                //TODO: remove to batch\n                /** unhide any hidden datasets */\n                unhideHidden: function() {\n                    var self = this;\n                    if (confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                        // get all hidden, regardless of deleted/purged\n                        return self.model.contents\n                            ._filterAndUpdate(\n                                { visible: false, deleted: \"\", purged: \"\" },\n                                { visible: true }\n                            )\n                            .done(function() {\n                                // TODO: would be better to render these as they're unhidden instead of all at once\n                                if (!self.model.contents.includeHidden) {\n                                    self.renderItems();\n                                }\n                            });\n                    }\n                    return jQuery.when();\n                },\n\n                /** delete any hidden datasets */\n                deleteHidden: function() {\n                    var self = this;\n                    if (confirm(_l(\"Really delete all hidden datasets?\"))) {\n                        return self.model.contents._filterAndUpdate(\n                            // get all hidden, regardless of deleted/purged\n                            { visible: false, deleted: \"\", purged: \"\" },\n                            // both delete *and* unhide them\n                            { deleted: true, visible: true }\n                        );\n                    }\n                    return jQuery.when();\n                },\n\n                /** Return a string rep of the history */\n                toString: function() {\n                    return (\n                        \"CurrentHistoryView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        //------------------------------------------------------------------------------ TEMPLATES\n        CurrentHistoryView.prototype.templates = (function() {\n            var quotaMsgTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"quota-message errormessage\">',\n                    _l(\"You are over your disk quota\"),\n                    \". \",\n                    _l(\n                        \"Tool execution is on hold until your disk usage drops below your allocated quota\"\n                    ),\n                    \".\",\n                    \"</div>\"\n                ],\n                \"history\"\n            );\n            return _.extend(_.clone(_super.prototype.templates), {\n                quotaMsg: quotaMsgTemplate\n            });\n        })();\n\n        //==============================================================================\n        return {\n            CurrentHistoryView: CurrentHistoryView\n        };\n    }\n);\n"]}