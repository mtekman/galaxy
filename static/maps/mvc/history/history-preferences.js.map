{"version":3,"sources":["mvc/history/history-preferences.js"],"names":["define","BASE_MVC","HistoryPrefs","SessionStorageModel","extend","defaults","show_deleted","expandedIds","addExpanded","model","this","get","current","id","removeExpanded","isExpanded","contentId","_","result","allExpanded","values","clearExpanded","set","includeDeleted","val","isUndefined","includeHidden","toString","storageKeyPrefix","historyStorageKey","historyId","Error","clearAll","key","sessionStorage","indexOf","removeItem"],"mappings":"aAAAA,QAAQ,gBAAiB,SAASC,GAC9B,IAIAC,EAAAD,EAAAE,oBAAAC,QAGIC,UAEIA,eACIC,cAAA,EACAC,aAFM,GAQVC,YAAa,SAASC,GAAtBD,IAAAA,EAAaE,KAAAC,IAAA,eACTC,EAAAH,EAAAI,IAAAJ,EAAAE,IAAA,MACIC,KAAAA,KAAU,cAASA,IAM3BE,eAAgB,SAASL,GADzB,IAAAG,EAAAF,KAAAC,IAAA,sBACAG,EAAgBL,EAAAI,IACRD,KAAAA,KAAU,cAASA,IAnBMG,WAAA,SAAAC,GAyB7B,OAAOC,EAAEC,OAAOR,KAAKC,IAAI,eAAgBK,GAAW,IAzBvBG,YAAA,WA6B7B,OAAOF,EAAEG,OAAOV,KAAKC,IAAI,iBA7BIU,cAAA,WAiC7BX,KAAKY,IAAI,mBAjCoBC,eAAA,SAAAC,GAwCzB,OAHJP,EAAAQ,YAAAD,IACAd,KAAAY,IAAA,eAAAE,GAESF,KAAIX,IAAA,iBAxCgBe,cAAA,SAAAF,GAgDzB,OAHRE,EAAeD,YAAAD,IACXd,KAAAY,IAAA,cAAAE,GAESF,KAAIX,IAAA,gBAhDgBgB,SAAA,WAsD7B,MAAO,gBAAkBjB,KAAKG,GAAK,OAKvCe,iBAAA,WAGAC,kBAAA,SAAAC,GACAD,IAAAA,EACSC,MAAL,IAAgBC,MACN,kDAITD,GAED,OAAO5B,EAAa0B,iBAAmBE,GAMnCjB,IAAAA,SAAIX,GADR,OAAA,IAAAA,GAnBRW,GAAAX,EAAA2B,kBAAAC,MA2BYE,SAAIC,SAAY/B,GACZgC,IAAAA,IAAAA,KAAAA,eACH,IAAAD,EAAAE,QAAAjC,EAAA0B,mBACJM,eAAAE,WAAAH,MA/FjB,OAsGQ/B,aAAcA","file":"../../../scripts/mvc/history/history-preferences.js","sourcesContent":["define([\"mvc/base-mvc\"], function(BASE_MVC) {\n    \"use strict\";\n\n    var logNamespace = \"history\";\n\n    // ============================================================================\n    /** session storage for individual history preferences */\n    var HistoryPrefs = BASE_MVC.SessionStorageModel.extend(\n        /** @lends HistoryPrefs.prototype */ {\n            //TODO:?? move to user prefs?\n            defaults: {\n                //TODO:?? expandedIds to array?\n                expandedIds: {},\n                show_deleted: false,\n                show_hidden: false\n            },\n\n            /** add an hda id to the hash of expanded hdas */\n            addExpanded: function(model) {\n                //TODO: use type_id and not model\n                var current = this.get(\"expandedIds\");\n                current[model.id] = model.get(\"id\");\n                this.save(\"expandedIds\", current);\n            },\n\n            /** remove an hda id from the hash of expanded hdas */\n            removeExpanded: function(model) {\n                var current = this.get(\"expandedIds\");\n                delete current[model.id];\n                this.save(\"expandedIds\", current);\n            },\n\n            isExpanded: function(contentId) {\n                return _.result(this.get(\"expandedIds\"), contentId, false);\n            },\n\n            allExpanded: function() {\n                return _.values(this.get(\"expandedIds\"));\n            },\n\n            clearExpanded: function() {\n                this.set(\"expandedIds\", {});\n            },\n\n            includeDeleted: function(val) {\n                // moving the invocation here so other components don't need to know the key\n                // TODO: change this key later\n                if (!_.isUndefined(val)) {\n                    this.set(\"show_deleted\", val);\n                }\n                return this.get(\"show_deleted\");\n            },\n\n            includeHidden: function(val) {\n                // TODO: change this key later\n                if (!_.isUndefined(val)) {\n                    this.set(\"show_hidden\", val);\n                }\n                return this.get(\"show_hidden\");\n            },\n\n            toString: function() {\n                return \"HistoryPrefs(\" + this.id + \")\";\n            }\n        },\n        {\n            // ........................................................................ class vars\n            // class lvl for access w/o instantiation\n            storageKeyPrefix: \"history:\",\n\n            /** key string to store each histories settings under */\n            historyStorageKey: function historyStorageKey(historyId) {\n                if (!historyId) {\n                    throw new Error(\n                        \"HistoryPrefs.historyStorageKey needs valid id: \" +\n                            historyId\n                    );\n                }\n                // single point of change\n                return HistoryPrefs.storageKeyPrefix + historyId;\n            },\n\n            /** return the existing storage for the history with the given id (or create one if it doesn't exist) */\n            get: function get(historyId) {\n                return new HistoryPrefs({\n                    id: HistoryPrefs.historyStorageKey(historyId)\n                });\n            },\n\n            /** clear all history related items in sessionStorage */\n            clearAll: function clearAll(historyId) {\n                for (var key in sessionStorage) {\n                    if (key.indexOf(HistoryPrefs.storageKeyPrefix) === 0) {\n                        sessionStorage.removeItem(key);\n                    }\n                }\n            }\n        }\n    );\n\n    //==============================================================================\n    return {\n        HistoryPrefs: HistoryPrefs\n    };\n});\n"]}