{"version":3,"sources":["mvc/history/history-content-model.js"],"names":["define","STATES","_l","HistoryContentMixin","defaults","history_id","history_content_type","hid","visible","idAttribute","hidden","this","get","isVisible","includeDeleted","includeHidden","urlRoot","url","root","hide","options","save","jQuery","when","unhide","toString","join"],"mappings":"aAAAA,QAAQ,qBAAsB,eAAgB,sBAAuB,SACjEC,EADJD,EAKIE,GA6FA,OACIC,qBAtFIC,UAEAC,WAAA,KAEAC,qBAAA,KAEAC,IAAA,KATkBC,SAAA,GAiBtBC,YAAa,UAKTC,OAAA,WAtBkB,OAAAC,KAAAC,IAAA,YAgClBC,UAAIA,SAAYC,EAAhBC,GACA,IACIF,GAACC,EAYT,OARKA,IACIC,KAAAA,IAAAA,aAAuBH,KAAIA,IAAA,YAE/BC,GAAA,GAzCiBE,GAAAJ,KAAAC,IAAA,aAwCdC,GAAY,GAMpBA,GAMIG,QAAIC,OACAC,KAAKF,iBAFbC,IAAK,WAWL,IAAAA,EACMN,KAAAK,QACEL,KAACC,IAAA,cACD,aACHD,KAAAC,IAAA,wBACD,KAnEkBD,KAAAC,IAAA,MAqEtB,OAAAK,GAIKE,KAAA,SAAAC,GACD,OAAAT,KAAOC,IAAKS,WAGhBV,KAAAU,MAAAb,SAAA,GAAAY,GA7EsBE,OAAAC,QAoFrBC,OAAA,SAAAJ,GApFL,OAAAT,KAAAC,IAAA,WAwEmBU,OAAOC,OAgBnBZ,KAAAU,MAAAb,SAAA,GAAAY,IAVHK,SAAU,WACN,OACId,KAAKC,IAAI,WACTD,KAAKC,IAAI,OACTD,KAAKC,IAAI,SACXc,KAAK","file":"../../../scripts/mvc/history/history-content-model.js","sourcesContent":["define([\"mvc/dataset/states\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    STATES,\n    BASE_MVC,\n    _l\n) {\n    \"use strict\";\n\n    //==============================================================================\n    /** @class Mixin for HistoryContents content (HDAs, HDCAs).\n */\n    var HistoryContentMixin = {\n        /** default attributes for a model */\n        defaults: {\n            /** parent (containing) history */\n            history_id: null,\n            /** some content_type (HistoryContents can contain mixed model classes) */\n            history_content_type: null,\n            /** indicating when/what order the content was generated in the context of the history */\n            hid: null,\n            /** whether the user wants the content shown (visible) */\n            visible: true\n        },\n\n        // ........................................................................ mixed content element\n        // In order to be part of a MIXED bbone collection, we can't rely on the id\n        //  (which may collide btwn models of different classes)\n        // Instead, use type_id which prefixes the history_content_type so the bbone collection can differentiate\n        idAttribute: \"type_id\",\n\n        // ........................................................................ common queries\n        /** the more common alias of visible */\n        hidden: function() {\n            return !this.get(\"visible\");\n        },\n\n        //TODO: remove\n        /** based on includeDeleted, includeHidden (gen. from the container control),\n     *      would this ds show in the list of ds's?\n     *  @param {Boolean} includeDeleted are we showing deleted hdas?\n     *  @param {Boolean} includeHidden are we showing hidden hdas?\n     */\n        isVisible: function(includeDeleted, includeHidden) {\n            var isVisible = true;\n            if (\n                !includeDeleted &&\n                (this.get(\"deleted\") || this.get(\"purged\"))\n            ) {\n                isVisible = false;\n            }\n            if (!includeHidden && !this.get(\"visible\")) {\n                isVisible = false;\n            }\n            return isVisible;\n        },\n\n        // ........................................................................ ajax\n        //TODO?: these are probably better done on the leaf classes\n        /** history content goes through the 'api/histories' API */\n        urlRoot: Galaxy.root + \"api/histories/\",\n\n        /** full url spec. for this content */\n        url: function() {\n            var url =\n                this.urlRoot +\n                this.get(\"history_id\") +\n                \"/contents/\" +\n                this.get(\"history_content_type\") +\n                \"s/\" +\n                this.get(\"id\");\n            return url;\n        },\n\n        /** save this content as not visible */\n        hide: function(options) {\n            if (!this.get(\"visible\")) {\n                return jQuery.when();\n            }\n            return this.save({ visible: false }, options);\n        },\n        /** save this content as visible */\n        unhide: function(options) {\n            if (this.get(\"visible\")) {\n                return jQuery.when();\n            }\n            return this.save({ visible: true }, options);\n        },\n\n        // ........................................................................ misc\n        toString: function() {\n            return [\n                this.get(\"type_id\"),\n                this.get(\"hid\"),\n                this.get(\"name\")\n            ].join(\":\");\n        }\n    };\n\n    //==============================================================================\n    return {\n        HistoryContentMixin: HistoryContentMixin\n    };\n});\n"]}