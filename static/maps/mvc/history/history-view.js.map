{"version":3,"sources":["mvc/history/history-view.js"],"names":["define","LIST_VIEW","_super","HistoryView","HISTORY_PREFS","_logNamespace","HDCA_LI","USER","HDAViewClass","faIconButton","HDCAViewClass","_l","FETCH_COLLECTION_COUNTS_DELAY","extend","initialize","HDA_LI","HDAListItemView","HDCAListItemView","collectionClass","HISTORY_CONTENTS","HistoryContents","modelCollectionKey","tagName","detailedFetchTimeoutId","className","prototype","_createDefaultCollection","noneFoundMsg","searchPlaceholder","_clearDetailedFetchTimeout","call","this","attributes","linkTarget","history","model","freeModel","errorHandler","self","clearUpdateTimeout","_renderSelectButton","clearTimeout","_setUpListeners","loadHistory","options","contentsOptions","error","historyId","xhr","HISTORY_MODEL","silent","msg","fetchWithContents","loading-done","_","delay","contents","fetchCollectionCounts","refresh","views:ready view:attached view:removed","view","_setUpCollectionListeners","_toggleContentsLoadingIndicator","info","_showLoadingIndicator","$indicator","setModel","History","id","_hideLoadingIndicator","trigger","remove","always","render","refreshContents","$where","length","collection","find","$emptyMessage","hide","$existing","faIcon","speed","callback","prependTo","$","$el","html","text","slideDown","isUndefined","fxSpeed","slideUp","_buildNewRender","$newRender","show","renderItems","multiselectActions","$list","$whereTo","hideSelectors","models","_filterCollection","views","_renderSomeItems","_renderEmptyMessage","classes","_renderPagination","$paginationControls","searchFor","shouldPaginate","templates","active","append","emptyMsg","haveSearchDetails","$emptyMsg","empty","_renderItemView$el","$scrollContainer","_filterItem","contentType","get","_getItemViewOptions","expanded","panel","_setUpItemViewListeners","storage","addExpanded","collapsed","collapseAll","pagination","current","currentPage","last","getLastPage","tooltip","map","m","_createItemView","fetchPrevPage","page","currentTarget","fetchPage","includeHidden","hidden","includeDeleted","isDeletedOrPurged","_getItemViewClass","fetchCurrentPage","renderAll","toggleShowHidden","TypeError","isExpanded","hasUser","listenTo","v","progressivelyFetchDetails","removeExpanded","inputSelector","clearSearch","clearExpanded","getSelectedModels","events","clone","click .show-selectors-btn","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","ev","_clickNextPage","fetchNextPage","_changePageSelect","ERROR_MODAL","val","toggleShowDeleted","undefined","fadeOut","setIncludeDeleted","scrollToItem","first","store","viewsWhereModel","numStr","number","setIncludeHidden","_firstSearch","log","searchItems","searchInput","controlsTemplate","BASE_MVC","wrapTemplate","progress","response","limit","offset","paginationTemplate","mainTemplate","done","status","readyState","isString","message","title","errorModal","badGatewayErrorModal","ajaxErrorModal","clearMessages","$messages","children","scrollToHid","hid","ordinalIndicator","charAt","toString","el","controls"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-view\",\n        \"mvc/history/history-model\",\n        \"mvc/history/history-contents\",\n        \"mvc/history/history-preferences\",\n        \"mvc/history/hda-li\",\n        \"mvc/history/hdca-li\",\n        \"mvc/user/user-model\",\n        \"mvc/ui/error-modal\",\n        \"ui/fa-icon-button\",\n        \"mvc/base-mvc\",\n        \"utils/localization\",\n        \"ui/search-input\"\n    ],\n    function(\n        LIST_VIEW,\n        HISTORY_MODEL,\n        HISTORY_CONTENTS,\n        HISTORY_PREFS,\n        HDA_LI,\n        HDCA_LI,\n        USER,\n        ERROR_MODAL,\n        faIconButton,\n        BASE_MVC,\n        _l\n    ) {\n        \"use strict\";\n\n        /* =============================================================================\nTODO:\n\n============================================================================= */\n        /** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\n        var _super = LIST_VIEW.ModelListPanel;\n        var HistoryView = _super.extend(\n            /** @lends HistoryView.prototype */ {\n                _logNamespace: \"history\",\n\n                /** class to use for constructing the HDA views */\n                HDAViewClass: HDA_LI.HDAListItemView,\n                /** class to use for constructing the HDCA views */\n                HDCAViewClass: HDCA_LI.HDCAListItemView,\n                /** class to used for constructing collection of sub-view models */\n                collectionClass: HISTORY_CONTENTS.HistoryContents,\n                /** key of attribute in model to assign to this.collection */\n                modelCollectionKey: \"contents\",\n\n                tagName: \"div\",\n                className: _super.prototype.className + \" history-panel\",\n\n                /** string to display when the collection is empty */\n                emptyMsg: _l(\"This history is empty\"),\n                /** displayed when no items match the search terms */\n                noneFoundMsg: _l(\"No matching datasets found\"),\n                /** string used for search placeholder */\n                searchPlaceholder: _l(\"search datasets\"),\n\n                /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n                FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n                // ......................................................................... SET UP\n                /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                    // ---- instance vars\n                    // control contents/behavior based on where (and in what context) the panel is being used\n                    /** where should pages from links be displayed? (default to new tab/window) */\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n\n                    /** timeout id for detailed fetch of collection counts, etc... */\n                    this.detailedFetchTimeoutId = null;\n                },\n\n                /** create and return a collection for when none is initially passed */\n                _createDefaultCollection: function() {\n                    // override\n                    return new this.collectionClass([], {\n                        history: this.model\n                    });\n                },\n\n                /** In this override, clear the update timer on the model */\n                freeModel: function() {\n                    _super.prototype.freeModel.call(this);\n                    if (this.model) {\n                        this.model.clearUpdateTimeout();\n                    }\n                    this._clearDetailedFetchTimeout();\n                    return this;\n                },\n\n                /** clear the timeout and the cached timeout id */\n                _clearDetailedFetchTimeout: function() {\n                    if (this.detailedFetchTimeoutId) {\n                        clearTimeout(this.detailedFetchTimeoutId);\n                        this.detailedFetchTimeoutId = null;\n                    }\n                },\n\n                /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n                _setUpListeners: function() {\n                    _super.prototype._setUpListeners.call(this);\n                    this.on({\n                        error: function(model, xhr, options, msg, details) {\n                            this.errorHandler(\n                                model,\n                                xhr,\n                                options,\n                                msg,\n                                details\n                            );\n                        },\n                        \"loading-done\": function() {\n                            var self = this;\n                            // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                            self.detailedFetchTimeoutId = _.delay(function() {\n                                self.detailedFetchTimeoutId = null;\n                                self.model.contents.fetchCollectionCounts();\n                            }, self.FETCH_COLLECTION_COUNTS_DELAY);\n                        },\n                        \"views:ready view:attached view:removed\": function(\n                            view\n                        ) {\n                            this._renderSelectButton();\n                        },\n                        \"view:attached\": function(view) {\n                            this.scrollTo(0);\n                        }\n                    });\n                    // this.on( 'all', function(){ console.debug( arguments ); });\n                },\n\n                // ------------------------------------------------------------------------ loading history/hda models\n                /** load the history with the given id then it's contents, sending ajax options to both */\n                loadHistory: function(historyId, options, contentsOptions) {\n                    contentsOptions = _.extend(\n                        contentsOptions || { silent: true }\n                    );\n                    this.info(\n                        \"loadHistory:\",\n                        historyId,\n                        options,\n                        contentsOptions\n                    );\n                    var self = this;\n                    self.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n                    contentsOptions.silent = true;\n                    self.trigger(\"loading\");\n                    return self.model\n                        .fetchWithContents(options, contentsOptions)\n                        .always(function() {\n                            self.render();\n                            self.trigger(\"loading-done\");\n                        });\n                },\n\n                /** convenience alias to the model. Updates the item list only (not the history) */\n                refreshContents: function(options) {\n                    if (this.model) {\n                        return this.model.refresh(options);\n                    }\n                    // may have callbacks - so return an empty promise\n                    return $.when();\n                },\n\n                /** Override to reset web storage when the id changes (since it needs the id) */\n                _setUpCollectionListeners: function() {\n                    _super.prototype._setUpCollectionListeners.call(this);\n                    return this.listenTo(this.collection, {\n                        // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                        \"fetching-more\": function() {\n                            this._toggleContentsLoadingIndicator(true);\n                            this.$emptyMessage().hide();\n                        },\n                        \"fetching-more-done\": function() {\n                            this._toggleContentsLoadingIndicator(false);\n                        }\n                    });\n                },\n\n                // ------------------------------------------------------------------------ panel rendering\n                /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n                _showLoadingIndicator: function(msg, speed, callback) {\n                    var $indicator = $('<div class=\"loading-indicator\"/>');\n                    this.$el.html(\n                        $indicator\n                            .text(msg)\n                            .slideDown(\n                                !_.isUndefined(speed) ? speed : this.fxSpeed\n                            )\n                    );\n                },\n\n                /** hide the loading indicator */\n                _hideLoadingIndicator: function(speed) {\n                    // make speed a bit slower to compensate for slow rendering of up to 500 contents\n                    this.$(\".loading-indicator\").slideUp(\n                        !_.isUndefined(speed) ? speed : this.fxSpeed + 200,\n                        function() {\n                            $(this).remove();\n                        }\n                    );\n                },\n\n                /** In this override, add a btn to toggle the selectors */\n                _buildNewRender: function() {\n                    var $newRender = _super.prototype._buildNewRender.call(\n                        this\n                    );\n                    this._renderSelectButton($newRender);\n                    return $newRender;\n                },\n\n                /** button for starting select mode */\n                _renderSelectButton: function($where) {\n                    $where = $where || this.$el;\n                    // do not render selector option if no actions\n                    if (!this.multiselectActions().length) {\n                        return null;\n                    }\n                    // do not render (and remove even) if nothing to select\n                    if (!this.views.length) {\n                        this.hideSelectors();\n                        $where\n                            .find(\".controls .actions .show-selectors-btn\")\n                            .remove();\n                        return null;\n                    }\n                    // don't bother rendering if there's one already\n                    var $existing = $where.find(\n                        \".controls .actions .show-selectors-btn\"\n                    );\n                    if ($existing.length) {\n                        return $existing;\n                    }\n\n                    return faIconButton({\n                        title: _l(\"Operations on multiple datasets\"),\n                        classes: \"show-selectors-btn\",\n                        faIcon: \"fa-check-square-o\"\n                    }).prependTo($where.find(\".controls .actions\"));\n                },\n\n                /** override to avoid showing intial empty message using contents_active */\n                _renderEmptyMessage: function($whereTo) {\n                    var self = this;\n                    var $emptyMsg = self.$emptyMessage($whereTo);\n\n                    var empty = self.model.get(\"contents_active\").active <= 0;\n                    if (empty) {\n                        return $emptyMsg\n                            .empty()\n                            .append(self.emptyMsg)\n                            .show();\n                    } else if (\n                        self.searchFor &&\n                        self.model.contents.haveSearchDetails() &&\n                        !self.views.length\n                    ) {\n                        return $emptyMsg\n                            .empty()\n                            .append(self.noneFoundMsg)\n                            .show();\n                    }\n                    $emptyMsg.hide();\n                    return $();\n                },\n\n                /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n                $scrollContainer: function($where) {\n                    // override or set via attributes.$scrollContainer\n                    return this.$list($where);\n                },\n\n                // ------------------------------------------------------------------------ subviews\n                _toggleContentsLoadingIndicator: function(show) {\n                    if (!show) {\n                        this.$list()\n                            .find(\".contents-loading-indicator\")\n                            .remove();\n                    } else {\n                        this.$list().html(\n                            '<div class=\"contents-loading-indicator\">' +\n                                '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                        );\n                    }\n                },\n\n                /** override to render pagination also */\n                renderItems: function($whereTo) {\n                    // console.log( this + '.renderItems-----------------', new Date() );\n                    $whereTo = $whereTo || this.$el;\n                    var self = this;\n                    var $list = self.$list($whereTo);\n\n                    // TODO: bootstrap hack to remove orphaned tooltips\n                    $(\".tooltip\").remove();\n\n                    $list.empty();\n                    self.views = [];\n\n                    var models = self._filterCollection();\n                    if (models.length) {\n                        self._renderPagination($whereTo);\n                        self.views = self._renderSomeItems(models, $list);\n                    } else {\n                        // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                        $whereTo.find(\"> .controls .list-pagination\").empty();\n                    }\n                    self._renderEmptyMessage($whereTo).toggle(!models.length);\n\n                    self.trigger(\"views:ready\", self.views);\n                    return self.views;\n                },\n\n                /** render pagination controls if not searching and contents says we're paginating */\n                _renderPagination: function($whereTo) {\n                    var $paginationControls = $whereTo.find(\n                        \"> .controls .list-pagination\"\n                    );\n                    if (this.searchFor || !this.model.contents.shouldPaginate())\n                        return $paginationControls.empty();\n\n                    $paginationControls.html(\n                        this.templates.pagination(\n                            {\n                                // pagination is 1-based for the user\n                                current: this.model.contents.currentPage + 1,\n                                last: this.model.contents.getLastPage() + 1\n                            },\n                            this\n                        )\n                    );\n                    $paginationControls.find(\"select.pages\").tooltip();\n                    return $paginationControls;\n                },\n\n                /** render a subset of the entire collection (client-side pagination) */\n                _renderSomeItems: function(models, $list) {\n                    var self = this;\n                    var views = [];\n                    $list.append(\n                        models.map(function(m) {\n                            var view = self._createItemView(m);\n                            views.push(view);\n                            return self._renderItemView$el(view);\n                        })\n                    );\n                    return views;\n                },\n\n                // ------------------------------------------------------------------------ sub-views\n                /** in this override, check if the contents would also display based on includeDeleted/hidden */\n                _filterItem: function(model) {\n                    var self = this;\n                    var contents = self.model.contents;\n                    return (\n                        (contents.includeHidden || !model.hidden()) &&\n                        (contents.includeDeleted ||\n                            !model.isDeletedOrPurged()) &&\n                        _super.prototype._filterItem.call(self, model)\n                    );\n                },\n\n                /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n                _getItemViewClass: function(model) {\n                    var contentType = model.get(\"history_content_type\");\n                    switch (contentType) {\n                        case \"dataset\":\n                            return this.HDAViewClass;\n                        case \"dataset_collection\":\n                            return this.HDCAViewClass;\n                    }\n                    throw new TypeError(\n                        \"Unknown history_content_type: \" + contentType\n                    );\n                },\n\n                /** in this override, add a linktarget, and expand if id is in web storage */\n                _getItemViewOptions: function(model) {\n                    var options = _super.prototype._getItemViewOptions.call(\n                        this,\n                        model\n                    );\n                    return _.extend(options, {\n                        linkTarget: this.linkTarget,\n                        expanded: this.model.contents.storage.isExpanded(\n                            model.id\n                        ),\n                        hasUser: this.model.ownedByCurrUser()\n                    });\n                },\n\n                /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    _super.prototype._setUpItemViewListeners.call(panel, view);\n                    //TODO: send from content view: this.model.collection.storage.addExpanded\n                    // maintain a list of items whose bodies are expanded\n                    return panel.listenTo(view, {\n                        expanded: function(v) {\n                            panel.model.contents.storage.addExpanded(v.model);\n                        },\n                        collapsed: function(v) {\n                            panel.model.contents.storage.removeExpanded(\n                                v.model\n                            );\n                        }\n                    });\n                },\n\n                /** override to remove expandedIds from webstorage */\n                collapseAll: function() {\n                    this.model.contents.storage.clearExpanded();\n                    _super.prototype.collapseAll.call(this);\n                },\n\n                // ------------------------------------------------------------------------ selection\n                /** Override to correctly set the historyId of the new collection */\n                getSelectedModels: function() {\n                    var collection = _super.prototype.getSelectedModels.call(\n                        this\n                    );\n                    collection.historyId = this.collection.historyId;\n                    return collection;\n                },\n\n                // ------------------------------------------------------------------------ panel events\n                /** event map */\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .show-selectors-btn\": \"toggleSelectors\",\n                    \"click > .controls .prev\": \"_clickPrevPage\",\n                    \"click > .controls .next\": \"_clickNextPage\",\n                    \"change > .controls .pages\": \"_changePageSelect\",\n                    // allow (error) messages to be clicked away\n                    \"click .messages [class$=message]\": \"clearMessages\"\n                }),\n\n                _clickPrevPage: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    this.model.contents.fetchPrevPage();\n                },\n\n                _clickNextPage: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    this.model.contents.fetchNextPage();\n                },\n\n                _changePageSelect: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    var page = $(ev.currentTarget).val();\n                    this.model.contents.fetchPage(page);\n                },\n\n                /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n                toggleShowDeleted: function(show, options) {\n                    show =\n                        show !== undefined\n                            ? show\n                            : !this.model.contents.includeDeleted;\n                    var self = this;\n                    var contents = self.model.contents;\n                    contents.setIncludeDeleted(show, options);\n                    self.trigger(\"show-deleted\", show);\n\n                    contents.fetchCurrentPage({ renderAll: true });\n                    return show;\n                },\n\n                /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n                toggleShowHidden: function(show, store, options) {\n                    // console.log( 'toggleShowHidden', show, store );\n                    show =\n                        show !== undefined\n                            ? show\n                            : !this.model.contents.includeHidden;\n                    var self = this;\n                    var contents = self.model.contents;\n                    contents.setIncludeHidden(show, options);\n                    self.trigger(\"show-hidden\", show);\n\n                    contents.fetchCurrentPage({ renderAll: true });\n                    return show;\n                },\n\n                /** On the first search, if there are no details - load them, then search */\n                _firstSearch: function(searchFor) {\n                    var self = this;\n                    var inputSelector = \"> .controls .search-input\";\n                    this.log(\"onFirstSearch\", searchFor);\n\n                    // if the contents already have enough details to search, search and return now\n                    if (self.model.contents.haveSearchDetails()) {\n                        self.searchItems(searchFor);\n                        return;\n                    }\n\n                    // otherwise, load the details progressively here\n                    self.$(inputSelector).searchInput(\"toggle-loading\");\n                    // set this now so that only results will show during progress\n                    self.searchFor = searchFor;\n                    var xhr = self.model.contents\n                        .progressivelyFetchDetails({ silent: true })\n                        .progress(function(response, limit, offset) {\n                            self.renderItems();\n                            self.trigger(\n                                \"search:loading-progress\",\n                                limit,\n                                offset\n                            );\n                        })\n                        .always(function() {\n                            self.$el\n                                .find(inputSelector)\n                                .searchInput(\"toggle-loading\");\n                        })\n                        .done(function() {\n                            self.searchItems(searchFor, \"force\");\n                        });\n                },\n\n                /** clear the search filters and show all views that are normally shown */\n                clearSearch: function(searchFor) {\n                    var self = this;\n                    if (!self.searchFor) return self;\n                    //self.log( 'onSearchClear', self );\n                    self.searchFor = \"\";\n                    self.trigger(\"search:clear\", self);\n                    self.$(\"> .controls .search-query\").val(\"\");\n                    // NOTE: silent + render prevents collection update event with merge only\n                    // - which causes an empty page due to event handler above\n                    self.model.contents\n                        .fetchCurrentPage({ silent: true })\n                        .done(function() {\n                            self.renderItems();\n                        });\n                    return self;\n                },\n\n                // ........................................................................ error handling\n                /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n                errorHandler: function(model, xhr, options) {\n                    //TODO: to mixin or base model\n                    // interrupted ajax or no connection\n                    if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                        // return ERROR_MODAL.offlineErrorModal();\n                        // fail silently\n                        return;\n                    }\n                    // otherwise, leave something to report in the console\n                    this.error(model, xhr, options);\n                    // and feedback to a modal\n                    // if sent two strings (and possibly details as 'options'), use those as message and title\n                    if (_.isString(model) && _.isString(xhr)) {\n                        var message = model;\n                        var title = xhr;\n                        return ERROR_MODAL.errorModal(message, title, options);\n                    }\n                    // bad gateway\n                    // TODO: possibly to global handler\n                    if (xhr && xhr.status === 502) {\n                        return ERROR_MODAL.badGatewayErrorModal();\n                    }\n                    return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n                },\n\n                /** Remove all messages from the panel. */\n                clearMessages: function(ev) {\n                    var $target = !_.isUndefined(ev)\n                        ? $(ev.currentTarget)\n                        : this.$messages().children('[class$=\"message\"]');\n                    $target.fadeOut(this.fxSpeed, function() {\n                        $(this).remove();\n                    });\n                    return this;\n                },\n\n                // ........................................................................ scrolling\n                /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n                scrollToHid: function(hid) {\n                    return this.scrollToItem(\n                        _.first(this.viewsWhereModel({ hid: hid }))\n                    );\n                },\n\n                // ........................................................................ misc\n                /** utility for adding -st, -nd, -rd, -th to numbers */\n                ordinalIndicator: function(number) {\n                    var numStr = number + \"\";\n                    switch (numStr.charAt(numStr.length - 1)) {\n                        case \"1\":\n                            return numStr + \"st\";\n                        case \"2\":\n                            return numStr + \"nd\";\n                        case \"3\":\n                            return numStr + \"rd\";\n                        default:\n                            return numStr + \"th\";\n                    }\n                },\n\n                /** Return a string rep of the history */\n                toString: function() {\n                    return (\n                        \"HistoryView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        //------------------------------------------------------------------------------ TEMPLATES\n        HistoryView.prototype.templates = (function() {\n            var mainTemplate = BASE_MVC.wrapTemplate([\n                // temp container\n                \"<div>\",\n                '<div class=\"controls\"></div>',\n                '<ul class=\"list-items\"></ul>',\n                '<div class=\"empty-message infomessagesmall\"></div>',\n                \"</div>\"\n            ]);\n\n            var controlsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"controls\">',\n                    '<div class=\"title\">',\n                    '<div class=\"name\"><%- history.name %></div>',\n                    \"</div>\",\n                    '<div class=\"subtitle\"></div>',\n                    '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n                    '<div class=\"actions\"></div>',\n\n                    '<div class=\"messages\">',\n                    \"<% if( history.deleted && history.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been purged and deleted\"),\n                    \"</div>\",\n                    \"<% } else if( history.deleted ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been deleted\"),\n                    \"</div>\",\n                    \"<% } else if( history.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been purged\"),\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( history.message ){ %>\",\n                    // should already be localized\n                    '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n                    \"<%= history.message.text %>\",\n                    \"</div>\",\n                    \"<% } %>\",\n                    \"</div>\",\n\n                    // add tags and annotations\n                    '<div class=\"tags-display\"></div>',\n                    '<div class=\"annotation-display\"></div>',\n\n                    '<div class=\"search\">',\n                    '<div class=\"search-input\"></div>',\n                    \"</div>\",\n\n                    '<div class=\"list-actions\">',\n                    '<div class=\"btn-group\">',\n                    '<button class=\"select-all btn btn-default\"',\n                    'data-mode=\"select\">',\n                    _l(\"All\"),\n                    \"</button>\",\n                    '<button class=\"deselect-all btn btn-default\"',\n                    'data-mode=\"select\">',\n                    _l(\"None\"),\n                    \"</button>\",\n                    \"</div>\",\n                    '<div class=\"list-action-menu btn-group\">',\n                    \"</div>\",\n                    \"</div>\",\n                    '<div class=\"list-pagination form-inline\"></div>',\n                    \"</div>\"\n                ],\n                \"history\"\n            );\n\n            var paginationTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n                    '<select class=\"pages form-control\" ',\n                    'title=\"',\n                    _l(\n                        \"Click to open and select a page. Begin typing a page number to select it\"\n                    ),\n                    '\">',\n                    \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n                    '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n                    \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n                    \"</option>\",\n                    \"<% }); %>\",\n                    \"</select>\",\n                    '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n                ],\n                \"pages\"\n            );\n\n            return _.extend(_.clone(_super.prototype.templates), {\n                el: mainTemplate,\n                controls: controlsTemplate,\n                pagination: paginationTemplate\n            });\n        })();\n\n        //==============================================================================\n        return {\n            HistoryView: HistoryView\n        };\n    }\n);\n"]}