{"version":3,"sources":["mvc/history/history-structure-view.js"],"names":["define","logNamespace","JobDAG","JOB","JOB_LI","DATASET_LI","BASE_MVC","_l","window","HistoryStructureComponent","Backbone","View","extend","LoggableMixin","_createVertexItems","view","className","_INITIAL_ZOOM_LEVEL","_MIN_ZOOM_LEVEL","li","_createJobListItem","_VERTEX_NAME_DATA_KEY","JobItemClass","JobListItemView","vertex","DatasetListItemView","this","log","component","attributes","job","_liMap","outputModels","zoomLevel","contents","output","layoutOptions","outputCollection","reset","eachVertex","type","data","jobData","tool","_createContentListItem","listenTo","foldout","name","debug","content","ContentItemClass","model","_","map","get","type_id","jobSpacing","linkAdjX","historyId","id","_createLayout","defaults","vertices","values","nodeMap","width","renderGraph","forEach","node","edges","target","layout","links","push","linkWidth","jobWidth","linkAdjY","options","clone","layoutDefaults","_render","_updateLayout","svg","height","v","j","x","y","position","link","css","top","e","render","$el","html","linkHeight","$graph","appendTo","$","source","join","select","renderSVG","highlightConnect","d","addClass","left","connections","delay","enter","attr","_connectionPath","linkSpacing","size","jobHeight","controlY","x2","ancestorLi","highlightConnected","currentTarget","jobId","Math","max","jobClassFn","highlight","jQuery","prototype","connectionClass","x1","$hoverTarget","call","jobElement","y2","ancestorId","edge","eachEdge","descendantLi","descendantId","empty","append","level","VerticalHistoryStructureComponent","selectAll","_LINK_ID_SEP","on","d3","classed","removeClass","y1","JSON","events","ev","CURVE_Y","mouseout  .graph > .list-item","controlX","undefined","HistoryStructureView","_processJobs","_createDAG","jobs","tools","min","excludeSetMetadata","excludeErroredJobs","toString","_createComponents","ComponentClass","structure","componentViews","changeLayout","nodeId","stringify","_logNamespace","_layoutToComponentClass","horizontal","vertical","_DEFAULT_LAYOUT","initialize","contains","keys","_processTools","dag","historyContents","toJSON","weakComponentGraphArray","componentGraph","_createComponent","$components","Error"],"mappings":"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","file":"../../../scripts/mvc/history/history-structure-view.js","sourcesContent":["define(\n    [\n        \"mvc/history/job-dag\",\n        \"mvc/job/job-model\",\n        \"mvc/job/job-li\",\n        \"mvc/dataset/dataset-li\",\n        \"mvc/base-mvc\",\n        \"utils/localization\",\n        \"libs/d3\"\n    ],\n    function(JobDAG, JOB, JOB_LI, DATASET_LI, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"history\";\n        // ============================================================================\n        /*\nTODO:\n    disruptive:\n        handle collections\n        retain contents to job relationships (out/input name)\n\n    display when *only* copied datasets\n        need to change when/how joblessVertices are created\n\n    components should be full height containers that scroll individually\n\n    use history contents views for job outputCollection, not vanilla datasets\n         need hid\n\n    show datasets when job not expanded\n        make them external to the job display\n    connect jobs by dataset\n        which datasets from job X are which inputs in job Y?\n\n    make job data human readable (needs tool data)\n        show only tool.inputs with labels (w/ job.params as values)\n        input datasets are special\n            they don't appear in job.params\n            have to connect to datasets in the dag\n                connect job.inputs to any tool.inputs by tool.input.name (in params)\n\nAPI: seems like this could be handled there - duplicating the input data in the proper param space\n\n    collections\n\n    use cases:\n        operations by thread:\n            copy to new history\n            rerun\n            to workflow\n        operations by branch (all descendants):\n            copy to new history\n            rerun\n            to workflow\n        signal to noise:\n            collapse/expand branch\n            hide jobs\n            visually isolate branch (hide other jobs) of thread\n            zoom (somehow)\n\n            layout changes:\n                move branch to new column in component\n                    complicated\n                pyramid\n                circular\n                    sources on inner radius\n            expansion in vertical:\n                obscures relations due to height\n                    could move details to side panel\n                difficult to compare two+ jobs/datasets when at different points in the topo\n\n    (other) controls:\n        (optionally) filter all deleted\n        (optionally) filter all hidden\n        //(optionally) filter __SET_METADATA__\n        //(optionally) filter error'd jobs\n        help and explanation\n        filtering/searching of jobs\n\n    challenges:\n        difficult to scale dom (for zoomout)\n            possible to use css transforms?\n                transform svg and dom elements\n                it is possible to use css transforms on svg nodes\n                use transform-origin to select origin to top left\n        on larger histories the svg section may become extremely large due to distance from output to input\n\n    how-to:\n        descendant ids: _.keys( component.depth/breadthFirstSearchTree( start ).vertices )\n\n    in-panel view of anc desc\n\n\n*/\n        // ============================================================================\n        /**\n *\n */\n        window.JobDAG = JobDAG;\n        var HistoryStructureComponent = Backbone.View\n            .extend(BASE_MVC.LoggableMixin)\n            .extend({\n                _logNamespace: logNamespace,\n\n                className: \"history-structure-component\",\n\n                _INITIAL_ZOOM_LEVEL: 1.0,\n                _MIN_ZOOM_LEVEL: 0.25,\n                _LINK_ID_SEP: \"-to-\",\n                _VERTEX_NAME_DATA_KEY: \"vertex-name\",\n\n                JobItemClass: JOB_LI.JobListItemView,\n                ContentItemClass: DATASET_LI.DatasetListItemView,\n\n                initialize: function(attributes) {\n                    this.log(\n                        this + \"(HistoryStructureComponent).initialize:\",\n                        attributes\n                    );\n                    this.component = attributes.component;\n\n                    this._liMap = {};\n                    this._createVertexItems();\n\n                    this.zoomLevel =\n                        attributes.zoomLevel || this._INITIAL_ZOOM_LEVEL;\n\n                    this.layout = this._createLayout(attributes.layoutOptions);\n                },\n\n                _createVertexItems: function() {\n                    var view = this;\n                    view.component.eachVertex(function(vertex) {\n                        //TODO: hack\n                        var type = vertex.data.job ? \"job\" : \"copy\",\n                            li;\n                        if (type === \"job\") {\n                            li = view._createJobListItem(vertex);\n                        } else if (type === \"copy\") {\n                            li = view._createContentListItem(vertex);\n                        }\n                        view._liMap[vertex.name] = li;\n                    });\n                    view.debug(\"_liMap:\", view._liMap);\n                },\n\n                _createJobListItem: function(vertex) {\n                    this.debug(\"_createJobListItem:\", vertex);\n                    var view = this,\n                        jobData = vertex.data,\n                        job = new JOB.Job(jobData.job);\n\n                    // get the models of the outputs for this job from the history\n                    var outputModels = _.map(job.get(\"outputs\"), function(\n                        output\n                    ) {\n                        //note: output is { src: 'hda/dataset_collection', id: <some id> }\n                        // job output doesn't *quite* match up to normal typeId\n                        return view.model.contents.get(output.type_id);\n                    });\n                    // set the collection (HistoryContents) for the job to that json (setting historyId for proper ajax urls)\n                    job.outputCollection.reset(outputModels);\n                    job.outputCollection.historyId = view.model.id;\n                    //this.debug( job.outputCollection );\n\n                    // create the bbone view for the job (to be positioned later accrd. to the layout) and cache\n                    var li = new view.JobItemClass({\n                        model: job,\n                        tool: jobData.tool,\n                        jobData: jobData\n                    });\n                    view.listenTo(\n                        li,\n                        \"expanding expanded collapsing collapsed\",\n                        view.renderGraph\n                    );\n                    view.listenTo(\n                        li.foldout,\n                        \"view:expanding view:expanded view:collapsing view:collapsed\",\n                        view.renderGraph\n                    );\n                    return li;\n                },\n\n                _createContentListItem: function(vertex) {\n                    this.debug(\"_createContentListItem:\", vertex);\n                    var view = this;\n                    var content = vertex.data;\n                    content = view.model.contents.get(content.type_id);\n                    var li = new view.ContentItemClass({ model: content });\n                    view.listenTo(\n                        li,\n                        \"expanding expanded collapsing collapsed\",\n                        view.renderGraph\n                    );\n                    return li;\n                },\n\n                layoutDefaults: {\n                    linkSpacing: 16,\n                    linkWidth: 0,\n                    linkHeight: 0,\n                    jobWidth: 300,\n                    jobHeight: 300,\n                    jobSpacing: 12,\n                    linkAdjX: 4,\n                    linkAdjY: 0\n                },\n\n                _createLayout: function(options) {\n                    options = _.defaults(\n                        _.clone(options || {}),\n                        this.layoutDefaults\n                    );\n                    var view = this,\n                        vertices = _.values(view.component.vertices),\n                        layout = _.extend(options, {\n                            nodeMap: {},\n                            links: [],\n                            svg: { width: 0, height: 0 }\n                        });\n\n                    vertices.forEach(function(v, j) {\n                        var node = { name: v.name, x: 0, y: 0 };\n                        layout.nodeMap[v.name] = node;\n                    });\n\n                    view.component.edges(function(e) {\n                        var link = {\n                            source: e.source,\n                            target: e.target\n                        };\n                        layout.links.push(link);\n                    });\n                    //this.debug( JSON.stringify( layout, null, '  ' ) );\n                    return layout;\n                },\n\n                render: function(options) {\n                    this.debug(this + \".render:\", options);\n                    var view = this;\n                    view.$el.html(\n                        [\n                            \"<header></header>\",\n                            '<nav class=\"controls\"></nav>',\n                            '<figure class=\"graph\"></figure>',\n                            \"<footer></footer>\"\n                        ].join(\"\")\n                    );\n\n                    var $graph = view.$graph();\n                    view.component.eachVertex(function(vertex) {\n                        view._liMap[vertex.name]\n                            .render(0)\n                            .$el.appendTo($graph)\n                            // store the name in the DOM and cache by that name\n                            .data(view._VERTEX_NAME_DATA_KEY, vertex.name);\n                    });\n                    view.renderGraph();\n                    return this;\n                },\n\n                $graph: function() {\n                    return this.$(\".graph\");\n                },\n\n                renderGraph: function(options) {\n                    this.debug(this + \".renderGraph:\", options);\n                    var view = this;\n\n                    function _render() {\n                        view._updateLayout();\n                        // set up the display containers\n                        view\n                            .$graph()\n                            // use css3 transform to scale component graph\n                            .css(\n                                \"transform\",\n                                [\n                                    \"scale(\",\n                                    view.zoomLevel,\n                                    \",\",\n                                    view.zoomLevel,\n                                    \")\"\n                                ].join(\"\")\n                            )\n                            .width(view.layout.svg.width)\n                            .height(view.layout.svg.height);\n                        view.renderSVG();\n\n                        // position the job views accrd. to the layout\n                        view.component.eachVertex(function(v) {\n                            //TODO:?? liMap needed - can't we attach to vertex?\n                            var li = view._liMap[v.name],\n                                position = view.layout.nodeMap[v.name];\n                            //this.debug( position );\n                            li.$el.css({ top: position.y, left: position.x });\n                        });\n                    }\n                    //TODO: hack - li's invisible in updateLayout without this delay\n                    if (!this.$el.is(\":visible\")) {\n                        _.delay(_render, 0);\n                    } else {\n                        _render();\n                    }\n                    return this;\n                },\n\n                _updateLayout: function() {\n                    this.debug(this + \"._updateLayout:\");\n                    var view = this,\n                        layout = view.layout;\n\n                    layout.linkHeight =\n                        layout.linkSpacing * _.size(layout.nodeMap);\n                    layout.svg.height = layout.linkHeight + layout.jobHeight;\n\n                    // reset for later max comparison\n                    layout.svg.width = 0;\n\n                    //TODO:?? can't we just alter the component v and e's directly?\n                    // layout the job views putting jobSpacing btwn each\n                    var x = 0,\n                        y = layout.linkHeight;\n                    _.each(layout.nodeMap, function(node, jobId) {\n                        //this.debug( node, jobId );\n                        node.x = x;\n                        node.y = y;\n                        x += layout.jobWidth + layout.jobSpacing;\n                    });\n                    layout.svg.width = layout.linkWidth = Math.max(\n                        layout.svg.width,\n                        x\n                    );\n\n                    // layout the links - connecting each job by it's main coords (currently)\n                    //TODO: somehow adjust the svg height based on the largest distance the longest connection needs\n                    layout.links.forEach(function(link) {\n                        var source = layout.nodeMap[link.source],\n                            target = layout.nodeMap[link.target];\n                        link.x1 = source.x + layout.linkAdjX;\n                        link.y1 = source.y + layout.linkAdjY;\n                        link.x2 = target.x + layout.linkAdjX;\n                        link.y2 = target.y + layout.linkAdjY;\n                    });\n\n                    this.debug(JSON.stringify(layout, null, \"  \"));\n                    return this.layout;\n                },\n\n                renderSVG: function() {\n                    this.debug(this + \".renderSVG:\");\n                    var view = this,\n                        layout = view.layout;\n\n                    var svg = d3.select(this.$graph().get(0)).select(\"svg\");\n                    if (svg.empty()) {\n                        svg = d3.select(this.$graph().get(0)).append(\"svg\");\n                    }\n\n                    svg\n                        .attr(\"width\", layout.svg.width)\n                        .attr(\"height\", layout.svg.height);\n\n                    function highlightConnect(d) {\n                        d3.select(this).classed(\"highlighted\", true);\n                        view._liMap[d.source].$el.addClass(\"highlighted\");\n                        view._liMap[d.target].$el.addClass(\"highlighted\");\n                    }\n\n                    function unhighlightConnect(d) {\n                        d3.select(this).classed(\"highlighted\", false);\n                        view._liMap[d.source].$el.removeClass(\"highlighted\");\n                        view._liMap[d.target].$el.removeClass(\"highlighted\");\n                    }\n\n                    var connections = svg\n                        .selectAll(\".connection\")\n                        .data(layout.links);\n\n                    connections\n                        .enter()\n                        .append(\"path\")\n                        .attr(\"class\", \"connection\")\n                        .attr(\"id\", function(d) {\n                            return [d.source, d.target].join(view._LINK_ID_SEP);\n                        })\n                        .on(\"mouseover\", highlightConnect)\n                        .on(\"mouseout\", unhighlightConnect);\n\n                    connections.attr(\"d\", function(d) {\n                        return view._connectionPath(d);\n                    });\n\n                    return svg.node();\n                },\n\n                _connectionPath: function(d) {\n                    var CURVE_X = 0,\n                        controlY =\n                            (d.x2 - d.x1) /\n                            this.layout.svg.width *\n                            this.layout.linkHeight;\n                    return [\n                        \"M\",\n                        d.x1,\n                        \",\",\n                        d.y1,\n                        \" \",\n                        \"C\",\n                        d.x1 + CURVE_X,\n                        \",\",\n                        d.y1 - controlY,\n                        \" \",\n                        d.x2 - CURVE_X,\n                        \",\",\n                        d.y2 - controlY,\n                        \" \",\n                        d.x2,\n                        \",\",\n                        d.y2\n                    ].join(\"\");\n                },\n\n                events: {\n                    \"mouseover .graph > .list-item\": function(ev) {\n                        this.highlightConnected(ev.currentTarget, true);\n                    },\n                    \"mouseout  .graph > .list-item\": function(ev) {\n                        this.highlightConnected(ev.currentTarget, false);\n                    }\n                },\n\n                highlightConnected: function(jobElement, highlight) {\n                    this.debug(\"highlightConnected\", jobElement, highlight);\n                    highlight = highlight !== undefined ? highlight : true;\n\n                    var view = this,\n                        component = view.component,\n                        jobClassFn = highlight\n                            ? jQuery.prototype.addClass\n                            : jQuery.prototype.removeClass,\n                        connectionClass = highlight\n                            ? \"connection highlighted\"\n                            : \"connection\";\n\n                    //console.debug( 'mouseover', this );\n                    var $hoverTarget = jobClassFn.call(\n                            $(jobElement),\n                            \"highlighted\"\n                        ),\n                        id = $hoverTarget.data(view._VERTEX_NAME_DATA_KEY);\n\n                    // immed. ancestors\n                    component.edges({ target: id }).forEach(function(edge) {\n                        var ancestorId = edge.source,\n                            ancestorLi = view._liMap[ancestorId];\n                        //view.debug( '\\t ancestor:', ancestorId, ancestorLi );\n                        jobClassFn.call(ancestorLi.$el, \"highlighted\");\n                        view\n                            .$(\"#\" + ancestorId + view._LINK_ID_SEP + id)\n                            .attr(\"class\", connectionClass);\n                    });\n                    // descendants\n                    component.vertices[id].eachEdge(function(edge) {\n                        var descendantId = edge.target,\n                            descendantLi = view._liMap[descendantId];\n                        //view.debug( '\\t descendant:', descendantId, descendantLi );\n                        jobClassFn.call(descendantLi.$el, \"highlighted\");\n                        view\n                            .$(\"#\" + id + view._LINK_ID_SEP + descendantId)\n                            .attr(\"class\", connectionClass);\n                    });\n                },\n\n                zoom: function(level) {\n                    this.zoomLevel = Math.min(\n                        1.0,\n                        Math.max(this._MIN_ZOOM_LEVEL, level)\n                    );\n                    return this.renderGraph();\n                },\n\n                toString: function() {\n                    return \"HistoryStructureComponent(\" + this.model.id + \")\";\n                }\n            });\n\n        // ============================================================================\n        /**\n *\n */\n        var VerticalHistoryStructureComponent = HistoryStructureComponent.extend(\n            {\n                //logger : console,\n\n                className:\n                    HistoryStructureComponent.prototype.className + \" vertical\",\n\n                layoutDefaults: _.extend(\n                    _.clone(HistoryStructureComponent.prototype.layoutDefaults),\n                    {\n                        linkAdjX: 0,\n                        linkAdjY: 4\n                    }\n                ),\n\n                //TODO: how can we use the dom height of the job li's - they're not visible when this is called?\n                _updateLayout: function() {\n                    this.debug(this + \"._updateLayout:\");\n                    var view = this,\n                        layout = view.layout;\n                    //this.info( this.cid, '_updateLayout' )\n\n                    layout.linkWidth =\n                        layout.linkSpacing * _.size(layout.nodeMap);\n                    layout.svg.width = layout.linkWidth + layout.jobWidth;\n\n                    // reset height - we'll get the max Y below to assign to it\n                    layout.svg.height = 0;\n\n                    //TODO:?? can't we just alter the component v and e's directly?\n                    var x = layout.linkWidth,\n                        y = 0;\n                    _.each(layout.nodeMap, function(node, nodeId) {\n                        node.x = x;\n                        node.y = y;\n                        var li = view._liMap[nodeId];\n                        y += li.$el.height() + layout.jobSpacing;\n                    });\n                    layout.linkHeight = layout.svg.height = Math.max(\n                        layout.svg.height,\n                        y\n                    );\n\n                    // layout the links - connecting each job by it's main coords (currently)\n                    layout.links.forEach(function(link) {\n                        var source = layout.nodeMap[link.source],\n                            target = layout.nodeMap[link.target];\n                        link.x1 = source.x + layout.linkAdjX;\n                        link.y1 = source.y + layout.linkAdjY;\n                        link.x2 = target.x + layout.linkAdjX;\n                        link.y2 = target.y + layout.linkAdjY;\n                        //view.debug( 'link:', link.x1, link.y1, link.x2, link.y2, link );\n                    });\n\n                    this.debug(JSON.stringify(layout, null, \"  \"));\n                    return layout;\n                },\n\n                _connectionPath: function(d) {\n                    var CURVE_Y = 0,\n                        controlX =\n                            (d.y2 - d.y1) /\n                            this.layout.svg.height *\n                            this.layout.linkWidth;\n                    return [\n                        \"M\",\n                        d.x1,\n                        \",\",\n                        d.y1,\n                        \" \",\n                        \"C\",\n                        d.x1 - controlX,\n                        \",\",\n                        d.y1 + CURVE_Y,\n                        \" \",\n                        d.x2 - controlX,\n                        \",\",\n                        d.y2 - CURVE_Y,\n                        \" \",\n                        d.x2,\n                        \",\",\n                        d.y2\n                    ].join(\"\");\n                },\n\n                toString: function() {\n                    return (\n                        \"VerticalHistoryStructureComponent(\" +\n                        this.model.id +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // ============================================================================\n        /**\n *\n */\n        var HistoryStructureView = Backbone.View\n            .extend(BASE_MVC.LoggableMixin)\n            .extend({\n                _logNamespace: logNamespace,\n\n                className: \"history-structure\",\n\n                _layoutToComponentClass: {\n                    horizontal: HistoryStructureComponent,\n                    vertical: VerticalHistoryStructureComponent\n                },\n                //_DEFAULT_LAYOUT : 'horizontal',\n                _DEFAULT_LAYOUT: \"vertical\",\n\n                initialize: function(attributes) {\n                    this.layout = _.contains(\n                        attributes.layout,\n                        _.keys(this._layoutToComponentClass)\n                    )\n                        ? attributes.layout\n                        : this._DEFAULT_LAYOUT;\n                    this.log(\n                        this + \"(HistoryStructureView).initialize:\",\n                        attributes,\n                        this.model\n                    );\n                    //TODO:?? to model - maybe glom jobs onto model in order to persist\n                    // cache jobs since we need to re-create the DAG if settings change\n                    this._processTools(attributes.tools);\n                    this._processJobs(attributes.jobs);\n                    this._createDAG();\n                },\n\n                _processTools: function(tools) {\n                    this.tools = tools || {};\n                    return this.tools;\n                },\n\n                _processJobs: function(jobs) {\n                    this.jobs = jobs || [];\n                    return this.jobs;\n                },\n\n                _createDAG: function() {\n                    this.dag = new JobDAG({\n                        historyContents: this.model.contents.toJSON(),\n                        tools: this.tools,\n                        jobs: this.jobs,\n                        excludeSetMetadata: true,\n                        excludeErroredJobs: true\n                    });\n                    this.debug(this + \".dag:\", this.dag);\n                    this._createComponents();\n                },\n\n                _createComponents: function() {\n                    this.log(this + \"._createComponents\");\n                    var structure = this;\n\n                    structure.componentViews = structure.dag\n                        .weakComponentGraphArray()\n                        .map(function(componentGraph) {\n                            return structure._createComponent(componentGraph);\n                        });\n                    return structure.componentViews;\n                },\n\n                _createComponent: function(component) {\n                    this.log(this + \"._createComponent:\", component);\n                    var ComponentClass = this._layoutToComponentClass[\n                        this.layout\n                    ];\n                    return new ComponentClass({\n                        model: this.model,\n                        component: component\n                    });\n                },\n\n                render: function(options) {\n                    this.log(this + \".render:\", options);\n                    var structure = this;\n\n                    structure.$el\n                        .addClass(\"clear\")\n                        .html(\n                            [\n                                '<div class=\"controls\"></div>',\n                                '<div class=\"components\"></div>'\n                            ].join(\"\")\n                        );\n\n                    structure.componentViews.forEach(function(component) {\n                        component\n                            .render()\n                            .$el.appendTo(structure.$components());\n                    });\n                    return structure;\n                },\n\n                $components: function() {\n                    return this.$(\".components\");\n                },\n\n                changeLayout: function(layout) {\n                    if (!(layout in this._layoutToComponentClass)) {\n                        throw new Error(this + \": unknown layout: \" + layout);\n                    }\n                    this.layout = layout;\n                    this._createComponents();\n                    return this.render();\n                },\n\n                toString: function() {\n                    return \"HistoryStructureView(\" + this.model.id + \")\";\n                }\n            });\n\n        // ============================================================================\n        return HistoryStructureView;\n    }\n);\n"]}