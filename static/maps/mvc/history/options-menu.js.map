{"version":3,"sources":["mvc/history/options-menu.js"],"names":["define","html","historyCopyDialog","BASE_MVC","_l","Webhooks","buildMenu","isAnon","purgeAllowed","urlRoot","_","clone","menu","filter","menuOption","anon","purge","href","target","confirm","func","galaxy_main","location","Galaxy","header","currHistoryPanel","createNewHistory","model","done","loadCurrentHistory","_delete","router","push","id","collapseAll","webhooks_menu","root","models","webhook","activate","$","post","user_action","options","add","url","async","callback","webhooks","each","index","toJSON","config","title","length","unshift","merge","$button","undefined","anonymous","PopupMenu"],"mappings":"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","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["define(\n    [\n        \"mvc/ui/popup-menu\",\n        \"mvc/history/copy-dialog\",\n        \"mvc/base-mvc\",\n        \"utils/localization\",\n        \"mvc/webhooks\"\n    ],\n    function(PopupMenu, historyCopyDialog, BASE_MVC, _l, Webhooks) {\n        \"use strict\";\n\n        // ============================================================================\n        var menu = [\n            {\n                html: _l(\"History Lists\"),\n                header: true\n            },\n            {\n                html: _l(\"Saved Histories\"),\n                href: \"histories/list\",\n                target: \"_top\"\n            },\n            {\n                html: _l(\"Histories Shared with Me\"),\n                href: \"histories/list_shared\",\n                target: \"_top\"\n            },\n            {\n                html: _l(\"Current History\"),\n                header: true,\n                anon: true\n            },\n            {\n                html: _l(\"Create New\"),\n                func: function() {\n                    if (Galaxy && Galaxy.currHistoryPanel) {\n                        Galaxy.currHistoryPanel.createNewHistory();\n                    }\n                }\n            },\n            {\n                html: _l(\"Copy History\"),\n                func: function() {\n                    historyCopyDialog(\n                        Galaxy.currHistoryPanel.model\n                    ).done(function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    });\n                }\n            },\n            {\n                html: _l(\"Share or Publish\"),\n                href: \"history/sharing\"\n            },\n            {\n                html: _l(\"Show Structure\"),\n                href: \"history/display_structured\",\n                anon: true\n            },\n            {\n                html: _l(\"Extract Workflow\"),\n                href: \"workflow/build_from_current_history\"\n            },\n            {\n                html: _l(\"Delete\"),\n                anon: true,\n                func: function() {\n                    if (\n                        Galaxy &&\n                        Galaxy.currHistoryPanel &&\n                        confirm(_l(\"Really delete the current history?\"))\n                    ) {\n                        Galaxy.currHistoryPanel.model\n                            ._delete()\n                            .done(function() {\n                                Galaxy.currHistoryPanel.loadCurrentHistory();\n                            });\n                    }\n                }\n            },\n            {\n                html: _l(\"Delete Permanently\"),\n                purge: true,\n                anon: true,\n                func: function() {\n                    if (\n                        Galaxy &&\n                        Galaxy.currHistoryPanel &&\n                        confirm(\n                            _l(\n                                \"Really delete the current history permanently? This cannot be undone.\"\n                            )\n                        )\n                    ) {\n                        Galaxy.currHistoryPanel.model.purge().done(function() {\n                            Galaxy.currHistoryPanel.loadCurrentHistory();\n                        });\n                    }\n                }\n            },\n\n            {\n                html: _l(\"Dataset Actions\"),\n                header: true,\n                anon: true\n            },\n            {\n                html: _l(\"Copy Datasets\"),\n                href: \"dataset/copy_datasets\"\n            },\n            {\n                html: _l(\"Dataset Security\"),\n                func: function() {\n                    if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n                        Galaxy.router.push(\n                            \"/histories/permissions?id=\" +\n                                Galaxy.currHistoryPanel.model.id\n                        );\n                    }\n                }\n            },\n            {\n                html: _l(\"Resume Paused Jobs\"),\n                href: \"history/resume_paused_jobs?current=True\",\n                anon: true\n            },\n            {\n                html: _l(\"Collapse Expanded Datasets\"),\n                func: function() {\n                    if (Galaxy && Galaxy.currHistoryPanel) {\n                        Galaxy.currHistoryPanel.collapseAll();\n                    }\n                }\n            },\n            {\n                html: _l(\"Unhide Hidden Datasets\"),\n                anon: true,\n                func: function() {\n                    // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n                    if (\n                        Galaxy &&\n                        Galaxy.currHistoryPanel &&\n                        confirm(_l(\"Really unhide all hidden datasets?\"))\n                    ) {\n                        $.post(\n                            Galaxy.root + \"history/adjust_hidden\",\n                            { user_action: \"unhide\" },\n                            function() {\n                                Galaxy.currHistoryPanel.loadCurrentHistory();\n                            }\n                        );\n                    }\n                }\n            },\n            {\n                html: _l(\"Delete Hidden Datasets\"),\n                anon: true,\n                func: function() {\n                    // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n                    if (\n                        Galaxy &&\n                        Galaxy.currHistoryPanel &&\n                        confirm(_l(\"Really delete all hidden datasets?\"))\n                    ) {\n                        $.post(\n                            Galaxy.root + \"history/adjust_hidden\",\n                            { user_action: \"delete\" },\n                            function() {\n                                Galaxy.currHistoryPanel.loadCurrentHistory();\n                            }\n                        );\n                    }\n                }\n            },\n            {\n                html: _l(\"Purge Deleted Datasets\"),\n                confirm: _l(\n                    \"Really delete all deleted datasets permanently? This cannot be undone.\"\n                ),\n                href: \"history/purge_deleted_datasets\",\n                purge: true,\n                anon: true\n            },\n\n            {\n                html: _l(\"Downloads\"),\n                header: true\n            },\n            {\n                html: _l(\"Export Tool Citations\"),\n                href: \"history/citations\",\n                anon: true\n            },\n            {\n                html: _l(\"Export History to File\"),\n                href: \"history/export_archive?preview=True\",\n                anon: true\n            },\n\n            {\n                html: _l(\"Other Actions\"),\n                header: true\n            },\n            {\n                html: _l(\"Import from File\"),\n                href: \"history/import_archive\"\n            }\n        ];\n\n        // Webhooks\n        Webhooks.add({\n            url: \"api/webhooks/history-menu/all\",\n            async: false, // (hypothetically) slows down the performance\n            callback: function(webhooks) {\n                var webhooks_menu = [];\n\n                $.each(webhooks.models, function(index, model) {\n                    var webhook = model.toJSON();\n                    if (webhook.activate) {\n                        webhooks_menu.push({\n                            html: _l(webhook.config.title),\n                            // func: function() {},\n                            anon: true\n                        });\n                    }\n                });\n\n                if (webhooks_menu.length > 0) {\n                    webhooks_menu.unshift({\n                        html: _l(\"Webhooks\"),\n                        header: true\n                    });\n                    $.merge(menu, webhooks_menu);\n                }\n            }\n        });\n\n        function buildMenu(isAnon, purgeAllowed, urlRoot) {\n            return _.clone(menu).filter(function(menuOption) {\n                if (isAnon && !menuOption.anon) {\n                    return false;\n                }\n                if (!purgeAllowed && menuOption.purge) {\n                    return false;\n                }\n\n                //TODO:?? hard-coded galaxy_main\n                if (menuOption.href) {\n                    menuOption.href = urlRoot + menuOption.href;\n                    menuOption.target = menuOption.target || \"galaxy_main\";\n                }\n\n                if (menuOption.confirm) {\n                    menuOption.func = function() {\n                        if (confirm(menuOption.confirm)) {\n                            galaxy_main.location = menuOption.href;\n                        }\n                    };\n                }\n                return true;\n            });\n        }\n\n        var create = function($button, options) {\n            options = options || {};\n            var isAnon =\n                    options.anonymous === undefined ? true : options.anonymous,\n                purgeAllowed = options.purgeAllowed || false,\n                menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n            //console.debug( 'menu:', menu );\n            return new PopupMenu($button, menu);\n        };\n\n        // ============================================================================\n        return create;\n    }\n);\n"]}