{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["define","MODAL","ERROR_MODAL","_l","CopyDialog","defaultName","_","template","title","submitLabel","errorMessage","progressive","activeLabel","allLabel","anonWarning","_template","_showAjaxIndicator","indicator","modal","options","dialog","deferred","defaultCopyNameFn","defaultCopyName","name","history","defaultCopyWhat","allowAll","autoClose","copyAllDatasets","this","done","empty","css","margin-top","show","checkNameAndCopy","$","val","prop","copy","response","resolve","fail","xhr","status","message","ajaxErrorModal","rejectWith","arguments","hide","select","isAnon","Galaxy","user","nameFn","buttons","allDatasets","height","isUndefined","closing_events","reject","originalClosingCallback","closing_callback","extend","get","body","isAnonymous","copyWhat","historyCopyDialog","object","cancelled","focus","on","ev","keyCode","preventDefault","ImportDialog","window","parent","View","useImport"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["define(\n    [\"mvc/ui/ui-modal\", \"mvc/ui/error-modal\", \"utils/localization\"],\n    function(MODAL, ERROR_MODAL, _l) {\n        \"use strict\";\n\n        //==============================================================================\n        /**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\n        var CopyDialog = {\n            // language related strings/fns\n            defaultName: _.template(\"Copy of '<%- name %>'\"),\n            title: _.template(_l(\"Copying history\") + ' \"<%- name %>\"'),\n            submitLabel: _l(\"Copy\"),\n            errorMessage: _l(\"History could not be copied.\"),\n            progressive: _l(\"Copying history\"),\n            activeLabel: _l(\"Copy only the active, non-deleted datasets\"),\n            allLabel: _l(\"Copy all datasets including deleted ones\"),\n            anonWarning:\n                _l(\n                    \"As an anonymous user, unless you login or register, you will lose your current history \"\n                ) + _l(\"after copying this history. \"),\n\n            // template for modal body\n            _template: _.template(\n                [\n                    //TODO: remove inline styles\n                    // show a warning message for losing current to anon users\n                    \"<% if( isAnon ){ %>\",\n                    '<div class=\"warningmessage\">',\n                    \"<%- anonWarning %>\",\n                    _l(\"You can\"),\n                    ' <a href=\"/user/login\">',\n                    _l(\"login here\"),\n                    \"</a> \",\n                    _l(\"or\"),\n                    \" \",\n                    ' <a href=\"/user/create\">',\n                    _l(\"register here\"),\n                    \"</a>.\",\n                    \"</div>\",\n                    \"<% } %>\",\n                    \"<form>\",\n                    '<label for=\"copy-modal-title\">',\n                    _l(\"Enter a title for the new history\"),\n                    \":\",\n                    \"</label><br />\",\n                    // TODO: could use required here and the form validators\n                    // NOTE: use unescaped here if escaped in the modal function below\n                    '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n                    '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n                    _l(\"Please enter a valid history title\"),\n                    \"</p>\",\n                    // if allowAll, add the option to copy deleted datasets, too\n                    \"<% if( allowAll ){ %>\",\n                    \"<br />\",\n                    \"<p>\",\n                    _l(\n                        \"Choose which datasets from the original history to include:\"\n                    ),\n                    \"</p>\",\n                    // copy non-deleted is the default\n                    '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n                    '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n                    '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n                    \"<br />\",\n                    '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n                    '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n                    '<label for=\"copy-all\"> <%- allLabel %></label>',\n                    \"<% } %>\",\n                    \"</form>\"\n                ].join(\"\")\n            ),\n\n            // empty modal body and let the user know the copy is happening\n            _showAjaxIndicator: function _showAjaxIndicator() {\n                var indicator =\n                    '<p><span class=\"fa fa-spinner fa-spin\"></span> ' +\n                    this.progressive +\n                    \"...</p>\";\n                this.modal\n                    .$(\".modal-body\")\n                    .empty()\n                    .append(indicator)\n                    .css({ \"margin-top\": \"8px\" });\n            },\n\n            // (sorta) public interface - display the modal, render the form, and potentially copy the history\n            // returns a jQuery.Deferred done->history copied, fail->user cancelled\n            dialog: function _dialog(modal, history, options) {\n                options = options || {};\n\n                var dialog = this,\n                    deferred = jQuery.Deferred(),\n                    // TODO: getting a little byzantine here\n                    defaultCopyNameFn = options.nameFn || this.defaultName,\n                    defaultCopyName = defaultCopyNameFn({\n                        name: history.get(\"name\")\n                    }),\n                    // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n                    defaultCopyWhat = options.allDatasets\n                        ? \"copy-all\"\n                        : \"copy-non-deleted\",\n                    allowAll = !_.isUndefined(options.allowAll)\n                        ? options.allowAll\n                        : true,\n                    autoClose = !_.isUndefined(options.autoClose)\n                        ? options.autoClose\n                        : true;\n\n                this.modal = modal;\n\n                // validate the name and copy if good\n                function checkNameAndCopy() {\n                    var name = modal.$(\"#copy-modal-title\").val();\n                    if (!name) {\n                        modal.$(\".invalid-title\").show();\n                        return;\n                    }\n                    // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n                    var copyAllDatasets =\n                        modal.$('input[name=\"copy-what\"]:checked').val() ===\n                        \"copy-all\";\n                    modal.$(\"button\").prop(\"disabled\", true);\n                    dialog._showAjaxIndicator();\n                    history\n                        .copy(true, name, copyAllDatasets)\n                        .done(function(response) {\n                            deferred.resolve(response);\n                        })\n                        .fail(function(xhr, status, message) {\n                            var options = {\n                                name: name,\n                                copyAllDatasets: copyAllDatasets\n                            };\n                            ERROR_MODAL.ajaxErrorModal(\n                                history,\n                                xhr,\n                                options,\n                                dialog.errorMessage\n                            );\n                            deferred.rejectWith(deferred, arguments);\n                        })\n                        .done(function() {\n                            if (autoClose) {\n                                modal.hide();\n                            }\n                        });\n                }\n\n                var originalClosingCallback = options.closing_callback;\n                modal.show(\n                    _.extend(options, {\n                        title: this.title({ name: history.get(\"name\") }),\n                        body: $(\n                            dialog._template({\n                                name: defaultCopyName,\n                                isAnon: Galaxy.user.isAnonymous(),\n                                allowAll: allowAll,\n                                copyWhat: defaultCopyWhat,\n                                activeLabel: this.activeLabel,\n                                allLabel: this.allLabel,\n                                anonWarning: this.anonWarning\n                            })\n                        ),\n                        buttons: _.object([\n                            [\n                                _l(\"Cancel\"),\n                                function() {\n                                    modal.hide();\n                                }\n                            ],\n                            [this.submitLabel, checkNameAndCopy]\n                        ]),\n                        height: \"auto\",\n                        closing_events: true,\n                        closing_callback: function _historyCopyClose(\n                            cancelled\n                        ) {\n                            if (cancelled) {\n                                deferred.reject({ cancelled: true });\n                            }\n                            if (originalClosingCallback) {\n                                originalClosingCallback(cancelled);\n                            }\n                        }\n                    })\n                );\n\n                // set the default dataset copy, autofocus the title, and set up for a simple return\n                modal\n                    .$(\"#copy-modal-title\")\n                    .focus()\n                    .select();\n                modal.$(\"#copy-modal-title\").on(\"keydown\", function(ev) {\n                    if (ev.keyCode === 13) {\n                        ev.preventDefault();\n                        checkNameAndCopy();\n                    }\n                });\n\n                return deferred;\n            }\n        };\n\n        //==============================================================================\n        // maintain the (slight) distinction between copy and import\n        /**\n * Subclass CopyDialog to use the import language.\n */\n        var ImportDialog = _.extend({}, CopyDialog, {\n            defaultName: _.template(\"imported: <%- name %>\"),\n            title: _.template(_l(\"Importing history\") + ' \"<%- name %>\"'),\n            submitLabel: _l(\"Import\"),\n            errorMessage: _l(\"History could not be imported.\"),\n            progressive: _l(\"Importing history\"),\n            activeLabel: _l(\"Import only the active, non-deleted datasets\"),\n            allLabel: _l(\"Import all datasets including deleted ones\"),\n            anonWarning:\n                _l(\n                    \"As an anonymous user, unless you login or register, you will lose your current history \"\n                ) + _l(\"after importing this history. \")\n        });\n\n        //==============================================================================\n        /**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\n        var historyCopyDialog = function(history, options) {\n            options = options || {};\n            // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n            var modal = window.parent.Galaxy.modal || new MODAL.View({});\n            return options.useImport\n                ? ImportDialog.dialog(modal, history, options)\n                : CopyDialog.dialog(modal, history, options);\n        };\n\n        //==============================================================================\n        return historyCopyDialog;\n    }\n);\n"]}