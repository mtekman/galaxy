{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["define","Utils","Buttons","Base","Backbone","View","extend","initialize","options","self","model","visible","data","uid","error_text","wait_text","multiple","optional","onchange","this","listenTo","_changeValue","_changeWait","_changeData","_changeVisible","on","get","value","$el","render","onclick","trigger","$","append","$menu","addClass","$options","_template","all_button","ButtonCheck","prop","_getValue","placement","set","empty","_","each","option","_templateOption","tooltip","title","length","_messageShow","_setValue","hide","new_value","undefined","$message","css","show","first","isArray","val","wait","selected","values","v","push","isEmpty","text","status","Checkbox","BaseIcons","prototype","id","type","removeClass","name","pair","html","label","Radio","call","RadioButton","closest","icon","attr"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self\n                            .$(\"input\")\n                            .prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(\n                    this._templateOptions(this.model.get(\"data\"))\n                );\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (\n                this._getValue() === null &&\n                !this.model.get(\"multiple\") &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value(\n                    $.isArray(this._getValue()) ? this._getValue().length : 0,\n                    this.length()\n                );\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n"]}