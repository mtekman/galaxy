{"version":3,"sources":["mvc/ui/popup-menu.js"],"names":["define","PopupMenu","Backbone","View","extend","initialize","$button","this","length","$","options","data","menu","click","event","remove","_renderAndShow","clickEvent","render","appendTo","_setUpCloseBehavior","css","_getShownPosition","show","hide","$el","find","each","html","option","attr","func","i","li","children","call","id","template","divider","href","target","join","check","_templateOptions","_","map","menuWidth","pageX","header","document","closePopup","window","checked","width","x","one","scrollLeft","max","contents","top","pageY","left","index","removeItem","off","splice","parent","err","findItemByHtml","findIndexByHtml","addItem","item","initial_options","make_popupmenu","button_element","optionVal","newOption","has","toString","selector","convertedOptions","optionKey","linkTarget","jQuery","type","push","convertLinksToOptions","$parent","elem","$link","$menuElement","linkHref","$buttonElement","confirmText","confirm","location","buttonSelectorBuildFn","popupMenusCreated","menuSelector","addClass","fromExistingDom","menuElementLinkSelector","make_popup_menus","fromDom"],"mappings":"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","file":"../../../scripts/mvc/ui/popup-menu.js","sourcesContent":["define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return [\n                    '<ul id=\"',\n                    id,\n                    '-menu\" class=\"dropdown-menu\">',\n                    this._templateOptions(options),\n                    \"</ul>\"\n                ].join(\"\");\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return [\n                            '<li class=\"head\"><a href=\"javascript:void(0);\">',\n                            option.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target\n                            ? ' target=\"' + option.target + '\"'\n                            : \"\",\n                        check = option.checked\n                            ? '<span class=\"fa fa-check\"></span>'\n                            : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() + $(window).width() - menuWidth - 5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (\n                        _.has(this.options[i], \"html\") &&\n                        this.options[i].html === html\n                    ) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function(\n            $buttonElement,\n            $menuElement,\n            menuElementLinkSelector\n        ) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions(\n                $menuElement,\n                menuElementLinkSelector\n            );\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(\n            parent,\n            menuSelector,\n            buttonSelectorBuildFn\n        ) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(\n                            buttonSelectorBuildFn($menuElement, parent)\n                        );\n                    popupMenusCreated.push(\n                        PopupMenu.fromDom($buttonElement, $menuElement)\n                    );\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n"]}