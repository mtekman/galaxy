{"version":3,"sources":["mvc/ui/ui-buttons.js"],"names":["define","Utils","ButtonDefault","Backbone","View","initialize","options","model","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","this","setElement","$","listenTo","render","append","$icon","$title","$progress","tooltip","placement","addClass","$el","removeClass","attr","on","hide","onclick","self","css","$progress_bar","disable","prop","html","show","unwait","setIcon","set","id","target","ButtonLink","extend","Model","ButtonCheck","icons","value","onchange","attributes","href","off","new_val","undefined","total","ButtonIcon","get","ButtonMenu","visible","tag","collection","display","$root","preventDefault","suboptions","$link","e","$menu","$button","divider","onunload","Collection","where","length","remove","each","submodel","addMenu","add","merge"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-buttons.js","sourcesContent":["/** This module contains all button views. */\ndefine([\"utils/utils\"], function(Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"btn btn-default\",\n                    wait: false,\n                    wait_text: \"Sending...\",\n                    wait_cls: \"btn btn-info\",\n                    disabled: false,\n                    percentage: -1\n                }).set(options);\n            this.setElement(\n                $(\"<button/>\")\n                    .attr(\"type\", \"button\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n                    .append(\n                        (this.$progress = $(\"<div/>\").append(\n                            (this.$progress_bar = $(\"<div/>\"))\n                        ))\n                    )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"ui-button-default\")\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"id\", options.id)\n                .attr(\"disabled\", options.disabled)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    options.onclick && !self.disabled && options.onclick();\n                })\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress\n                .addClass(\"progress\")\n                .css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar\n                .addClass(\"progress-bar\")\n                .css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon &&\n                    options.title &&\n                    this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"\"\n                }).set(options);\n            this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr({\n                    id: options.id,\n                    href: options.href || \"javascript:void(0)\",\n                    title: options.title,\n                    target: options.target || \"_top\",\n                    disabled: options.disabled\n                })\n                .tooltip({ placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function() {\n                    options.onclick && !options.disabled && options.onclick();\n                });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"Select/Unselect all\",\n                    icons: [\n                        \"fa-square-o\",\n                        \"fa-minus-square-o\",\n                        \"fa-check-square-o\"\n                    ],\n                    value: 0,\n                    onchange: function() {}\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$icon = $(\"<span/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .addClass(\"ui-button-check\")\n                .off(\"click\")\n                .on(\"click\", function() {\n                    self.model.set(\n                        \"value\",\n                        (self.model.get(\"value\") === 0 && 2) || 0\n                    );\n                    options.onclick && options.onclick();\n                });\n            this.$title.html(options.title);\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa ui-margin-right\")\n                .addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = (new_val !== total && 1) || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"ui-button-icon\",\n                    disabled: false\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$button = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"disabled\", options.disabled)\n                .attr(\"id\", options.id)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    !options.disabled && options.onclick && options.onclick();\n                });\n            this.$button\n                .addClass(\"button\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: \"\",\n                    title: \"\",\n                    pull: \"right\",\n                    icon: null,\n                    onclick: null,\n                    cls: \"ui-button-icon ui-button-menu\",\n                    tooltip: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onunload: null,\n                    visible: true,\n                    tag: \"\"\n                }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$root = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(\n                this.collection,\n                \"change add remove reset\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"dropdown\")\n                .addClass(options.cls)\n                .attr(\"id\", options.id)\n                .css({\n                    display:\n                        options.visible &&\n                        this.collection.where({ visible: true }).length > 0\n                            ? \"block\"\n                            : \"none\"\n                });\n            this.$root\n                .addClass(\"root button dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function(e) {\n                    $(\".tooltip\").hide();\n                    e.preventDefault();\n                    options.onclick && options.onclick();\n                });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title\n                .removeClass()\n                .addClass(\"title\")\n                .html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\")\n                    .addClass(\"menu dropdown-menu\")\n                    .addClass(\"pull-\" + self.model.get(\"pull\"))\n                    .attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function(submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\")\n                        .addClass(\"dropdown-item\")\n                        .attr({\n                            href: suboptions.href,\n                            target: suboptions.target\n                        })\n                        .append(\n                            $(\"<i/>\")\n                                .addClass(\"fa\")\n                                .addClass(suboptions.icon)\n                                .css(\n                                    \"display\",\n                                    suboptions.icon ? \"inline-block\" : \"none\"\n                                )\n                        )\n                        .append(suboptions.title)\n                        .on(\"click\", function(e) {\n                            if (suboptions.onclick) {\n                                e.preventDefault();\n                                suboptions.onclick();\n                            }\n                        });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider &&\n                        self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function(options) {\n            this.collection.add(\n                Utils.merge(options, {\n                    title: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onclick: null,\n                    divider: false,\n                    visible: true,\n                    icon: null,\n                    cls: \"button-menu btn-group\"\n                })\n            );\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n});\n"]}