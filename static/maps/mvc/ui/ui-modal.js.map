{"version":3,"sources":["mvc/ui/ui-modal.js"],"names":["define","View","Backbone","extend","className","optionsDefault","container","title","cls","body","backdrop","height","width","closing_events","buttonList","initialize","options","this","_","defaults","prepend","el","render","show","visible","$el","self","$","document","on","e","$backdrop","hide","canceled","fadeOut","closing_callback","off","html","_template","$header","$dialog","$body","$footer","$buttons","removeClass","addClass","empty","buttons","$button","name","counter","each","callback","attr","text","click","append","title_separator","removeAttr","css","window","getButton","enableButton","prop","disableButton","showButton","hideButton","scrollTop"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-modal.js","sourcesContent":["define([], function() {\n    var View = Backbone.View.extend({\n        className: \"ui-modal\",\n\n        // defaults\n        optionsDefault: {\n            container: \"body\",\n            title: \"ui-modal\",\n            cls: \"ui-modal\",\n            body: \"\",\n            backdrop: true,\n            height: null,\n            width: null,\n            closing_events: false,\n            closing_callback: null,\n            title_separator: true\n        },\n\n        // button list\n        buttonList: {},\n\n        // initialize\n        initialize: function(options) {\n            this.options = _.defaults(options || {}, this.optionsDefault);\n            $(this.options.container).prepend(this.el);\n            // optional render\n            if (options) {\n                this.render();\n            }\n        },\n\n        /**\n     * Displays modal\n    */\n        show: function(options) {\n            if (options) {\n                this.options = _.defaults(options, this.optionsDefault);\n                this.render();\n            }\n            if (!this.visible) {\n                this.visible = true;\n                this.$el.fadeIn(\"fast\");\n                if (this.options.closing_events) {\n                    var self = this;\n                    $(document).on(\"keyup.ui-modal\", function(e) {\n                        if (e.keyCode == 27) {\n                            self.hide(true);\n                        }\n                    });\n                    this.$backdrop.on(\"click\", function() {\n                        self.hide(true);\n                    });\n                }\n            }\n        },\n\n        /**\n     * Hide modal\n    */\n        hide: function(canceled) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\");\n            if (this.options.closing_callback) {\n                this.options.closing_callback(canceled);\n            }\n            $(document).off(\"keyup.ui-modal\");\n            this.$backdrop.off(\"click\");\n        },\n\n        /**\n     * Render modal\n    */\n        render: function() {\n            var self = this;\n            this.$el.html(this._template());\n\n            // link elements\n            this.$header = this.$(\".modal-header\");\n            this.$dialog = this.$(\".modal-dialog\");\n            this.$body = this.$(\".modal-body\");\n            this.$footer = this.$(\".modal-footer\");\n            this.$backdrop = this.$(\".modal-backdrop\");\n            this.$buttons = this.$(\".buttons\");\n\n            if (this.options.body == \"progress\") {\n                this.options.body = $(\n                    '<div class=\"progress progress-striped active\">' +\n                        '<div class=\"progress-bar progress-bar-info\" style=\"width:100%\"/>' +\n                        \"</div>\"\n                );\n            }\n\n            // fix main content\n            this.$el\n                .removeClass()\n                .addClass(\"modal\")\n                .addClass(this.options.cls);\n            this.$header.find(\".title\").html(this.options.title);\n            this.$body.html(this.options.body);\n\n            // append buttons\n            this.$buttons.empty();\n            this.buttonList = {};\n            if (this.options.buttons) {\n                var counter = 0;\n                $.each(this.options.buttons, function(name, callback) {\n                    var $button = $(\"<button/>\")\n                        .attr(\"id\", \"button-\" + counter++)\n                        .text(name)\n                        .click(callback);\n                    self.$buttons.append($button).append(\"&nbsp;\");\n                    self.buttonList[name] = $button;\n                });\n            } else {\n                this.$footer.hide();\n            }\n\n            // configure background, separator line\n            this.$backdrop[\n                (this.options.backdrop && \"addClass\") || \"removeClass\"\n            ](\"in\");\n            this.$header[\n                (!this.options.title_separator && \"addClass\") || \"removeClass\"\n            ](\"no-separator\");\n\n            // fix dimensions\n            // note: because this is a singleton, we need to clear inline styles from any previous invocations\n            this.$body.removeAttr(\"style\");\n            if (this.options.height) {\n                this.$body.css(\"height\", this.options.height);\n                this.$body.css(\"overflow\", \"hidden\");\n            } else {\n                this.$body.css(\"max-height\", $(window).height() / 2);\n            }\n            if (this.options.width) {\n                this.$dialog.css(\"width\", this.options.width);\n            }\n        },\n\n        /**\n     * Returns the button dom\n     * @param{String}   name    - Button name/title\n    */\n        getButton: function(name) {\n            return this.buttonList[name];\n        },\n\n        /**\n     * Enables a button\n     * @param{String}   name    - Button name/title\n    */\n        enableButton: function(name) {\n            this.getButton(name).prop(\"disabled\", false);\n        },\n\n        /**\n     * Disables a button\n     * @param{String}   name    - Button name/title\n    */\n        disableButton: function(name) {\n            this.getButton(name).prop(\"disabled\", true);\n        },\n\n        /**\n     * Show a button\n     * @param{String}   name    - Button name/title\n    */\n        showButton: function(name) {\n            this.getButton(name).show();\n        },\n\n        /**\n     * Hide a button\n     * @param{String}   name    - Button name/title\n    */\n        hideButton: function(name) {\n            this.getButton(name).hide();\n        },\n\n        /**\n     * Returns scroll top for body element\n    */\n        scrollTop: function() {\n            return this.$body.scrollTop();\n        },\n\n        /**\n     * Returns the modal template\n    */\n        _template: function() {\n            return (\n                '<div class=\"modal-backdrop fade\"/>' +\n                '<div class=\"modal-dialog\">' +\n                '<div class=\"modal-content\">' +\n                '<div class=\"modal-header\">' +\n                '<h4 class=\"title\"/>' +\n                \"</div>\" +\n                '<div class=\"modal-body\"/>' +\n                '<div class=\"modal-footer\">' +\n                '<div class=\"buttons\"/>' +\n                \"</div>\" +\n                \"</div>\" +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}