{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["define","Utils","Select","Batch","DISABLED","ENABLED","LINKED","src","icon","multiple","batch","tooltip","data_multiple","workflow_data_multiple","workflow_data_collection","module_data_collection","Backbone","View","initialize","src_labels","statustimer","set","options","setElement","button_product","value","linked","$batch_div","enabled","self","this","model","Model","e","target","hdca","addClass","preventDefault","$","$el","on","listenTo","onchange","append","html","_changeWait","clone","css","lastenter","new_value","undefined","current","id_list","isArray","result","_batch","details","_handleDrop","history","values","sort","a","_changeData","hid","_changeCurrent","_changeValue","_changeType","_","each","$batchfield","config","field","wait","unwait","update","get","button_data","fields","c","length","i","push","searchable","Galaxy","emit","debug","b","trigger","button_width","button_type","show","$batch","batchmode","hide","select_options","item","keep","label","tags","Configurations","config_id","add","data","extensions","textify","list","individual","drop_data","JSON","parse","new_id","new_src","id","findWhere","current_value","Math","max","margin-left","_handleDropStatus","items","map_over_type","name","indexOf","ev","originalEvent","dataTransfer","getData","history_content_type","status","removeClass","setTimeout"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(\n    Utils,\n    Ui,\n    Select\n) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip:\n                            \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target &&\n                        self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:current\",\n                this._changeCurrent,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[\n                                id_list[i] + \"_\" + this.config[current].src\n                            ];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" +\n                                        id_list[i] +\n                                        \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\n                    \"ui-select-content::value()\",\n                    \"Invalid value/source '\" + new_value + \"'.\"\n                );\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[\n                            self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                        ]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\")\n                    ? this.model.get(\"flavor\") + \"_\"\n                    : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple ||\n                            (data &&\n                                data[c.src] &&\n                                data[c.src].length >\n                                    self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append(\n                    $batchfield.css({ \"margin-left\": button_width })\n                );\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (\n                        c.src == src &&\n                        [multiple, true].indexOf(c.multiple) !== -1\n                    ) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(\n                    ev.originalEvent.dataTransfer.getData(\"text\")\n                )[0];\n                var new_id = drop_data.id;\n                var new_src =\n                    drop_data.history_content_type == \"dataset\"\n                        ? \"hda\"\n                        : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el\n                .removeClass(\"ui-dragover\")\n                .addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (\n                    config.batch == Batch.ENABLED &&\n                    this.button_product.value() === \"true\"\n                ) {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}