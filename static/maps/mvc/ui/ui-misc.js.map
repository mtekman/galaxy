{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["define","Label","tagName","initialize","Utils","listenTo","Slider","Options","Drilldown","render","Modal","Backbone","View","extend","title","set","options","this","model","Model","get","setElement","$","removeClass","new_title","value","Message","message","status","addClass","persistent","fade","cls","$el","messageForDisplay","update","self","fadeOut","UnescapedMessage","html","timeout","window","clearTimeout","readonly","color","style","_","escape","new_val","undefined","datalist","isArray","autocomplete","source","response","area","change","_onchange","Hidden","append","id","attr","css","length","$info","show","val","attr_name","_readFile","e","removeAttr","file","reader","FileReader","onload","$hidden","Input","Buttons","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","text","ButtonLink","RadioButton","Checkbox","Select","$file","$text","$wait","on","hide","target","files","wait","result","readAsText","Button","Upload","Radio"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") ||\n                            (status == \"danger\" && \"error\") ||\n                            status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined &&\n                    this.model.set(\n                        \"value\",\n                        typeof new_val === \"string\" ? new_val : \"\"\n                    );\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name)\n                        ? self.$el.attr(attr_name, true)\n                        : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") &&\n                    this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append(\n                            (this.$wait = $(\"<i/>\").addClass(\n                                \"fa fa-spinner fa-spin\"\n                            ))\n                        )\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                this.model.get(\"value\")\n                    ? this.$text.text(this.model.get(\"value\")).show()\n                    : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n"]}