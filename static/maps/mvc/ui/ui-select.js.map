{"version":3,"sources":["mvc/ui/ui-select.js"],"names":["define","Utils","View","Backbone","extend","css","optionsDefault","placeholder","data","value","minimumInputLength","initialize","options","merge","this","setElement","_template","container","append","$el","select_data","_refresh","multiple","_setValue","self","onchange","on","console","log","new_value","before","_getValue","undefined","after","text","select2","disabled","enable","disable","add","push","id","del","index","_getIndex","splice","remove","update","key","select_opt","containerCssClass","ajax","dropdownCssClass","escapeMarkup","formatResult","formatSelection","initSelection","initialData","selected","dropdownAutoWidth","_","findIndex","length"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select.js","sourcesContent":["// dependencies\ndefine([\"utils/utils\"], function(Utils) {\n    /**\n * A plugin for initializing select2 input items.\n * Make sure the select2 library itself is loaded beforehand.\n * Also the element to which select2 will be appended has to \n * be created before select2 initialization (and passed as option).\n */\n    var View = Backbone.View.extend({\n        // options\n        optionsDefault: {\n            css: \"\",\n            placeholder: \"No data available\",\n            data: [],\n            value: null,\n            multiple: false,\n            minimumInputLength: 0,\n            // example format of initial data: \"id:name,55:anotherrole@role.com,27:role@role.com\"\n            initialData: \"\"\n        },\n\n        // initialize\n        initialize: function(options) {\n            // configure options\n            this.options = Utils.merge(options, this.optionsDefault);\n\n            // create new element\n            this.setElement(this._template(this.options));\n\n            // check if container exists\n            if (!this.options.container) {\n                console.log(\n                    \"ui-select::initialize() : container not specified.\"\n                );\n                return;\n            }\n\n            // add to dom\n            this.options.container.append(this.$el);\n\n            // link selection dictionary\n            this.select_data = this.options.data;\n\n            // refresh\n            this._refresh();\n\n            if (!this.options.multiple) {\n                // initial value\n                if (this.options.value) {\n                    this._setValue(this.options.value);\n                }\n\n                // add change event\n                var self = this;\n                if (this.options.onchange) {\n                    this.$el.on(\"change\", function() {\n                        self.options.onchange(self.value());\n                    });\n                }\n            }\n        },\n\n        // value\n        value: function(new_value) {\n            // get current id/value\n            var before = this._getValue();\n\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            }\n\n            // get current id/value\n            var after = this._getValue();\n\n            // fire onchange\n            if (after != before && this.options.onchange) {\n                this.options.onchange(after);\n            }\n\n            // return current value\n            return after;\n        },\n\n        // label\n        text: function() {\n            return this.$el.select2(\"data\").text;\n        },\n\n        // disabled\n        disabled: function() {\n            return !this.$el.select2(\"enable\");\n        },\n\n        // enable\n        enable: function() {\n            this.$el.select2(\"enable\", true);\n        },\n\n        // disable\n        disable: function() {\n            this.$el.select2(\"enable\", false);\n        },\n\n        // add\n        add: function(options) {\n            // add options\n            this.select_data.push({\n                id: options.id,\n                text: options.text\n            });\n\n            // refresh\n            this._refresh();\n        },\n\n        // remove\n        del: function(id) {\n            // search option\n            var index = this._getIndex(id);\n\n            // check if found\n            if (index != -1) {\n                // remove options\n                this.select_data.splice(index, 1);\n\n                // refresh\n                this._refresh();\n            }\n        },\n\n        // remove\n        remove: function() {\n            this.$el.select2(\"destroy\");\n        },\n\n        // update\n        update: function(options) {\n            // copy options\n            this.select_data = [];\n            for (var key in options.data) {\n                this.select_data.push(options.data[key]);\n            }\n\n            // refresh\n            this._refresh();\n        },\n\n        // refresh\n        _refresh: function() {\n            // add select2 data based on type of input\n            if (!this.options.multiple) {\n                var selected = this._getValue();\n                var select_opt = {\n                    data: this.select_data,\n                    containerCssClass: this.options.css,\n                    placeholder: this.options.placeholder,\n                    dropdownAutoWidth: true\n                };\n                this.$el.select2(select_opt);\n                // select previous value (if exists)\n                this._setValue(selected);\n            } else {\n                var select_opt = {\n                    multiple: this.options.multiple,\n                    containerCssClass: this.options.css,\n                    placeholder: this.options.placeholder,\n                    minimumInputLength: this.options.minimumInputLength,\n                    ajax: this.options.ajax,\n                    dropdownCssClass: this.options.dropdownCssClass,\n                    escapeMarkup: this.options.escapeMarkup,\n                    formatResult: this.options.formatResult,\n                    formatSelection: this.options.formatSelection,\n                    initSelection: this.options.initSelection,\n                    initialData: this.options.initialData\n                };\n                this.$el.select2(select_opt);\n            }\n        },\n\n        // get index\n        _getIndex: function(value) {\n            // returns the index of the searched value\n            _.findIndex(this.select_data, { id: value });\n        },\n\n        // get value\n        _getValue: function() {\n            return this.$el.select2(\"val\");\n        },\n\n        // set value\n        _setValue: function(new_value) {\n            var index = this._getIndex(new_value);\n            if (index == -1) {\n                if (this.select_data.length > 0) {\n                    new_value = this.select_data[0].id;\n                }\n            }\n            this.$el.select2(\"val\", new_value);\n        },\n\n        // element\n        _template: function(options) {\n            return (\n                '<input type=\"hidden\" value=\"' +\n                this.options.initialData +\n                '\"/>'\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}