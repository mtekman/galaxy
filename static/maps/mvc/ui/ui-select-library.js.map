{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["define","Utils","Ui","Table","List","Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","self","this","config","Model","library_id","on","fetch","reset","get","View","libraries","datasets","onchange","options","library_select","Select","value","dataset_list","set","name","optional","multiple","trigger","label","model","data","each","id","update","text","push","setElement","_template","append","$el","success","undefined","val"],"mappings":"aACAA,QADA,cAAA,iBAAA,kBAAA,kBACAA,SACKC,EAAAC,EAAeC,EAAAC,GAGRC,IAAAA,EAAYC,SAASC,WAAWC,QAChCC,IAAKC,OAAAC,KAAc,gCAInBC,EAAkBN,SAASC,WAAWC,QACtCK,WAAY,WACJC,IAAAA,EAAJC,KACAA,KAAKC,OAAaV,IAAAA,SAASW,OAAQC,WAAF,OACjCH,KAAKC,OAAUG,GAAA,SAAU,WACrBL,EAAKM,OAAQC,OAAF,OAGnBZ,IAAK,WACD,OAMHC,OAAAC,KAfL,iBAYYI,KAAKC,OAAOM,IAAI,cAM5B,eAqGA,OACIC,KArGOjB,SAASiB,KAAKf,QAOjBK,WAAKW,SAAgBnB,GAHrB,IAAIS,EAAOC,KAGXA,KAAKS,UAAY,IAAInB,EAMrBU,KAAAU,SAAA,IAAAb,EAGIc,KAAAA,QAAUC,EADdZ,KAAKa,eAAiB,IAAI1B,EAAG2B,OAAON,MAMpCG,SAAA,SAAAI,GACKC,EAALN,SAAwBrB,OAAJ4B,IAAc,aAAAF,MAK1BhB,KAAAA,aAAa,IAAAV,EAAbmB,MACHU,KAAA,UANLC,SAAAP,EAAAO,SAGIC,SAAUR,EAAQQ,SAMtBT,SAAA,WACKF,EAALY,QAAA,aAKYC,KAAAA,UAAOC,GAAAA,QAAU,WAFX,IAAVC,KADJzB,EAAAU,UAAAgB,KAAA,SAAAF,GAMKV,EAAAA,MARTE,MAAAQ,EAAAG,GAKYJ,MAAOC,EAAMhB,IAAI,YAQrBiB,EAAAA,eAAJG,OAAAH,KAIQxB,KAAAU,SAAIa,GAAAA,QAAU,WACVC,IAAAA,KAEWD,OADAA,EADDV,eAAAe,QAAA7B,EAAVW,SAAAe,KAAA,SAAAF,GAIH,SAAAA,EAAAhB,IAAA,SANLiB,EAAAK,MAQHd,MAAAQ,EAAAG,GACiBC,MAAOH,EAAzBjB,IAAA,YAKAK,EAAQD,aAAYC,OAAQD,KAIhCX,KAAK8B,GAAAA,SAAgBC,WACdnB,EAAAD,UAAmBqB,EAAOrB,SAAKE,EAAAA,WAItCb,KAAKS,WAALT,KAAqB+B,aACjBzB,KAAAA,EAAO,mBADU0B,OAAAhC,KAAAa,eAAAoB,KAEjBC,KAAAA,IAASF,OAAAhC,KAAAgB,aAAWiB,KAGZlC,KAAAA,UAAKgB,OACRT,OAAA,EACJ4B,QAAA,WAPLnC,EAAAc,eAAAQ,QAAA,eAvEwBc,IAAApC,EAAAa,QAAAG,OA4EZhB,EAAKgB,MAAMhB,EAAKa,QAAQG,WAYxCgB,MAAW,SAAAK,GACP,OACIpC,KAAAgB,aAAAD,MAAAqB,IAULL,UAAA,WACGvB,MADV","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\ndefine(\n    [\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"],\n    function(Utils, Ui, Table, List) {\n        // collection of libraries\n        var Libraries = Backbone.Collection.extend({\n            url: Galaxy.root + \"api/libraries?deleted=false\"\n        });\n\n        // collection of dataset\n        var LibraryDatasets = Backbone.Collection.extend({\n            initialize: function() {\n                var self = this;\n                this.config = new Backbone.Model({ library_id: null });\n                this.config.on(\"change\", function() {\n                    self.fetch({ reset: true });\n                });\n            },\n            url: function() {\n                return (\n                    Galaxy.root +\n                    \"api/libraries/\" +\n                    this.config.get(\"library_id\") +\n                    \"/contents\"\n                );\n            }\n        });\n\n        // hda/hdca content selector ui element\n        var View = Backbone.View.extend({\n            // initialize\n            initialize: function(options) {\n                // link this\n                var self = this;\n\n                // collections\n                this.libraries = new Libraries();\n                this.datasets = new LibraryDatasets();\n\n                // link app and options\n                this.options = options;\n\n                // select field for the library\n                // TODO: Remove this once the library API supports searching for library datasets\n                this.library_select = new Ui.Select.View({\n                    onchange: function(value) {\n                        self.datasets.config.set(\"library_id\", value);\n                    }\n                });\n\n                // create ui-list view to keep track of selected data libraries\n                this.dataset_list = new List.View({\n                    name: \"dataset\",\n                    optional: options.optional,\n                    multiple: options.multiple,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                });\n\n                // add reset handler for fetched libraries\n                this.libraries.on(\"reset\", function() {\n                    var data = [];\n                    self.libraries.each(function(model) {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    });\n                    self.library_select.update(data);\n                });\n\n                // add reset handler for fetched library datasets\n                this.datasets.on(\"reset\", function() {\n                    var data = [];\n                    var library_current = self.library_select.text();\n                    if (library_current !== null) {\n                        self.datasets.each(function(model) {\n                            if (model.get(\"type\") === \"file\") {\n                                data.push({\n                                    value: model.id,\n                                    label: model.get(\"name\")\n                                });\n                            }\n                        });\n                    }\n                    self.dataset_list.update(data);\n                });\n\n                // add change event. fires on trigger\n                this.on(\"change\", function() {\n                    options.onchange && options.onchange(self.value());\n                });\n\n                // create elements\n                this.setElement(this._template());\n                this.$(\".library-select\").append(this.library_select.$el);\n                this.$el.append(this.dataset_list.$el);\n\n                // initial fetch of libraries\n                this.libraries.fetch({\n                    reset: true,\n                    success: function() {\n                        self.library_select.trigger(\"change\");\n                        if (self.options.value !== undefined) {\n                            self.value(self.options.value);\n                        }\n                    }\n                });\n            },\n\n            /** Return/Set currently selected library datasets */\n            value: function(val) {\n                return this.dataset_list.value(val);\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                    '<span class=\"library-title\">Select Library</span>' +\n                    '<span class=\"library-select\"/>' +\n                    \"</div>\" +\n                    \"</div>\"\n                );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n"]}