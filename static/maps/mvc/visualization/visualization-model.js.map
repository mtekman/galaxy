{"version":3,"sources":["mvc/visualization/visualization-model.js"],"names":["Visualization","Backbone","Model","extend","defaults","config","urlRoot","Galaxy","root","initialize","data","_","isObject","this","_setUpListeners","set","key","val","oldConfig","get","clone","prototype","call","toString","idAndTitle","VisualizationCollection","Collection","model","url","models","options","collection","map","id","existing","merged","toJSON","historyId","length","join"],"mappings":"aASA,IAAIA,cAAgBC,SAASC,MAAMC,QAO3BC,UADAC,WAMAC,QAAS,WAATA,OAASC,OAAAC,KADT,sBASAC,WAAY,SAASC,GAIbC,EAAEC,SAASF,EAAKL,SAAWM,EAAEC,SAASC,KAAKT,SAASC,SADxDM,EAAAP,SAAAM,EAAAL,OAAAQ,KAAAT,SAAAC,QAGCQ,KAAAC,mBAKLA,gBAAA,aAQAC,IAAA,SAAAC,EAAAC,GAEK,GAASD,WAATA,EAAmB,CACpB,IAAAE,EAAAL,KAAAM,IAAA,UAGIR,EAAAC,SAAAM,KACAD,EAAAN,EAAAR,OAAAQ,EAAAS,MAAAF,GAAAD,IAIH,OADIhB,SAAAC,MAAAmB,UAAAN,IAAAO,KAAAT,KAAAG,EAAAC,GACJJ,MAKLU,SAAA,WACA,IAAAC,EAAAX,KAAAM,IAAA,OAAA,GAIQK,OAHEX,KAAAM,IAAA,WACFK,GAAkBL,IAAIN,KAATM,IAAjB,UAEIK,iBAAyBL,EAAzB,OAYZM,wBAA0BxB,SAASyB,WAAWvB,QAC9CwB,MAAA3B,cAOI4B,IAAK,WAAA,OAAArB,OAAWC,KAAA,sBAOhBC,WAAY,SAASoB,EAAQC,GAA7BrB,EAAYqB,OAUZf,IAAA,SAAAc,EAAAC,GAMI,IAAAC,EAAAlB,KACIkB,EAAAA,EAAAA,IAAaF,EAAjB,SAAAF,GACAE,IAAWG,EAAYD,EAASJ,IAATA,EAAgBM,IAC/BC,IAAAA,EACCA,OAAUP,EAIf,IAAAQ,EAAAD,EAAAE,SAEEjC,OADEgC,EAAAA,OAASD,EAAAA,GACJC,IAGblC,SAAAyB,WAAAL,UAAAN,IAAAO,KAAAT,KAAAgB,EAAAC,IAIJP,SAAA,WACAA,OAEQ,4BAIPV,KAAAwB,UAAAxB,KAAAyB,QAAAC,OAvDT,KAsDcA,KAAK","file":"../../../scripts/mvc/visualization/visualization-model.js","sourcesContent":["//define([\n//], function(){\n\n//==============================================================================\n/** @class Model for a saved Galaxy visualization.\n *\n *  @augments Backbone.Model\n *  @constructs\n */\nvar Visualization = Backbone.Model.extend(\n    /** @lends Visualization.prototype */ {\n        ///** logger used to record this.log messages, commonly set to console */\n        //// comment this out to suppress log output\n        //logger              : console,\n\n        /** default attributes for a model */\n        defaults: {\n            config: {}\n        },\n\n        /** override urlRoot to handle prefix */\n        urlRoot: function() {\n            var apiUrl = \"api/visualizations\";\n            return Galaxy.root + apiUrl;\n        },\n\n        /** Set up the model, determine if accessible, bind listeners\n     *  @see Backbone.Model#initialize\n     */\n        initialize: function(data) {\n            //this.log( this + '.initialize', data, this.attributes );\n\n            // munge config sub-object here since bbone won't handle defaults with this\n            if (_.isObject(data.config) && _.isObject(this.defaults.config)) {\n                _.defaults(data.config, this.defaults.config);\n            }\n\n            this._setUpListeners();\n        },\n\n        /** set up any event listeners\n     */\n        _setUpListeners: function() {\n            //this.on( 'change', function(){\n            //    console.info( 'change:', arguments );\n            //});\n        },\n\n        // ........................................................................ config\n        /** override set to properly allow update and trigger change when setting the sub-obj 'config' */\n        set: function(key, val) {\n            //TODO: validate config is object\n            if (key === \"config\") {\n                var oldConfig = this.get(\"config\");\n                // extend if already exists (is this correct behavior? no way to eliminate keys or reset entirely)\n                // clone in order to trigger change (diff. obj ref)\n                if (_.isObject(oldConfig)) {\n                    val = _.extend(_.clone(oldConfig), val);\n                }\n            }\n            Backbone.Model.prototype.set.call(this, key, val);\n            return this;\n        },\n\n        // ........................................................................ misc\n        /** String representation */\n        toString: function() {\n            var idAndTitle = this.get(\"id\") || \"\";\n            if (this.get(\"title\")) {\n                idAndTitle += \":\" + this.get(\"title\");\n            }\n            return \"Visualization(\" + idAndTitle + \")\";\n        }\n    }\n);\n\n//==============================================================================\n/** @class Backbone collection of visualization models\n *\n *  @constructs\n */\nvar VisualizationCollection = Backbone.Collection.extend(\n    /** @lends VisualizationCollection.prototype */ {\n        model: Visualization,\n\n        ///** logger used to record this.log messages, commonly set to console */\n        //// comment this out to suppress log output\n        //logger              : console,\n\n        url: function() {\n            return Galaxy.root + \"api/visualizations\";\n        },\n\n        /** Set up.\n     *  @see Backbone.Collection#initialize\n     */\n        initialize: function(models, options) {\n            options = options || {};\n            //this._setUpListeners();\n        },\n\n        //_setUpListeners : function(){\n        //},\n\n        // ........................................................................ common queries\n        // ........................................................................ ajax\n        // ........................................................................ misc\n        set: function(models, options) {\n            // arrrrrrrrrrrrrrrrrg...\n            // override to get a correct/smarter merge when incoming data is partial (e.g. stupid backbone)\n            //  w/o this partial models from the server will fill in missing data with model defaults\n            //  and overwrite existing data on the client\n            // see Backbone.Collection.set and _prepareModel\n            var collection = this;\n            models = _.map(models, function(model) {\n                var existing = collection.get(model.id);\n                if (!existing) {\n                    return model;\n                }\n\n                // merge the models _BEFORE_ calling the superclass version\n                var merged = existing.toJSON();\n                _.extend(merged, model);\n                return merged;\n            });\n            // now call superclass when the data is filled\n            Backbone.Collection.prototype.set.call(this, models, options);\n        },\n\n        /** String representation. */\n        toString: function() {\n            return [\n                \"VisualizationCollection(\",\n                [this.historyId, this.length].join(),\n                \")\"\n            ].join(\"\");\n        }\n    }\n);\n\n//==============================================================================\n//return {\n//    Visualization           : Visualization,\n//    VisualizationCollection : VisualizationCollection\n//};});\n"]}