{"version":3,"sources":["mvc/job/job-li.js"],"names":["define","_super","LIST_ITEM","DATASET_LIST","BASE_MVC","_l","FoldoutListItemView","className","prototype","foldoutPanelClass","DatasetList","id","this","model","get","join","initialize","attributes","logger","tool","log","call","jobData","_swapNewRender","linkTarget","$newRender","options","has","$el","addClass","_getFoldoutPanelOptions","_","extend","collection","outputCollection","selecting","labelParamMap","params","each","inputs","i","label","model_class","name","labelInputMap","view","exactMatch","input","toolInput","_findToolInput","_findRepeatToolInput","toolInputs","findWhere","partialMatch","subMatch","indexOf","find","JobListItemView","templates","wrapTemplate","titleBarTemplate","detailsTemplate","titleBar","subtitle","subtitleTemplate","details"],"mappings":"aAAAA,QAEQ,qBAMA,2BACIC,eACJ,sBAHJ,SAASC,EAAWC,EAAcC,EAAUC,GAOpC,IAAAJ,EAAAC,EAAAI,oBAIIC,EAAkBC,EAAUD,QAK5BE,UAAmBN,EAAAA,UAAaO,UATI,OAKpCC,GAAI,WAMJ,OAAA,MAAAC,KAAAC,MAAAC,IAAA,OAAAC,KAAA,MAGQN,kBAAmBI,EAALH,YAGlBT,WAAA,SAAiBe,GAJbC,EAAWC,SAMHD,KAAAA,OAAWE,KAAQN,MAA/BK,OAAAD,EAAAC,QAHAN,KAAKQ,IAAIR,KAAO,eAAgBK,GAMhChB,EAAAO,UAAAQ,WAAAK,KAAAT,KAAAK,GAtBgCL,KAAAO,KAAAF,EAAAE,SAoBhCP,KAAKU,QAAUL,EAAWK,YAQnBd,KAAAA,WAAUe,EAAoBC,YAAMC,UAI3CF,eAAA,SAAAE,GAKIC,OArC4BzB,EAAAO,UAAAe,eAAAF,KAAAT,KAAAa,GA6B5Bb,KAAKC,MAAMc,IAAI,UAMvBf,KAAAgB,IAAAC,SAAA,SAAAjB,KAAAC,MAAAC,IAAA,UAEkBb,KAAAA,KAGd6B,wBAAA,WAxCgC,IAAAJ,EAAAzB,EAAAO,UAAAsB,wBAAAT,KAsC5BT,MASR,OAAAmB,EAAAC,OAAAN,GACAO,WAAArB,KAAAC,MAAAqB,iBANQC,WAAW,KAgBPC,eAAAA,WAHR,IAAAC,EAAAzB,KAAAC,MAAAC,IAAA,UAMOsB,KAOA,OApEyBL,EAAAO,KAAA1B,KAAAO,KAAAoB,OAAA,SAAAC,GAgEpBA,EAAAC,OAAW,sBAAXD,EAAAE,cACZN,EAAAI,EAAAC,OAAAJ,EAAAG,EAAAG,SAGYrB,GAGJsB,eAAAA,WAHR,IAAAC,EAAAjC,KAMOgC,KAOHE,OAjF4Bf,EAAAO,KAAA1B,KAAAU,QAAAiB,OAAA,SAAAQ,GAqE5B,IAAIC,EAAYH,EAAKI,eAAeF,EAAMJ,MAQlDK,IACgBJ,EAAAI,EAAAP,OAAeM,KAGvBD,GAIJG,eAAYC,SAAAA,GALZ,IAAIC,EAAavC,KAAKO,KAAKoB,OAQ/BO,EAAAf,EAAAqB,UAAAD,GAAAR,KAAAA,IACAO,OAAAA,GAGQG,KAAetB,qBAAmBY,EAAAQ,IAIlCD,qBAAA,SAAAP,EAAAQ,GALJA,EAAaA,GAAcvC,KAAKO,KAAKoB,OAQjCe,IAAAA,EAAkBD,EAAAA,KAAAA,EAAqB,SAAAb,GAChCG,OAAP,IAAYY,EAAQf,QAAbA,EAAAG,QAEJW,GAAAA,EAOV,OAHDvB,EAAAyB,KAAAH,EAAAd,OAAA,SAAAC,GACU,OAAW,IAAXG,EAAAY,QAAWf,EAAAG,SAQ7Bc,SAAgBjD,WACZ,MAAA,mBAAAI,KAAAC,MAAA,OA6FJ,OApFQ4C,EAAAjD,UACAkD,UAAA,WARatD,EAASuD,cActB,6BACA,wCAIAC,+BAII,yBACA,6CAfJ,SAmCI,sCACA,gCAGA,8BACA,WAjDR,IAuDIC,EAAkBzD,EAASuD,cAKvB,6CAEA,sBAIA,kDACA,SAxCA,yBAuDC3B,+DACL,6BACA8B,IACAC,EAAUC,WACVC,oDAJJ,SArFJ,SAsCY,UAwDL,OA/NfD,EAAA5D,EAAAuD,cA8KoB,yBACA,+DAOA,UAEJ,OAGAE,EAAkBzD,EAASuD,cAEvB,wBAKA,uBACA,iEACA,0FACA,6CAEA,uDACA,SACA,WACA,iEACA,0DACA,6CACA,0CACA,SACA,WACA,SACA,UAEJ,OAGJ,OAAO5B,EAAEC,UAAW/B,EAAOO,UAAUkD,WAEjCI,SAAUF,EACVG,SAAUC,EACVC,QAASJ,IA9ET,IAoFJJ,gBAAiBA","file":"../../../scripts/mvc/job/job-li.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-item\",\n        \"mvc/dataset/dataset-list\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(LIST_ITEM, DATASET_LIST, BASE_MVC, _l) {\n        //==============================================================================\n        var _super = LIST_ITEM.FoldoutListItemView;\n        /** @class A job view used from within a larger list of jobs.\n *      Each job itself is a foldout panel of history contents displaying the outputs of this job.\n */\n        var JobListItemView = _super.extend(\n            /** @lends JobListItemView.prototype */ {\n                /** logger used to record this.log messages, commonly set to console */\n                //logger              : console,\n\n                className: _super.prototype.className + \" job\",\n                id: function() {\n                    return [\"job\", this.model.get(\"id\")].join(\"-\");\n                },\n\n                foldoutPanelClass: DATASET_LIST.DatasetList,\n\n                /** Set up: instance vars, options, and event handlers */\n                initialize: function(attributes) {\n                    if (attributes.logger) {\n                        this.logger = this.model.logger = attributes.logger;\n                    }\n                    this.log(this + \".initialize:\", attributes);\n                    _super.prototype.initialize.call(this, attributes);\n\n                    this.tool = attributes.tool || {};\n                    this.jobData = attributes.jobData || {};\n\n                    /** where should pages from links be displayed? (default to new tab/window) */\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n                },\n\n                /** In this override, add the state as a class for use with state-based CSS */\n                _swapNewRender: function($newRender) {\n                    _super.prototype._swapNewRender.call(this, $newRender);\n                    if (this.model.has(\"state\")) {\n                        this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n                    }\n                    return this.$el;\n                },\n\n                /** Stub to return proper foldout panel options */\n                _getFoldoutPanelOptions: function() {\n                    var options = _super.prototype._getFoldoutPanelOptions.call(\n                        this\n                    );\n                    return _.extend(options, {\n                        collection: this.model.outputCollection,\n                        selecting: false\n                    });\n                },\n\n                // ........................................................................ template helpers\n                // all of these are ADAPTERs - in other words, it might be better if the API returned the final form\n                //  or something similar in order to remove some of the complexity here\n\n                /** Return tool.inputs that should/can be safely displayed */\n                _labelParamMap: function() {\n                    //ADAPTER\n                    var params = this.model.get(\"params\"),\n                        labelParamMap = {};\n                    _.each(this.tool.inputs, function(i) {\n                        //console.debug( i.label, i.model_class );\n                        if (i.label && i.model_class !== \"DataToolParameter\") {\n                            labelParamMap[i.label] = params[i.name];\n                        }\n                    });\n                    return labelParamMap;\n                },\n\n                _labelInputMap: function() {\n                    //ADAPTER\n                    var view = this,\n                        labelInputMap = {};\n                    _.each(this.jobData.inputs, function(input) {\n                        var toolInput = view._findToolInput(input.name);\n                        if (toolInput) {\n                            labelInputMap[toolInput.label] = input;\n                        }\n                    });\n                    return labelInputMap;\n                },\n\n                /** Return a tool.inputs object that matches (or partially matches) the given (job input) name */\n                _findToolInput: function(name) {\n                    //ADAPTER\n                    var toolInputs = this.tool.inputs,\n                        exactMatch = _.findWhere(toolInputs, { name: name });\n                    if (exactMatch) {\n                        return exactMatch;\n                    }\n                    return this._findRepeatToolInput(name, toolInputs);\n                },\n\n                /** Return a tool.inputs object that partially matches the given (job input) name (for repeat dataset inputs)*/\n                _findRepeatToolInput: function(name, toolInputs) {\n                    //ADAPTER\n                    toolInputs = toolInputs || this.tool.inputs;\n                    var partialMatch = _.find(toolInputs, function(i) {\n                        return name.indexOf(i.name) === 0;\n                    });\n                    if (!partialMatch) {\n                        return undefined;\n                    }\n\n                    var subMatch = _.find(partialMatch.inputs, function(i) {\n                        return name.indexOf(i.name) !== -1;\n                    });\n                    return subMatch;\n                },\n\n                // ........................................................................ misc\n                /** String representation */\n                toString: function() {\n                    return \"JobListItemView(\" + this.model + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        JobListItemView.prototype.templates = (function() {\n            //TODO: move to require text! plugin\n\n            var elTemplate = BASE_MVC.wrapTemplate([\n                '<div class=\"list-element\">',\n                '<div class=\"id\"><%- model.id %></div>',\n                // errors, messages, etc.\n                '<div class=\"warnings\"></div>',\n\n                // multi-select checkbox\n                '<div class=\"selector\">',\n                '<span class=\"fa fa-2x fa-square-o\"></span>',\n                \"</div>\",\n                // space for title bar buttons - gen. floated to the right\n                '<div class=\"primary-actions\"></div>',\n                '<div class=\"title-bar\"></div>',\n\n                // expandable area for more details\n                '<div class=\"details\"></div>',\n                \"</div>\"\n            ]);\n\n            var titleBarTemplate = BASE_MVC.wrapTemplate(\n                [\n                    // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n                    '<div class=\"title-bar clear\" tabindex=\"0\">',\n                    //'<span class=\"state-icon\"></span>',\n                    '<div class=\"title\">',\n                    '<span class=\"name\"><%- view.tool.name %></span>',\n                    \"</div>\",\n                    '<div class=\"subtitle\">',\n                    '<span class=\"description\"><%- view.tool.description %></span',\n                    '<span class=\"create-time\">',\n                    \" \",\n                    _l(\"Created\"),\n                    \": <%= new Date( job.create_time ).toString() %>, \",\n                    \"</span\",\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"job\"\n            );\n\n            var subtitleTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"subtitle\">',\n                    '<span class=\"description\"><%- view.tool.description %></span',\n                    //'<span class=\"create-time\">',\n                    //    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n                    //'</span',\n                    //'<span class=\"version\">',\n                    //    ' (', _l( 'version' ), ': <%- view.tool.version %>)',\n                    //'</span',\n                    \"</div>\"\n                ],\n                \"job\"\n            );\n\n            var detailsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"details\">',\n                    //'<div class=\"version\">',\n                    //    '<label class=\"prompt\">', _l( 'Version' ), '</label>',\n                    //    '<span class=\"value\"><%- view.tool.version %></span>',\n                    //'</div>',\n                    '<div class=\"params\">',\n                    \"<% _.each( view._labelInputMap(), function( input, label ){ %>\",\n                    '<div class=\"input\" data-input-name=\"<%- input.name %>\" data-input-id=\"<%- input.id %>\">',\n                    '<label class=\"prompt\"><%- label %></label>',\n                    //TODO: input dataset name\n                    '<span class=\"value\"><%- input.content.name %></span>',\n                    \"</div>\",\n                    \"<% }) %>\",\n                    \"<% _.each( view._labelParamMap(), function( param, label ){ %>\",\n                    '<div class=\"param\" data-input-name=\"<%- param.name %>\">',\n                    '<label class=\"prompt\"><%- label %></label>',\n                    '<span class=\"value\"><%- param %></span>',\n                    \"</div>\",\n                    \"<% }) %>\",\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"job\"\n            );\n\n            return _.extend({}, _super.prototype.templates, {\n                //el          : elTemplate,\n                titleBar: titleBarTemplate,\n                subtitle: subtitleTemplate,\n                details: detailsTemplate\n            });\n        })();\n\n        //=============================================================================\n        return {\n            JobListItemView: JobListItemView\n        };\n    }\n);\n"]}