{"version":3,"sources":["mvc/job/job-model.js"],"names":["define","logNamespace","searchableMixin","Job","extend","BASE_MVC","LoggableMixin","SearchableModelMixin","model_class","Model","mixin","tool_id","_logNamespace","defaults","update_time","STATES","NEW","inputs","outputs","params","response","state","key","newParams","JSON","parse","value","parseParams","_","each","attributes","initialize","options","this","debug","set","inReadyState","trigger","currModel","silent","outputCollection","HISTORY_CONTENTS","HistoryContents","_setUpListeners","on","newState","isEmpty","log","previous","contains","READY_STATES","get","hasDetails","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","queueDetailFetching","url","collection","models","console","ids","map","item","notReady","filter","job","haveDetails","all","queue","AJAX_QUEUE","AjaxQueue","fetch","done","matches","matchesWhat","length","fromHistory","historyId","data","history_id","window"],"mappings":"aAAAA,QAEQ,+BAOIC,qBACJ,mBACIC,eACJ,sBAEA,SAAIC,EAAqBC,EAAOC,EAASC,EAAeF,GAGhD,IANJF,EAAkBG,EAASE,qBAWfC,EAAAA,SAAaC,MADPL,OAAAC,EAAAC,eAAAF,OANlBC,EAASK,MASGC,GANJC,cADJ,OAYgBC,UAPRL,YAAa,MAUbM,QAXM,KAYCC,UAAOC,KANdC,UASJC,WACOC,UAEIC,YAAP,KAtBoBN,YAAA,KAgBpBO,MAAON,EAAOC,KAYPG,MAAQ,SAAAC,EAAgBE,GAA/B,OACIC,EAAiBC,OAAKC,KAAMC,YAA5BN,EAAAD,QADJC,GAMJO,YAAA,SAAAR,GACY,IAAAI,KAJR,OAMIK,EAAAC,KAAOV,EAAA,SADXO,EAEII,GATAP,EAAUD,GAAOE,KAAKC,MAAMC,KAEzBH,GAIXQ,WAAY,SAASD,EAAYE,GAmBjCC,KAAAC,MAjBQD,KAAO,mBACPH,EAmBSE,GAGTC,KACIE,IAIKC,SACAC,KACDV,YAAAM,KACAK,IAAAA,YAIPC,QAAA,IAxBLN,KAAKO,iBA4BTV,EAAAU,kBACA,IAAAC,EAAAC,oBA1BIT,KAAKU,mBAoCTA,gBAAA,WAEIV,KAAAW,GAAA,eAAA,SAAAN,EAAAO,GACUC,KAAQC,IA1FEd,KAAA,sBA8DZK,EA+BZO,GAEuBZ,KAAAG,gBACvBH,KAAAI,QA7BgB,cA+BhBC,EACAO,EACAZ,KAAAe,SAAA,aAvGZZ,aAAA,WAoFgB,OAAOR,EAAEqB,SAuCzBlC,EAAAmC,aACAjB,KAAAkB,IAAA,WAjCYC,WAAY,WAER,OAAQxB,EAAEkB,QAAQb,KAAKkB,IAAI,aAoCGE,QAAAC,OAAAC,KAAA,WAqB1BC,SAAYL,WADhB,OApB8B,OAhB1BlB,KAAKkB,IAAI,MAyCjB,IAvCQlB,KAAKkB,IAAI,WACT,KAyCEM,KAAA,QAmEtB,OACItD,IAAKA,EACLuD,cA5D2BN,SAAJO,WADJvD,OAAPC,EAAAC,eApC8BF,QAyClCQ,cAvKJ,OAyKIgD,MAAAA,EAIgBP,QAAOC,OAAWC,KAAA,WACdM,IAAA,WADJ,OAAA5B,KAAAoB,SAMRS,UAAWzB,SAAQ0B,EAAA/B,GADvBgC,QAAA9B,MAAA6B,EAAA/B,IAjCJiC,IAAK,WA2CL,OAAAhC,KAAAiC,IAAA,SAAAC,GACA,OAAAA,EAAAhB,IAAA,SAOAiB,SAAA,WACA,OAAAnC,KAAAoC,OAAA,SAAAC,GACU,OAAAA,EAAWlC,kBAMzBmC,YAAA,WACI,OAAAtC,KAAAuC,IAAA,SAAAF,GACa,OAAAA,EAAAlB,gBAITQ,oBAAA,WAKOE,IAAAA,EAAP7B,KACHwC,EAAA,IAAAC,EAAAC,UA7Fb1C,KAAAiC,IAAA,SAAAI,GAkD4B,OAAO,WA+CnC,OAAAA,EAAAM,OAAArC,QAAA,QAvCgB,OAwChBkC,EAAAI,KAAA,WA9ORf,EAAAzB,QAAA,oBAsM+BoC,GASXK,QAAS,SAASC,GACd,OAAO9C,KAAKoC,OAAO,SAASC,GACxB,OAAOA,EAAIQ,QAAQC,MAM3BvB,SAAU,WACN,OAAQ,iBAAkBvB,KAAK+C,OAAQ,KAAKvB,KAAK,OAOrDwB,YAAa,SAASC,GAClBlB,QAAQ9B,MAAMD,MACd,IACI6B,EAAa,IADA7B,SAOjB,OALA6B,EACKc,OAAQO,MAAQC,WAAYF,KAC5BL,KAAK,WACFQ,OAAOZ,MAAQX,EAAWF,wBAE3BE","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["define(\n    [\n        \"mvc/history/history-contents\",\n        \"mvc/dataset/states\",\n        \"utils/ajax-queue\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(HISTORY_CONTENTS, STATES, AJAX_QUEUE, BASE_MVC, _l) {\n        var logNamespace = \"jobs\";\n        //==============================================================================\n        var searchableMixin = BASE_MVC.SearchableModelMixin;\n        /** @class Represents a job running or ran on the server job handlers.\n */\n        var Job = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n            BASE_MVC.mixin(\n                searchableMixin,\n                /** @lends Job.prototype */ {\n                    _logNamespace: logNamespace,\n\n                    /** default attributes for a model */\n                    defaults: {\n                        model_class: \"Job\",\n\n                        tool_id: null,\n                        exit_code: null,\n\n                        inputs: {},\n                        outputs: {},\n                        params: {},\n\n                        create_time: null,\n                        update_time: null,\n                        state: STATES.NEW\n                    },\n\n                    /** override to parse params on incomming */\n                    parse: function(response, options) {\n                        response.params = this.parseParams(response.params);\n                        return response;\n                    },\n\n                    /** override to treat param values as json */\n                    parseParams: function(params) {\n                        var newParams = {};\n                        _.each(params, function(value, key) {\n                            newParams[key] = JSON.parse(value);\n                        });\n                        return newParams;\n                    },\n\n                    /** instance vars and listeners */\n                    initialize: function(attributes, options) {\n                        this.debug(\n                            this + \"(Job).initialize\",\n                            attributes,\n                            options\n                        );\n\n                        this.set(\n                            \"params\",\n                            this.parseParams(this.get(\"params\")),\n                            { silent: true }\n                        );\n\n                        this.outputCollection =\n                            attributes.outputCollection ||\n                            new HISTORY_CONTENTS.HistoryContents([]);\n                        this._setUpListeners();\n                    },\n\n                    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n                    _setUpListeners: function() {\n                        // if the state has changed and the new state is a ready state, fire an event\n                        this.on(\"change:state\", function(currModel, newState) {\n                            this.log(\n                                this + \" has changed state:\",\n                                currModel,\n                                newState\n                            );\n                            if (this.inReadyState()) {\n                                this.trigger(\n                                    \"state:ready\",\n                                    currModel,\n                                    newState,\n                                    this.previous(\"state\")\n                                );\n                            }\n                        });\n                    },\n\n                    // ........................................................................ common queries\n                    /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n                    inReadyState: function() {\n                        return _.contains(\n                            STATES.READY_STATES,\n                            this.get(\"state\")\n                        );\n                    },\n\n                    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n                    hasDetails: function() {\n                        //?? this may not be reliable\n                        return !_.isEmpty(this.get(\"outputs\"));\n                    },\n\n                    // ........................................................................ ajax\n                    /** root api url */\n                    urlRoot: Galaxy.root + \"api/jobs\",\n                    //url : function(){ return this.urlRoot; },\n\n                    // ........................................................................ searching\n                    // see base-mvc, SearchableModelMixin\n                    /** what attributes of an Job will be used in a text search */\n                    //searchAttributes : [\n                    //    'tool'\n                    //],\n\n                    // ........................................................................ misc\n                    /** String representation */\n                    toString: function() {\n                        return [\n                            \"Job(\",\n                            this.get(\"id\"),\n                            \":\",\n                            this.get(\"tool_id\"),\n                            \")\"\n                        ].join(\"\");\n                    }\n                }\n            )\n        );\n\n        //==============================================================================\n        /** @class Backbone collection for Jobs.\n */\n        var JobCollection = Backbone.Collection\n            .extend(BASE_MVC.LoggableMixin)\n            .extend(\n                /** @lends JobCollection.prototype */ {\n                    _logNamespace: logNamespace,\n\n                    model: Job,\n\n                    /** root api url */\n                    urlRoot: Galaxy.root + \"api/jobs\",\n                    url: function() {\n                        return this.urlRoot;\n                    },\n\n                    intialize: function(models, options) {\n                        console.debug(models, options);\n                    },\n\n                    // ........................................................................ common queries\n                    /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n                    ids: function() {\n                        return this.map(function(item) {\n                            return item.get(\"id\");\n                        });\n                    },\n\n                    /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n                    notReady: function() {\n                        return this.filter(function(job) {\n                            return !job.inReadyState();\n                        });\n                    },\n\n                    /** return true if any jobs don't have details */\n                    haveDetails: function() {\n                        return this.all(function(job) {\n                            return job.hasDetails();\n                        });\n                    },\n\n                    // ........................................................................ ajax\n                    /** fetches all details for each job in the collection using a queue */\n                    queueDetailFetching: function() {\n                        var collection = this,\n                            queue = new AJAX_QUEUE.AjaxQueue(\n                                this.map(function(job) {\n                                    return function() {\n                                        return job.fetch({ silent: true });\n                                    };\n                                })\n                            );\n                        queue.done(function() {\n                            collection.trigger(\"details-loaded\");\n                        });\n                        return queue;\n                    },\n\n                    //toDAG : function(){\n                    //    return new JobDAG( this.toJSON() );\n                    //},\n\n                    // ........................................................................ sorting/filtering\n                    /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n                    matches: function(matchesWhat) {\n                        return this.filter(function(job) {\n                            return job.matches(matchesWhat);\n                        });\n                    },\n\n                    // ........................................................................ misc\n                    /** String representation. */\n                    toString: function() {\n                        return [\"JobCollection(\", this.length, \")\"].join(\"\");\n                    }\n\n                    //----------------------------------------------------------------------------- class vars\n                },\n                {\n                    /** class level fn for fetching the job details for all jobs in a history */\n                    fromHistory: function(historyId) {\n                        console.debug(this);\n                        var Collection = this,\n                            collection = new Collection([]);\n                        collection\n                            .fetch({ data: { history_id: historyId } })\n                            .done(function() {\n                                window.queue = collection.queueDetailFetching();\n                            });\n                        return collection;\n                    }\n                }\n            );\n\n        //=============================================================================\n        return {\n            Job: Job,\n            JobCollection: JobCollection\n        };\n    }\n);\n"]}