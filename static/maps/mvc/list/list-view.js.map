{"version":3,"sources":["mvc/list/list-view.js"],"names":["define","logNamespace","LIST_ITEM","LoadingIndicator","BASE_MVC","_l","collectionClass","Backbone","Collection","LoggableMixin","extend","tagName","viewClass","ListItemView","emptyMsg","className","searchPlaceholder","noneFoundMsg","attributes","initialize","options","this","logger","filters","log","fxSpeed","_","has","searchFor","dragItems","undefined","selecting","selected","lastSelected","views","collection","_setUpListeners","_createDefaultCollection","$scrollContainer","error","title","console","model","_hideLoadingIndicator","listenTo","off","once","on","trigger","xhr","msg","details","loading","_showLoadingIndicator","loading-done","_setUpCollectionListeners","_setUpViewListeners","update","changes","length","ev","renderAll","altKey","showSelectors","view","added","addItemView","without","removed","removeItemView","first","speed","_buildNewRender","debug","_renderTitle","_renderSubtitle","$newRender","_renderSearch","shiftKey","viewFromModelId","lastSelectedView","selectRange","templates","push","id","view:de-selected","$where","render","_queueNewRender","panel","_swapNewRender","next","empty","attr","$","controls","replaceWith","$controls","actions","multiselectActions","$menu","$newMenu","queue","$actions","$el","fadeOut","preventDefault","action","func","find","append","fadeIn","children","parent","_setUpBehaviors","tooltip","_renderMultiselectActionMenu","$whereTo","$list","shownModels","join","map","html","_attachItems","_renderEmptyMessage","matchesAll","_createItemView","$messages","$emptyMessage","self","forEach","stopListening","freeViews","_destroyItemViews","_filterCollection","itemModel","_getItemViewOptions","expanded","selectable","contains","args","Array","prototype","slice","bind","_filterItem","json","every","v","fn","call","_getItemViewClass","_destroyItemView","_renderItemView$el","each","draggable","arguments","_attachView","getSelectedModels","modelIndex","toJSON","dataTransfer","setData","JSON","stringify","index","text","expandAll","expand","indexOf","viewFromModel","filter","is","viewA","useFx","indexA","viewB","onsearch","splice","_insertIntoListAt","hide","slideDown","placeholder","show","initialVal","$what","prepend","searchItems","eq","after","renderItems","$search","val","remove","slideUp","viewsWhereModel","properties","isMatch","viewRange","indexB","event","deselect","searchInput","getSelectedViews","_firstSearch","onclear","clearSearch","force","indicator","callback","THROTTLE_SELECTOR_FX_AT","scrollTo","animate","showSelector","hideSelectors","scrollToItem","hideSelector","toggleSelectors","elTemplate","wrapTemplate","select","deselectAll","controlsTemplate","range","ModelListPanel","ListPanel","constructor","setModel","freeModel","oldModelId","_setUpModelListeners","scrollPosition","scrollTop","pos","scrollToTop","unshift","scrollToId","toString","el","modelCollectionKey","get","apply","info","_renderControls","clone"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-item\",\n        \"ui/loading-indicator\",\n        \"mvc/base-mvc\",\n        \"utils/localization\",\n        \"ui/search-input\"\n    ],\n    function(LIST_ITEM, LoadingIndicator, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"list\";\n        /* ============================================================================\nTODO:\n\n============================================================================ */\n        /** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\n        var ListPanel = Backbone.View.extend(BASE_MVC.LoggableMixin).extend(\n            /** @lends ListPanel.prototype */ {\n                _logNamespace: logNamespace,\n\n                /** class to use for constructing the sub-views */\n                viewClass: LIST_ITEM.ListItemView,\n                /** class to used for constructing collection of sub-view models */\n                collectionClass: Backbone.Collection,\n\n                tagName: \"div\",\n                className: \"list-panel\",\n\n                /** (in ms) that jquery effects will use */\n                fxSpeed: \"fast\",\n\n                /** string to display when the collection has no contents */\n                emptyMsg: _l(\"This list is empty\"),\n                /** displayed when no items match the search terms */\n                noneFoundMsg: _l(\"No matching items found\"),\n                /** string used for search placeholder */\n                searchPlaceholder: _l(\"search\"),\n\n                // ......................................................................... SET UP\n                /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n                initialize: function(attributes, options) {\n                    attributes = attributes || {};\n                    // set the logger if requested\n                    if (attributes.logger) {\n                        this.logger = attributes.logger;\n                    }\n                    this.log(this + \".initialize:\", attributes);\n\n                    // ---- instance vars\n                    /** how quickly should jquery fx run? */\n                    this.fxSpeed = _.has(attributes, \"fxSpeed\")\n                        ? attributes.fxSpeed\n                        : this.fxSpeed;\n\n                    /** filters for displaying subviews */\n                    this.filters = [];\n                    /** current search terms */\n                    this.searchFor = attributes.searchFor || \"\";\n\n                    /** loading indicator */\n                    // this.indicator = new LoadingIndicator( this.$el );\n\n                    /** currently showing selectors on items? */\n                    this.selecting =\n                        attributes.selecting !== undefined\n                            ? attributes.selecting\n                            : true;\n                    //this.selecting = false;\n\n                    /** cached selected item.model.ids to persist btwn renders */\n                    this.selected = attributes.selected || [];\n                    /** the last selected item.model.id */\n                    this.lastSelected = null;\n\n                    /** are sub-views draggable */\n                    this.dragItems = attributes.dragItems || false;\n\n                    /** list item view class (when passed models) */\n                    this.viewClass = attributes.viewClass || this.viewClass;\n\n                    /** list item views */\n                    this.views = [];\n                    /** list item models */\n                    this.collection =\n                        attributes.collection ||\n                        this._createDefaultCollection();\n\n                    /** filter fns run over collection items to see if they should show in the list */\n                    this.filters = attributes.filters || [];\n\n                    /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n                    this.$scrollContainer =\n                        attributes.$scrollContainer || this.$scrollContainer;\n\n                    /** @type {String} generic title */\n                    this.title = attributes.title || \"\";\n                    /** @type {String} generic subtitle */\n                    this.subtitle = attributes.subtitle || \"\";\n\n                    this._setUpListeners();\n                },\n\n                // ------------------------------------------------------------------------ listeners\n                /** create any event listeners for the list */\n                _setUpListeners: function() {\n                    this.off();\n\n                    //TODO: move errorHandler down into list-view from history-view or\n                    //  pass to global error handler (Galaxy)\n                    this.on({\n                        error: function(model, xhr, options, msg, details) {\n                            //this.errorHandler( model, xhr, options, msg, details );\n                            console.error(model, xhr, options, msg, details);\n                        },\n                        // show hide the loading indicator\n                        loading: function() {\n                            this._showLoadingIndicator(\"loading...\", 40);\n                        },\n                        \"loading-done\": function() {\n                            this._hideLoadingIndicator(40);\n                        }\n                    });\n\n                    // throw the first render up as a diff namespace using once (for outside consumption)\n                    this.once(\"rendered\", function() {\n                        this.trigger(\"rendered:initial\", this);\n                    });\n\n                    this._setUpCollectionListeners();\n                    this._setUpViewListeners();\n                    return this;\n                },\n\n                /** create and return a collection for when none is initially passed */\n                _createDefaultCollection: function() {\n                    // override\n                    return new this.collectionClass([]);\n                },\n\n                /** listening for collection events */\n                _setUpCollectionListeners: function() {\n                    this.log(\n                        this + \"._setUpCollectionListeners\",\n                        this.collection\n                    );\n                    this.stopListening(this.collection);\n\n                    // bubble up error events\n                    this.listenTo(this.collection, {\n                        error: function(model, xhr, options, msg, details) {\n                            this.trigger(\n                                \"error\",\n                                model,\n                                xhr,\n                                options,\n                                msg,\n                                details\n                            );\n                        },\n                        update: function(collection, options) {\n                            var changes = options.changes;\n                            // console.info( collection + ', update:', changes, '\\noptions:', options );\n                            // more than one: render everything\n                            if (\n                                options.renderAll ||\n                                changes.added.length + changes.removed.length >\n                                    1\n                            ) {\n                                return this.renderItems();\n                            }\n                            // otherwise, let the single add/remove handlers do it\n                            if (changes.added.length === 1) {\n                                return this.addItemView(\n                                    _.first(changes.added),\n                                    collection,\n                                    options\n                                );\n                            }\n                            if (changes.removed.length === 1) {\n                                return this.removeItemView(\n                                    _.first(changes.removed),\n                                    collection,\n                                    options\n                                );\n                            }\n                        }\n                    });\n                    return this;\n                },\n\n                /** listening for sub-view events that bubble up with the 'view:' prefix */\n                _setUpViewListeners: function() {\n                    this.log(this + \"._setUpViewListeners\");\n\n                    // shift to select a range\n                    this.on({\n                        \"view:selected\": function(view, ev) {\n                            if (ev && ev.shiftKey && this.lastSelected) {\n                                var lastSelectedView = this.viewFromModelId(\n                                    this.lastSelected\n                                );\n                                if (lastSelectedView) {\n                                    this.selectRange(view, lastSelectedView);\n                                }\n                            } else if (ev && ev.altKey && !this.selecting) {\n                                this.showSelectors();\n                            }\n                            this.selected.push(view.model.id);\n                            this.lastSelected = view.model.id;\n                        },\n\n                        \"view:de-selected\": function(view, ev) {\n                            this.selected = _.without(\n                                this.selected,\n                                view.model.id\n                            );\n                        }\n                    });\n                },\n\n                // ------------------------------------------------------------------------ rendering\n                /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n                render: function(speed) {\n                    this.log(this + \".render\", speed);\n                    var $newRender = this._buildNewRender();\n                    this._setUpBehaviors($newRender);\n                    this._queueNewRender($newRender, speed);\n                    return this;\n                },\n\n                /** Build a temp div containing the new children for the view's $el. */\n                _buildNewRender: function() {\n                    this.debug(this + \"(ListPanel)._buildNewRender\");\n                    var $newRender = $(this.templates.el({}, this));\n                    this._renderControls($newRender);\n                    this._renderTitle($newRender);\n                    this._renderSubtitle($newRender);\n                    this._renderSearch($newRender);\n                    this.renderItems($newRender);\n                    return $newRender;\n                },\n\n                /** Build a temp div containing the new children for the view's $el. */\n                _renderControls: function($newRender) {\n                    this.debug(this + \"(ListPanel)._renderControls\");\n                    var $controls = $(this.templates.controls({}, this));\n                    $newRender.find(\".controls\").replaceWith($controls);\n                    return $controls;\n                },\n\n                /** return a jQuery object containing the title DOM */\n                _renderTitle: function($where) {\n                    //$where = $where || this.$el;\n                    //$where.find( '.title' ).replaceWith( ... )\n                },\n\n                /** return a jQuery object containing the subtitle DOM (if any) */\n                _renderSubtitle: function($where) {\n                    //$where = $where || this.$el;\n                    //$where.find( '.title' ).replaceWith( ... )\n                },\n\n                /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n                _queueNewRender: function($newRender, speed) {\n                    speed = speed === undefined ? this.fxSpeed : speed;\n                    var panel = this;\n                    panel.log(\"_queueNewRender:\", $newRender, speed);\n\n                    $(panel).queue(\"fx\", [\n                        function(next) {\n                            panel.$el.fadeOut(speed, next);\n                        },\n                        function(next) {\n                            panel._swapNewRender($newRender);\n                            next();\n                        },\n                        function(next) {\n                            panel.$el.fadeIn(speed, next);\n                        },\n                        function(next) {\n                            panel.trigger(\"rendered\", panel);\n                            next();\n                        }\n                    ]);\n                },\n\n                /** empty out the current el, move the $newRender's children in */\n                _swapNewRender: function($newRender) {\n                    this.$el\n                        .empty()\n                        .attr(\"class\", this.className)\n                        .append($newRender.children());\n                    if (this.selecting) {\n                        this.showSelectors(0);\n                    }\n                    return this;\n                },\n\n                /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n                _setUpBehaviors: function($where) {\n                    $where = $where || this.$el;\n                    this.$controls($where)\n                        .find(\"[title]\")\n                        .tooltip();\n                    // set up the pupup for actions available when multi selecting\n                    this._renderMultiselectActionMenu($where);\n                    return this;\n                },\n\n                /** render a menu containing the actions available to sets of selected items */\n                _renderMultiselectActionMenu: function($where) {\n                    $where = $where || this.$el;\n                    var $menu = $where.find(\".list-action-menu\"),\n                        actions = this.multiselectActions();\n                    if (!actions.length) {\n                        return $menu.empty();\n                    }\n\n                    var $newMenu = $(\n                        [\n                            '<div class=\"list-action-menu btn-group\">',\n                            '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                            _l(\"For all selected\"),\n                            \"...\",\n                            \"</button>\",\n                            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                            \"</ul>\",\n                            \"</div>\"\n                        ].join(\"\")\n                    );\n                    var $actions = actions.map(function(action) {\n                        var html = [\n                            '<li><a href=\"javascript:void(0);\">',\n                            action.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                        return $(html).click(function(ev) {\n                            ev.preventDefault();\n                            return action.func(ev);\n                        });\n                    });\n                    $newMenu.find(\"ul\").append($actions);\n                    $menu.replaceWith($newMenu);\n                    return $newMenu;\n                },\n\n                /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n                multiselectActions: function() {\n                    return [];\n                },\n\n                // ------------------------------------------------------------------------ sub-$element shortcuts\n                /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n                $scrollContainer: function($where) {\n                    // override or set via attributes.$scrollContainer\n                    return ($where || this.$el).parent().parent();\n                },\n                /** convenience selector for the section that displays the list controls */\n                $controls: function($where) {\n                    return ($where || this.$el).find(\"> .controls\");\n                },\n                /** list-items: where the subviews are contained in the view's dom */\n                $list: function($where) {\n                    return ($where || this.$el).find(\"> .list-items\");\n                },\n                /** container where list messages are attached */\n                $messages: function($where) {\n                    //TODO: controls isn't really correct here (only for ModelListPanel)\n                    return ($where || this.$el).find(\"> .controls .messages\");\n                },\n                /** the message displayed when no views can be shown (no views, none matching search) */\n                $emptyMessage: function($where) {\n                    return ($where || this.$el).find(\"> .empty-message\");\n                },\n\n                // ------------------------------------------------------------------------ hda sub-views\n                /** render the subviews for the list's collection */\n                renderItems: function($whereTo) {\n                    $whereTo = $whereTo || this.$el;\n                    var panel = this;\n                    panel.log(this + \".renderItems\", $whereTo);\n\n                    var $list = panel.$list($whereTo);\n                    panel.freeViews();\n                    // console.log( 'views freed' );\n                    //TODO:? cache and re-use views?\n                    var shownModels = panel._filterCollection();\n                    // console.log( 'models filtered:', shownModels );\n\n                    panel.views = shownModels.map(function(itemModel) {\n                        var view = panel._createItemView(itemModel);\n                        return view;\n                    });\n\n                    $list.empty();\n                    // console.log( 'list emptied' );\n                    if (panel.views.length) {\n                        panel._attachItems($whereTo);\n                        // console.log( 'items attached' );\n                    }\n                    panel\n                        ._renderEmptyMessage($whereTo)\n                        .toggle(!panel.views.length);\n                    panel.trigger(\"views:ready\", panel.views);\n\n                    // console.log( '------------------------------------------- rendering items' );\n                    return panel.views;\n                },\n\n                /** Filter the collection to only those models that should be currently viewed */\n                _filterCollection: function() {\n                    // override this\n                    var panel = this;\n                    return panel.collection.filter(\n                        _.bind(panel._filterItem, panel)\n                    );\n                },\n\n                /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n                _filterItem: function(model) {\n                    // override this\n                    var panel = this;\n                    return (\n                        _.every(\n                            panel.filters.map(function(fn) {\n                                return fn.call(model);\n                            })\n                        ) &&\n                        (!panel.searchFor || model.matchesAll(panel.searchFor))\n                    );\n                },\n\n                /** Create a view for a model and set up it's listeners */\n                _createItemView: function(model) {\n                    var ViewClass = this._getItemViewClass(model);\n                    var options = _.extend(this._getItemViewOptions(model), {\n                        model: model\n                    });\n                    var view = new ViewClass(options);\n                    this._setUpItemViewListeners(view);\n                    return view;\n                },\n\n                /** Free a view for a model. Note: does not remove it from the DOM */\n                _destroyItemView: function(view) {\n                    this.stopListening(view);\n                    this.views = _.without(this.views, view);\n                },\n\n                _destroyItemViews: function(view) {\n                    var self = this;\n                    self.views.forEach(function(v) {\n                        self.stopListening(v);\n                    });\n                    self.views = [];\n                    return self;\n                },\n\n                /** free any sub-views the list has */\n                freeViews: function() {\n                    return this._destroyItemViews();\n                },\n\n                /** Get the bbone view class based on the model */\n                _getItemViewClass: function(model) {\n                    // override this\n                    return this.viewClass;\n                },\n\n                /** Get the options passed to the new view based on the model */\n                _getItemViewOptions: function(model) {\n                    // override this\n                    return {\n                        //logger      : this.logger,\n                        fxSpeed: this.fxSpeed,\n                        expanded: false,\n                        selectable: this.selecting,\n                        selected: _.contains(this.selected, model.id),\n                        draggable: this.dragItems\n                    };\n                },\n\n                /** Set up listeners for new models */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    // send all events to the panel, re-namspaceing them with the view prefix\n                    this.listenTo(view, \"all\", function() {\n                        var args = Array.prototype.slice.call(arguments, 0);\n                        args[0] = \"view:\" + args[0];\n                        panel.trigger.apply(panel, args);\n                    });\n\n                    // drag multiple - hijack ev.setData to add all selected items\n                    this.listenTo(\n                        view,\n                        \"draggable:dragstart\",\n                        function(ev, v) {\n                            //TODO: set multiple drag data here\n                            var json = {},\n                                selected = this.getSelectedModels();\n                            if (selected.length) {\n                                json = selected.toJSON();\n                            } else {\n                                json = [v.model.toJSON()];\n                            }\n                            ev.dataTransfer.setData(\n                                \"text\",\n                                JSON.stringify(json)\n                            );\n                            //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n                        },\n                        this\n                    );\n\n                    return panel;\n                },\n\n                /** Attach views in this.views to the model based on $whereTo */\n                _attachItems: function($whereTo) {\n                    var self = this;\n                    // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n                    //ASSUMES: $list has been emptied\n                    this.$list($whereTo).append(\n                        this.views.map(function(view) {\n                            return self._renderItemView$el(view);\n                        })\n                    );\n                    return this;\n                },\n\n                /** get a given subview's $el (or whatever may wrap it) and return it */\n                _renderItemView$el: function(view) {\n                    // useful to wrap and override\n                    return view.render(0).$el;\n                },\n\n                /** render the empty/none-found message */\n                _renderEmptyMessage: function($whereTo) {\n                    this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n                    var text = this.searchFor\n                        ? this.noneFoundMsg\n                        : this.emptyMsg;\n                    return this.$emptyMessage($whereTo).text(text);\n                },\n\n                /** expand all item views */\n                expandAll: function() {\n                    _.each(this.views, function(view) {\n                        view.expand();\n                    });\n                },\n\n                /** collapse all item views */\n                collapseAll: function() {\n                    _.each(this.views, function(view) {\n                        view.collapse();\n                    });\n                },\n\n                // ------------------------------------------------------------------------ collection/views syncing\n                /** Add a view (if the model should be viewable) to the panel */\n                addItemView: function(model, collection, options) {\n                    // console.log( this + '.addItemView:', model );\n                    var panel = this;\n                    // get the index of the model in the list of filtered models shown by this list\n                    // in order to insert the view in the proper place\n                    //TODO:? potentially expensive\n                    var modelIndex = panel._filterCollection().indexOf(model);\n                    if (modelIndex === -1) {\n                        return undefined;\n                    }\n                    var view = panel._createItemView(model);\n                    // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n                    $(view).queue(\"fx\", [\n                        function(next) {\n                            // hide the empty message first if only view\n                            if (panel.$emptyMessage().is(\":visible\")) {\n                                panel\n                                    .$emptyMessage()\n                                    .fadeOut(panel.fxSpeed, next);\n                            } else {\n                                next();\n                            }\n                        },\n                        function(next) {\n                            panel._attachView(view, modelIndex);\n                            next();\n                        }\n                    ]);\n                    return view;\n                },\n\n                /** internal fn to add view (to both panel.views and panel.$list) */\n                _attachView: function(view, modelIndex, useFx) {\n                    // console.log( this + '._attachView:', view, modelIndex, useFx );\n                    useFx = _.isUndefined(useFx) ? true : useFx;\n                    modelIndex = modelIndex || 0;\n                    var panel = this;\n\n                    // use the modelIndex to splice into views and insert at the proper index in the DOM\n                    panel.views.splice(modelIndex, 0, view);\n                    panel._insertIntoListAt(\n                        modelIndex,\n                        panel._renderItemView$el(view).hide()\n                    );\n\n                    panel.trigger(\"view:attached\", view);\n                    if (useFx) {\n                        view.$el.slideDown(panel.fxSpeed, function() {\n                            panel.trigger(\"view:attached:rendered\");\n                        });\n                    } else {\n                        view.$el.show();\n                        panel.trigger(\"view:attached:rendered\");\n                    }\n                    return view;\n                },\n\n                /** insert a jq object as a child of list-items at the specified *DOM index* */\n                _insertIntoListAt: function(index, $what) {\n                    // console.log( this + '._insertIntoListAt:', index, $what );\n                    var $list = this.$list();\n                    if (index === 0) {\n                        $list.prepend($what);\n                    } else {\n                        $list\n                            .children()\n                            .eq(index - 1)\n                            .after($what);\n                    }\n                    return $what;\n                },\n\n                /** Remove a view from the panel (if found) */\n                removeItemView: function(model, collection, options) {\n                    var panel = this;\n                    var view = _.find(panel.views, function(v) {\n                        return v.model === model;\n                    });\n                    if (!view) {\n                        return undefined;\n                    }\n                    panel.views = _.without(panel.views, view);\n                    panel.trigger(\"view:removed\", view);\n\n                    // potentially show the empty message if no views left\n                    // use anonymous queue here - since remove can happen multiple times\n                    $({}).queue(\"fx\", [\n                        function(next) {\n                            view.$el.fadeOut(panel.fxSpeed, next);\n                        },\n                        function(next) {\n                            view.remove();\n                            panel.trigger(\"view:removed:rendered\");\n                            if (!panel.views.length) {\n                                panel\n                                    ._renderEmptyMessage()\n                                    .fadeIn(panel.fxSpeed, next);\n                            } else {\n                                next();\n                            }\n                        }\n                    ]);\n                    return view;\n                },\n\n                /** get views based on model.id */\n                viewFromModelId: function(id) {\n                    return _.find(this.views, function(v) {\n                        return v.model.id === id;\n                    });\n                },\n\n                /** get views based on model */\n                viewFromModel: function(model) {\n                    return model ? this.viewFromModelId(model.id) : undefined;\n                },\n\n                /** get views based on model properties */\n                viewsWhereModel: function(properties) {\n                    return this.views.filter(function(view) {\n                        return _.isMatch(view.model.attributes, properties);\n                    });\n                },\n\n                /** A range of views between (and including) viewA and viewB */\n                viewRange: function(viewA, viewB) {\n                    if (viewA === viewB) {\n                        return viewA ? [viewA] : [];\n                    }\n\n                    var indexA = this.views.indexOf(viewA),\n                        indexB = this.views.indexOf(viewB);\n\n                    // handle not found\n                    if (indexA === -1 || indexB === -1) {\n                        if (indexA === indexB) {\n                            return [];\n                        }\n                        return indexA === -1 ? [viewB] : [viewA];\n                    }\n                    // reverse if indeces are\n                    //note: end inclusive\n                    return indexA < indexB\n                        ? this.views.slice(indexA, indexB + 1)\n                        : this.views.slice(indexB, indexA + 1);\n                },\n\n                // ------------------------------------------------------------------------ searching\n                /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n                _renderSearch: function($where) {\n                    $where.find(\".controls .search-input\").searchInput({\n                        placeholder: this.searchPlaceholder,\n                        initialVal: this.searchFor,\n                        onfirstsearch: _.bind(this._firstSearch, this),\n                        onsearch: _.bind(this.searchItems, this),\n                        onclear: _.bind(this.clearSearch, this)\n                    });\n                    return $where;\n                },\n\n                /** What to do on the first search entered */\n                _firstSearch: function(searchFor) {\n                    // override to load model details if necc.\n                    this.log(\"onFirstSearch\", searchFor);\n                    return this.searchItems(searchFor);\n                },\n\n                /** filter view list to those that contain the searchFor terms */\n                searchItems: function(searchFor, force) {\n                    this.log(\"searchItems\", searchFor, this.searchFor, force);\n                    if (!force && this.searchFor === searchFor) {\n                        return this;\n                    }\n                    this.searchFor = searchFor;\n                    this.renderItems();\n                    this.trigger(\"search:searching\", searchFor, this);\n                    var $search = this.$(\"> .controls .search-query\");\n                    if ($search.val() !== searchFor) {\n                        $search.val(searchFor);\n                    }\n                    return this;\n                },\n\n                /** clear the search filters and show all views that are normally shown */\n                clearSearch: function(searchFor) {\n                    //this.log( 'onSearchClear', this );\n                    this.searchFor = \"\";\n                    this.trigger(\"search:clear\", this);\n                    this.$(\"> .controls .search-query\").val(\"\");\n                    this.renderItems();\n                    return this;\n                },\n\n                // ------------------------------------------------------------------------ selection\n                /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n                THROTTLE_SELECTOR_FX_AT: 20,\n\n                /** show selectors on all visible itemViews and associated controls */\n                showSelectors: function(speed) {\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    this.selecting = true;\n                    this.$(\".list-actions\").slideDown(speed);\n                    speed =\n                        this.views.length >= this.THROTTLE_SELECTOR_FX_AT\n                            ? 0\n                            : speed;\n                    _.each(this.views, function(view) {\n                        view.showSelector(speed);\n                    });\n                    //this.selected = [];\n                    //this.lastSelected = null;\n                },\n\n                /** hide selectors on all visible itemViews and associated controls */\n                hideSelectors: function(speed) {\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    this.selecting = false;\n                    this.$(\".list-actions\").slideUp(speed);\n                    speed =\n                        this.views.length >= this.THROTTLE_SELECTOR_FX_AT\n                            ? 0\n                            : speed;\n                    _.each(this.views, function(view) {\n                        view.hideSelector(speed);\n                    });\n                    this.selected = [];\n                    this.lastSelected = null;\n                },\n\n                /** show or hide selectors on all visible itemViews and associated controls */\n                toggleSelectors: function() {\n                    if (!this.selecting) {\n                        this.showSelectors();\n                    } else {\n                        this.hideSelectors();\n                    }\n                },\n\n                /** select all visible items */\n                selectAll: function(event) {\n                    _.each(this.views, function(view) {\n                        view.select(event);\n                    });\n                },\n\n                /** deselect all visible items */\n                deselectAll: function(event) {\n                    this.lastSelected = null;\n                    _.each(this.views, function(view) {\n                        view.deselect(event);\n                    });\n                },\n\n                /** select a range of datasets between A and B */\n                selectRange: function(viewA, viewB) {\n                    var range = this.viewRange(viewA, viewB);\n                    _.each(range, function(view) {\n                        view.select();\n                    });\n                    return range;\n                },\n\n                /** return an array of all currently selected itemViews */\n                getSelectedViews: function() {\n                    return _.filter(this.views, function(v) {\n                        return v.selected;\n                    });\n                },\n\n                /** return a collection of the models of all currenly selected items */\n                getSelectedModels: function() {\n                    // console.log( '(getSelectedModels)' );\n                    return new this.collection.constructor(\n                        _.map(this.getSelectedViews(), function(view) {\n                            return view.model;\n                        })\n                    );\n                },\n\n                // ------------------------------------------------------------------------ loading indicator\n                /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n                _showLoadingIndicator: function(msg, speed, callback) {\n                    this.debug(\n                        \"_showLoadingIndicator\",\n                        this.indicator,\n                        msg,\n                        speed,\n                        callback\n                    );\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    if (!this.indicator) {\n                        this.indicator = new LoadingIndicator(this.$el);\n                        this.debug(\"\\t created\", this.indicator);\n                    }\n                    if (!this.$el.is(\":visible\")) {\n                        this.indicator.show(0, callback);\n                    } else {\n                        this.$el.fadeOut(speed);\n                        this.indicator.show(msg, speed, callback);\n                    }\n                },\n\n                /** hide the loading indicator */\n                _hideLoadingIndicator: function(speed, callback) {\n                    this.debug(\n                        \"_hideLoadingIndicator\",\n                        this.indicator,\n                        speed,\n                        callback\n                    );\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    if (this.indicator) {\n                        this.indicator.hide(speed, callback);\n                    }\n                },\n\n                // ------------------------------------------------------------------------ scrolling\n                /** get the current scroll position of the panel in its parent */\n                scrollPosition: function() {\n                    return this.$scrollContainer().scrollTop();\n                },\n\n                /** set the current scroll position of the panel in its parent */\n                scrollTo: function(pos, speed) {\n                    speed = speed || 0;\n                    this.$scrollContainer().animate({ scrollTop: pos }, speed);\n                    return this;\n                },\n\n                /** Scrolls the panel to the top. */\n                scrollToTop: function(speed) {\n                    return this.scrollTo(0, speed);\n                },\n\n                /** scroll to the given view in list-items */\n                scrollToItem: function(view, speed) {\n                    if (!view) {\n                        return this;\n                    }\n                    return this;\n                },\n\n                /** Scrolls the panel to show the content with the given id. */\n                scrollToId: function(id, speed) {\n                    return this.scrollToItem(this.viewFromModelId(id), speed);\n                },\n\n                // ------------------------------------------------------------------------ panel events\n                /** event map */\n                events: {\n                    \"click .select-all\": \"selectAll\",\n                    \"click .deselect-all\": \"deselectAll\"\n                },\n\n                // ------------------------------------------------------------------------ misc\n                /** Return a string rep of the panel */\n                toString: function() {\n                    return \"ListPanel(\" + this.collection + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        ListPanel.prototype.templates = (function() {\n            var elTemplate = BASE_MVC.wrapTemplate([\n                // temp container\n                \"<div>\",\n                '<div class=\"controls\"></div>',\n                '<div class=\"list-items\"></div>',\n                '<div class=\"empty-message infomessagesmall\"></div>',\n                \"</div>\"\n            ]);\n\n            var controlsTemplate = BASE_MVC.wrapTemplate([\n                '<div class=\"controls\">',\n                '<div class=\"title\">',\n                '<div class=\"name\"><%- view.title %></div>',\n                \"</div>\",\n                '<div class=\"subtitle\"><%- view.subtitle %></div>',\n                // buttons, controls go here\n                '<div class=\"actions\"></div>',\n                // deleted msg, etc.\n                '<div class=\"messages\"></div>',\n\n                '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n                \"</div>\",\n\n                // show when selectors are shown\n                '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                '<button class=\"select-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"All\"),\n                \"</button>\",\n                '<button class=\"deselect-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"None\"),\n                \"</button>\",\n                \"</div>\",\n                '<div class=\"list-action-menu btn-group\">',\n                \"</div>\",\n                \"</div>\",\n                \"</div>\"\n            ]);\n\n            return {\n                el: elTemplate,\n                controls: controlsTemplate\n            };\n        })();\n\n        //=============================================================================\n        /** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\n        var ModelListPanel = ListPanel.extend({\n            /** key of attribute in model to assign to this.collection */\n            modelCollectionKey: \"contents\",\n\n            initialize: function(attributes) {\n                ListPanel.prototype.initialize.call(this, attributes);\n                this.selecting =\n                    attributes.selecting !== undefined\n                        ? attributes.selecting\n                        : false;\n\n                this.setModel(this.model, attributes);\n            },\n\n            /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n            setModel: function(model, attributes) {\n                attributes = attributes || {};\n                this.debug(this + \".setModel:\", model, attributes);\n\n                this.freeModel();\n                this.freeViews();\n\n                if (model) {\n                    var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n                    // set up the new model with user, logger, storage, events\n                    this.model = model;\n                    if (this.logger) {\n                        this.model.logger = this.logger;\n                    }\n                    this._setUpModelListeners();\n\n                    //TODO: relation btwn model, collection becoming tangled here\n                    // free the collection, and assign the new collection to either\n                    //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n                    this.stopListening(this.collection);\n                    this.collection =\n                        this.model[this.modelCollectionKey] ||\n                        attributes.collection ||\n                        this._createDefaultCollection();\n                    this._setUpCollectionListeners();\n\n                    if (oldModelId && model.get(\"id\") !== oldModelId) {\n                        this.trigger(\"new-model\", this);\n                    }\n                }\n                return this;\n            },\n\n            /** free the current model and all listeners for it, free any views for the model */\n            freeModel: function() {\n                // stop/release the previous model, and clear cache to sub-views\n                if (this.model) {\n                    this.stopListening(this.model);\n                    //TODO: see base-mvc\n                    //this.model.free();\n                    //this.model = null;\n                }\n                return this;\n            },\n\n            // ------------------------------------------------------------------------ listening\n            /** listening for model events */\n            _setUpModelListeners: function() {\n                // override\n                this.log(this + \"._setUpModelListeners\", this.model);\n                // bounce model errors up to the panel\n                this.listenTo(\n                    this.model,\n                    \"error\",\n                    function() {\n                        var args = Array.prototype.slice.call(arguments, 0);\n                        //args.unshift( 'model:error' );\n                        args.unshift(\"error\");\n                        this.trigger.apply(this, args);\n                    },\n                    this\n                );\n\n                // debugging\n                if (this.logger) {\n                    this.listenTo(this.model, \"all\", function(event) {\n                        this.info(this + \"(model)\", event, arguments);\n                    });\n                }\n                return this;\n            },\n\n            /** Build a temp div containing the new children for the view's $el.\n     */\n            _renderControls: function($newRender) {\n                this.debug(this + \"(ModelListPanel)._renderControls\");\n                var json = this.model ? this.model.toJSON() : {},\n                    $controls = $(this.templates.controls(json, this));\n                $newRender.find(\".controls\").replaceWith($controls);\n                return $controls;\n            },\n\n            // ------------------------------------------------------------------------ misc\n            /** Return a string rep of the panel */\n            toString: function() {\n                return \"ModelListPanel(\" + this.model + \")\";\n            }\n        });\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        ModelListPanel.prototype.templates = (function() {\n            var controlsTemplate = BASE_MVC.wrapTemplate([\n                '<div class=\"controls\">',\n                '<div class=\"title\">',\n                //TODO: this is really the only difference - consider factoring titlebar out\n                '<div class=\"name\"><%- model.name %></div>',\n                \"</div>\",\n                '<div class=\"subtitle\"><%- view.subtitle %></div>',\n                '<div class=\"actions\"></div>',\n                '<div class=\"messages\"></div>',\n\n                '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n                \"</div>\",\n\n                '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                '<button class=\"select-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"All\"),\n                \"</button>\",\n                '<button class=\"deselect-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"None\"),\n                \"</button>\",\n                \"</div>\",\n                '<div class=\"list-action-menu btn-group\">',\n                \"</div>\",\n                \"</div>\",\n                \"</div>\"\n            ]);\n\n            return _.extend(_.clone(ListPanel.prototype.templates), {\n                controls: controlsTemplate\n            });\n        })();\n\n        //=============================================================================\n        return {\n            ListPanel: ListPanel,\n            ModelListPanel: ModelListPanel\n        };\n    }\n);\n"]}