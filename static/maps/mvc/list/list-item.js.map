{"version":3,"sources":["mvc/list/list-item.js"],"names":["define","BASE_MVC","_l","ExpandableView","Backbone","View","extend","LoggableMixin","_logNamespace","initialize","attributes","expanded","this","log","undefined","fxSpeed","render","$newRender","_setUpBehaviors","_queueNewRender","speed","_buildNewRender","$","templates","el","model","toJSON","$details","replaceWith","show","view","_swapNewRender","fadeOut","next","trigger","$el","fadeIn","$where","empty","_","isFunction","className","children","$newDetails","find","tooltip","placement","toggleExpanded","expand","_renderDetails","details","collapse","_expand","_fetchModelDetails","hasDetails","jQuery","when","fetch","slideDown","debug","ListItemView","tagName","mixin","SelectableViewMixin","DraggableViewMixin","prototype","call","_setUpListeners","draggableOn","isSelectable","hide","_renderTitleBar","_renderWarnings","_renderPrimaryActions","append","_renderSubtitle","selectable","showSelector","stopPropagation","altKey","$warnings","json","KEYCODE_RETURN","_keyDownTitleBar","warnings","event","templateFn","titleBar","toString","subtitle","events","click .title-bar","keydown .title-bar","click .selector","_clickTitleBar","titleBarTemplate","toggleSelect","subtitleTemplate","detailsTemplate","keyCode","FoldoutListItemView","wrapTemplate","_attachFoldout","FoldoutClass","options","foldout","foldoutStyle","foldoutPanelClass","_createFoldoutPanel","_getFoldoutPanelClass","_getFoldoutPanelOptions","$whereTo","always","_expandByDrilldown","listenTo"],"mappings":"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","file":"../../../scripts/mvc/list/list-item.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\"], function(BASE_MVC, _l) {\n    \"use strict\";\n\n    var logNamespace = \"list\";\n    //==============================================================================\n    /** A view which, when first rendered, shows only summary data/attributes, but\n *      can be expanded to show further details (and optionally fetch those\n *      details from the server).\n */\n    var ExpandableView = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        //TODO: Although the reasoning behind them is different, this shares a lot with HiddenUntilActivated above: combine them\n        //PRECONDITION: model must have method hasDetails\n        //PRECONDITION: subclasses must have templates.el and templates.details\n\n        initialize: function(attributes) {\n            /** are the details of this view expanded/shown or not? */\n            this.expanded = attributes.expanded || false;\n            this.log(\"\\t expanded:\", this.expanded);\n            this.fxSpeed =\n                attributes.fxSpeed !== undefined\n                    ? attributes.fxSpeed\n                    : this.fxSpeed;\n        },\n\n        // ........................................................................ render main\n        /** jq fx speed */\n        fxSpeed: \"fast\",\n\n        /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n        render: function(speed) {\n            var $newRender = this._buildNewRender();\n            this._setUpBehaviors($newRender);\n            this._queueNewRender($newRender, speed);\n            return this;\n        },\n\n        /** Build a temp div containing the new children for the view's $el.\n     *      If the view is already expanded, build the details as well.\n     */\n        _buildNewRender: function() {\n            // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n            var $newRender = $(this.templates.el(this.model.toJSON(), this));\n            if (this.expanded) {\n                this.$details($newRender).replaceWith(\n                    this._renderDetails().show()\n                );\n            }\n            return $newRender;\n        },\n\n        /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var view = this;\n\n            if (speed === 0) {\n                view._swapNewRender($newRender);\n                view.trigger(\"rendered\", view);\n            } else {\n                $(view).queue(\"fx\", [\n                    function(next) {\n                        view.$el.fadeOut(speed, next);\n                    },\n                    function(next) {\n                        view._swapNewRender($newRender);\n                        next();\n                    },\n                    function(next) {\n                        view.$el.fadeIn(speed, next);\n                    },\n                    function(next) {\n                        view.trigger(\"rendered\", view);\n                        next();\n                    }\n                ]);\n            }\n        },\n\n        /** empty out the current el, move the $newRender's children in */\n        _swapNewRender: function($newRender) {\n            return this.$el\n                .empty()\n                .attr(\n                    \"class\",\n                    _.isFunction(this.className)\n                        ? this.className()\n                        : this.className\n                )\n                .append($newRender.children());\n        },\n\n        /** set up js behaviors, event handlers for elements within the given container\n     *  @param {jQuery} $container jq object that contains the elements to process (defaults to this.$el)\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            // set up canned behavior on children (bootstrap, popupmenus, editable_text, etc.)\n            //make_popup_menus( $where );\n            $where.find(\"[title]\").tooltip({ placement: \"bottom\" });\n        },\n\n        // ......................................................................... details\n        /** shortcut to details DOM (as jQ) */\n        $details: function($where) {\n            $where = $where || this.$el;\n            return $where.find(\"> .details\");\n        },\n\n        /** build the DOM for the details and set up behaviors on it */\n        _renderDetails: function() {\n            var $newDetails = $(\n                this.templates.details(this.model.toJSON(), this)\n            );\n            this._setUpBehaviors($newDetails);\n            return $newDetails;\n        },\n\n        // ......................................................................... expansion/details\n        /** Show or hide the details\n     *  @param {Boolean} expand if true, expand; if false, collapse\n     */\n        toggleExpanded: function(expand) {\n            expand = expand === undefined ? !this.expanded : expand;\n            if (expand) {\n                this.expand();\n            } else {\n                this.collapse();\n            }\n            return this;\n        },\n\n        /** Render and show the full, detailed body of this view including extra data and controls.\n     *      note: if the model does not have detailed data, fetch that data before showing the body\n     *  @fires expanded when a body has been expanded\n     */\n        expand: function() {\n            var view = this;\n            return view._fetchModelDetails().always(function() {\n                view._expand();\n            });\n        },\n\n        /** Check for model details and, if none, fetch them.\n     *  @returns {jQuery.promise} the model.fetch.xhr if details are being fetched, an empty promise if not\n     */\n        _fetchModelDetails: function() {\n            if (!this.model.hasDetails()) {\n                return this.model.fetch();\n            }\n            return jQuery.when();\n        },\n\n        /** Inner fn called when expand (public) has fetched the details */\n        _expand: function() {\n            var view = this,\n                $newDetails = view._renderDetails();\n            view.$details().replaceWith($newDetails);\n            // needs to be set after the above or the slide will not show\n            view.expanded = true;\n            view.$details().slideDown(view.fxSpeed, function() {\n                view.trigger(\"expanded\", view);\n            });\n        },\n\n        /** Hide the body/details of an HDA.\n     *  @fires collapsed when a body has been collapsed\n     */\n        collapse: function() {\n            this.debug(this + \"(ExpandableView).collapse\");\n            var view = this;\n            view.expanded = false;\n            this.$details().slideUp(view.fxSpeed, function() {\n                view.trigger(\"collapsed\", view);\n            });\n        }\n    });\n\n    //==============================================================================\n    /** A view that is displayed in some larger list/grid/collection.\n *      Inherits from Expandable, Selectable, Draggable.\n *  The DOM contains warnings, a title bar, and a series of primary action controls.\n *      Primary actions are meant to be easily accessible item functions (such as delete)\n *      that are rendered in the title bar.\n *\n *  Details are rendered when the user clicks the title bar or presses enter/space when\n *      the title bar is in focus.\n *\n *  Designed as a base class for history panel contents - but usable elsewhere (I hope).\n */\n    var ListItemView = ExpandableView.extend(\n        BASE_MVC.mixin(\n            BASE_MVC.SelectableViewMixin,\n            BASE_MVC.DraggableViewMixin,\n            {\n                tagName: \"div\",\n                className: \"list-item\",\n\n                /** Set up the base class and all mixins */\n                initialize: function(attributes) {\n                    ExpandableView.prototype.initialize.call(this, attributes);\n                    BASE_MVC.SelectableViewMixin.initialize.call(\n                        this,\n                        attributes\n                    );\n                    BASE_MVC.DraggableViewMixin.initialize.call(\n                        this,\n                        attributes\n                    );\n                    this._setUpListeners();\n                },\n\n                /** event listeners */\n                _setUpListeners: function() {\n                    // hide the primary actions in the title bar when selectable and narrow\n                    this.on(\n                        \"selectable\",\n                        function(isSelectable) {\n                            if (isSelectable) {\n                                this.$(\".primary-actions\").hide();\n                            } else {\n                                this.$(\".primary-actions\").show();\n                            }\n                        },\n                        this\n                    );\n                    return this;\n                },\n\n                // ........................................................................ rendering\n                /** In this override, call methods to build warnings, titlebar and primary actions */\n                _buildNewRender: function() {\n                    var $newRender = ExpandableView.prototype._buildNewRender.call(\n                        this\n                    );\n                    $newRender\n                        .children(\".warnings\")\n                        .replaceWith(this._renderWarnings());\n                    $newRender\n                        .children(\".title-bar\")\n                        .replaceWith(this._renderTitleBar());\n                    $newRender\n                        .children(\".primary-actions\")\n                        .append(this._renderPrimaryActions());\n                    $newRender\n                        .find(\"> .title-bar .subtitle\")\n                        .replaceWith(this._renderSubtitle());\n                    return $newRender;\n                },\n\n                /** In this override, render the selector controls and set up dragging before the swap */\n                _swapNewRender: function($newRender) {\n                    ExpandableView.prototype._swapNewRender.call(\n                        this,\n                        $newRender\n                    );\n                    if (this.selectable) {\n                        this.showSelector(0);\n                    }\n                    if (this.draggable) {\n                        this.draggableOn();\n                    }\n                    return this.$el;\n                },\n\n                /** Render any warnings the item may need to show (e.g. \"I'm deleted\") */\n                _renderWarnings: function() {\n                    var view = this,\n                        $warnings = $('<div class=\"warnings\"></div>'),\n                        json = view.model.toJSON();\n                    //TODO:! unordered (map)\n                    _.each(view.templates.warnings, function(templateFn) {\n                        $warnings.append($(templateFn(json, view)));\n                    });\n                    return $warnings;\n                },\n\n                /** Render the title bar (the main/exposed SUMMARY dom element) */\n                _renderTitleBar: function() {\n                    return $(\n                        this.templates.titleBar(this.model.toJSON(), this)\n                    );\n                },\n\n                /** Return an array of jQ objects containing common/easily-accessible item controls */\n                _renderPrimaryActions: function() {\n                    // override this\n                    return [];\n                },\n\n                /** Render the title bar (the main/exposed SUMMARY dom element) */\n                _renderSubtitle: function() {\n                    return $(\n                        this.templates.subtitle(this.model.toJSON(), this)\n                    );\n                },\n\n                // ......................................................................... events\n                /** event map */\n                events: {\n                    // expand the body when the title is clicked or when in focus and space or enter is pressed\n                    \"click .title-bar\": \"_clickTitleBar\",\n                    \"keydown .title-bar\": \"_keyDownTitleBar\",\n                    \"click .selector\": \"toggleSelect\"\n                },\n\n                /** expand when the title bar is clicked */\n                _clickTitleBar: function(event) {\n                    event.stopPropagation();\n                    if (event.altKey) {\n                        this.toggleSelect(event);\n                        if (!this.selectable) {\n                            this.showSelector();\n                        }\n                    } else {\n                        this.toggleExpanded();\n                    }\n                },\n\n                /** expand when the title bar is in focus and enter or space is pressed */\n                _keyDownTitleBar: function(event) {\n                    // bail (with propagation) if keydown and not space or enter\n                    var KEYCODE_SPACE = 32,\n                        KEYCODE_RETURN = 13;\n                    if (\n                        event &&\n                        event.type === \"keydown\" &&\n                        (event.keyCode === KEYCODE_SPACE ||\n                            event.keyCode === KEYCODE_RETURN)\n                    ) {\n                        this.toggleExpanded();\n                        event.stopPropagation();\n                        return false;\n                    }\n                    return true;\n                },\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"ListItemView(\" + modelString + \")\";\n                }\n            }\n        )\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    ListItemView.prototype.templates = (function() {\n        var elTemplato = BASE_MVC.wrapTemplate([\n            '<div class=\"list-element\">',\n            // errors, messages, etc.\n            '<div class=\"warnings\"></div>',\n\n            // multi-select checkbox\n            '<div class=\"selector\">',\n            '<span class=\"fa fa-2x fa-square-o\"></span>',\n            \"</div>\",\n            // space for title bar buttons - gen. floated to the right\n            '<div class=\"primary-actions\"></div>',\n            '<div class=\"title-bar\"></div>',\n\n            // expandable area for more details\n            '<div class=\"details\"></div>',\n            \"</div>\"\n        ]);\n\n        var warnings = {};\n\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                //TODO: prob. belongs in dataset-list-item\n                '<span class=\"state-icon\"></span>',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- element.name %></span>',\n                \"</div>\",\n                '<div class=\"subtitle\"></div>',\n                \"</div>\"\n            ],\n            \"element\"\n        );\n\n        var subtitleTemplate = BASE_MVC.wrapTemplate([\n            // override this\n            '<div class=\"subtitle\"></div>'\n        ]);\n\n        var detailsTemplate = BASE_MVC.wrapTemplate([\n            // override this\n            '<div class=\"details\"></div>'\n        ]);\n\n        return {\n            el: elTemplato,\n            warnings: warnings,\n            titleBar: titleBarTemplate,\n            subtitle: subtitleTemplate,\n            details: detailsTemplate\n        };\n    })();\n\n    //==============================================================================\n    /** A view that is displayed in some larger list/grid/collection.\n *  *AND* can display some sub-list of it's own when expanded (e.g. dataset collections).\n *  This list will 'foldout' when the item is expanded depending on this.foldoutStyle:\n *      If 'foldout': will expand vertically to show the nested list\n *      If 'drilldown': will overlay the parent list\n *\n *  Inherits from ListItemView.\n *\n *  _renderDetails does the work of creating this.details: a sub-view that shows the nested list\n */\n    var FoldoutListItemView = ListItemView.extend({\n        /** If 'foldout': show the sub-panel inside the expanded item\n     *  If 'drilldown': only fire events and handle by pub-sub\n     *      (allow the panel containing this item to attach it, hide itself, etc.)\n     */\n        foldoutStyle: \"foldout\",\n        /** Panel view class to instantiate for the sub-panel */\n        foldoutPanelClass: null,\n\n        /** override to:\n     *      add attributes foldoutStyle and foldoutPanelClass for config poly\n     *      disrespect attributes.expanded if drilldown\n     */\n        initialize: function(attributes) {\n            if (this.foldoutStyle === \"drilldown\") {\n                this.expanded = false;\n            }\n            this.foldoutStyle = attributes.foldoutStyle || this.foldoutStyle;\n            this.foldoutPanelClass =\n                attributes.foldoutPanelClass || this.foldoutPanelClass;\n\n            ListItemView.prototype.initialize.call(this, attributes);\n            this.foldout = this._createFoldoutPanel();\n        },\n\n        /** in this override, attach the foldout panel when rendering details */\n        _renderDetails: function() {\n            if (this.foldoutStyle === \"drilldown\") {\n                return $();\n            }\n            var $newDetails = ListItemView.prototype._renderDetails.call(this);\n            return this._attachFoldout(this.foldout, $newDetails);\n        },\n\n        /** In this override, handle collection expansion. */\n        _createFoldoutPanel: function() {\n            var model = this.model;\n            var FoldoutClass = this._getFoldoutPanelClass(model),\n                options = this._getFoldoutPanelOptions(model),\n                foldout = new FoldoutClass(\n                    _.extend(options, {\n                        model: model\n                    })\n                );\n            return foldout;\n        },\n\n        /** Stub to return proper foldout panel class */\n        _getFoldoutPanelClass: function() {\n            // override\n            return this.foldoutPanelClass;\n        },\n\n        /** Stub to return proper foldout panel options */\n        _getFoldoutPanelOptions: function() {\n            return {\n                // propagate foldout style down\n                foldoutStyle: this.foldoutStyle,\n                fxSpeed: this.fxSpeed\n            };\n        },\n\n        /** Render the foldout panel inside the view, hiding controls */\n        _attachFoldout: function(foldout, $whereTo) {\n            $whereTo = $whereTo || this.$(\"> .details\");\n            this.foldout = foldout.render(0);\n            foldout.$(\"> .controls\").hide();\n            return $whereTo.append(foldout.$el);\n        },\n\n        /** In this override, branch on foldoutStyle to show expanded */\n        expand: function() {\n            var view = this;\n            return view._fetchModelDetails().always(function() {\n                if (view.foldoutStyle === \"foldout\") {\n                    view._expand();\n                } else if (view.foldoutStyle === \"drilldown\") {\n                    view._expandByDrilldown();\n                }\n            });\n        },\n\n        /** For drilldown, set up close handler and fire expanded:drilldown\n     *      containing views can listen to this and handle other things\n     *      (like hiding themselves) by listening for expanded/collapsed:drilldown\n     */\n        _expandByDrilldown: function() {\n            var view = this;\n            // attachment and rendering done by listener\n            view.listenTo(view.foldout, \"close\", function() {\n                view.trigger(\"collapsed:drilldown\", view, view.foldout);\n            });\n            view.trigger(\"expanded:drilldown\", view, view.foldout);\n        }\n    });\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    FoldoutListItemView.prototype.templates = (function() {\n        var detailsTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"details\">',\n                // override with more info (that goes above the panel)\n                \"</div>\"\n            ],\n            \"collection\"\n        );\n\n        return _.extend({}, ListItemView.prototype.templates, {\n            details: detailsTemplate\n        });\n    })();\n\n    //==============================================================================\n    return {\n        ExpandableView: ExpandableView,\n        ListItemView: ListItemView,\n        FoldoutListItemView: FoldoutListItemView\n    };\n});\n"]}