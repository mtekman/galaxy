{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","extend","LoggableMixin","tagName","className","select_width","events","initialize","options","usePrompt","this","label","workflow_mode","click","hiddenUntilActivated","$activator","render","self","html","_defaultTemplate","$input","$el","select2","width","tags","_getTagsUsed","_setUpBehaviors","_hashToName","tag","startsWith","slice","_renderEditor","join","_workflowTemplate","show_editor","keydownHandler","_renderTags","which","e","hideEditor","showEditor","addButton","renderedArray","length","get","_","each","renderString","push","isArray","tagsArray","tagsToCSV","model","isEmpty","map","Galaxy","user","escape","_nameToHash","sort","event","find","_addNewTagToTagsUsed","on","val","contains","tagsUsed","newTag","added","text","toString","set","remove","off","stopListening","prototype","call"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\"], function(baseMVC, _l) {\n    // =============================================================================\n    /** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\n    var TagsEditor = Backbone.View\n        .extend(baseMVC.LoggableMixin)\n        .extend(baseMVC.HiddenUntilActivatedViewMixin)\n        .extend({\n            tagName: \"div\",\n            className: \"tags-display\",\n            select_width: \"100%\",\n            events: {},\n\n            /** Set up listeners, parse options */\n            initialize: function(options) {\n                //console.debug( this, options );\n                // only listen to the model only for changes to tags - re-render\n                this.show_editor = false;\n                if (options.usePrompt === false) {\n                    this.label = \"\";\n                } else {\n                    this.label =\n                        '<label class=\"prompt\">' + _l(\"Tags\") + \"</label>\";\n                }\n                this.workflow_mode = options.workflow_mode || false;\n                if (this.workflow_mode) {\n                    this.events.click = \"showEditor\";\n                    this.events.keydown = \"keydownHandler\";\n                }\n                this.hiddenUntilActivated(options.$activator, options);\n            },\n\n            /** Build the DOM elements, call select to on the created input, and set up behaviors */\n            render: function() {\n                var self = this;\n                if (this.workflow_mode) {\n                    this.$el.html(this._workflowTemplate());\n                } else {\n                    this.$el.html(this._defaultTemplate());\n                }\n                this.$input().select2({\n                    placeholder: \"Add tags\",\n                    width: this.workflow_mode ? this.width : this.select_width,\n                    tags: function() {\n                        // initialize possible tags in the dropdown based on all the tags the user has used so far\n                        return self._getTagsUsed();\n                    }\n                });\n\n                this._setUpBehaviors();\n                return this;\n            },\n\n            _hashToName: function(tag) {\n                if (tag.startsWith(\"#\")) {\n                    return \"name:\" + tag.slice(1);\n                }\n                return tag;\n            },\n\n            _nameToHash: function(tag) {\n                if (tag.startsWith(\"name:\")) {\n                    tag = \"#\" + tag.slice(5);\n                }\n                return tag;\n            },\n\n            /** @returns {String} the html text used to build the view's DOM */\n            _defaultTemplate: function() {\n                return [this.label, this._renderEditor()].join(\"\");\n            },\n\n            _workflowTemplate: function() {\n                // Shows labels by default, event handler controls whether we show tags or editor\n                return [\n                    this.show_editor ? this._renderEditor() : this._renderTags()\n                ].join(\" \");\n            },\n\n            keydownHandler: function(e) {\n                switch (e.which) {\n                    // esc\n                    case 27:\n                        // hide the tag editor when pressing escape\n                        this.hideEditor();\n                        break;\n                }\n            },\n\n            showEditor: function() {\n                this.show_editor = true;\n                this.render();\n            },\n\n            hideEditor: function() {\n                this.show_editor = false;\n                this.render();\n            },\n\n            _renderEditor: function() {\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                return (\n                    '<input class=\"tags-input\" value=\"' +\n                    this.tagsToCSV() +\n                    '\"/>'\n                );\n            },\n\n            _renderTags: function() {\n                var tags = this.model.get(\"tags\");\n                var addButton = \"static/images/fugue/tag--plus.png\";\n                var renderedArray = [];\n                _.each(tags, function(tag) {\n                    tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n                    var renderString =\n                        '<span class=\"label label-info\">' + tag + \"</span>\";\n                    renderedArray.push(renderString);\n                });\n                if (renderedArray.length === 0) {\n                    // If there are no tags to render we just show the add-tag-button\n                    renderedArray.push(\n                        \"<img src=\" +\n                            addButton +\n                            ' class=\"add-tag-button\" title=\"Add tags\"/>'\n                    );\n                }\n                return renderedArray.join(\" \");\n            },\n\n            /** @returns {String} the sorted, comma-separated tags from the model */\n            tagsToCSV: function() {\n                var self = this;\n                var tagsArray = this.model.get(\"tags\");\n                if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n                    return \"\";\n                }\n                return tagsArray\n                    .map(function(tag) {\n                        return _.escape(self._nameToHash(tag));\n                    })\n                    .sort()\n                    .join(\",\");\n            },\n\n            /** @returns {jQuery} the input for this view */\n            $input: function() {\n                return this.$el.find(\"input.tags-input\");\n            },\n\n            /** @returns {String[]} all tags used by the current user */\n            _getTagsUsed: function() {\n                //TODO: global\n                var self = this;\n                return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n            },\n\n            /** set up any event listeners on the view's DOM (mostly handled by select2) */\n            _setUpBehaviors: function() {\n                var self = this;\n                this.$input().on(\"change\", function(event) {\n                    // Modify any 'hashtag' 'nametags'\n                    event.val = _.map(event.val, self._hashToName);\n                    // save the model's tags in either remove or added event\n                    self.model.save({ tags: event.val });\n                    // if it's new, add the tag to the users tags\n                    if (event.added) {\n                        //??: solve weird behavior in FF on test.galaxyproject.org where\n                        //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                        self._addNewTagToTagsUsed(event.added.text + \"\");\n                    }\n                });\n            },\n\n            /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n            _addNewTagToTagsUsed: function(newTag) {\n                //TODO: global\n                var tagsUsed = Galaxy.user.get(\"tags_used\");\n                if (!_.contains(tagsUsed, newTag)) {\n                    tagsUsed.push(newTag);\n                    tagsUsed.sort();\n                    Galaxy.user.set(\"tags_used\", tagsUsed);\n                }\n            },\n\n            /** shut down event listeners and remove this view's DOM */\n            remove: function() {\n                this.$input.off();\n                this.stopListening(this.model);\n                Backbone.View.prototype.remove.call(this);\n            },\n\n            /** string rep */\n            toString: function() {\n                return [\"TagsEditor(\", this.model + \"\", \")\"].join(\"\");\n            }\n        });\n\n    return {\n        TagsEditor: TagsEditor\n    };\n});\n"]}