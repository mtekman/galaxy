{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["define","_super","STATES","initialize","ANNOTATIONS","faIconButton","BASE_MVC","_l","tagsEditorShown","DatasetListItemView","DatasetListItemEdit","extend","attributes","_renderPrimaryActions","call","this","actions","prototype","purgeAllowed","annotationEditorShown","deleted","model","get","NOT_VIEWABLE","concat","Galaxy","router","preventDefault","_renderEditButton","purged","editBtnData","DISCARDED","title","_","UPLOAD","disabled","root","id","_renderDeleteButton","classes","ev","push","dataset_id","self","onclick","contains","NEW","isDeletedOrPurged","_makeDbkeyEditLink","$details","_renderToolHelpButton","datasetID","parseToolBuild","helpString","data","deletedAlready","$el","find","trigger","_renderDetails","OK","FAILED_METADATA","state","divString","url","done","jobID","creating_job","_renderSecondaryActions","help","ERROR","unshift","name","append","$","parseHTML","ajax","tool_id","fail","user","href","length","toggle","parseToolID","console","log","$visualizations","_addScratchBookFn","_renderErrButton","_renderRerunButton","frame","_renderVisualizationsButton","stopPropagation","view","tagsEditor","$where","onshowFirstTime","render","faIcon","urls","rerun","hasUser","target","linkTarget","job_id","appendTo","hasData","isObject","visualizations","warn","editableDbkey","templates","replaceWith","attr","addBack","$links","click","active","add","_renderTags","undelete","_clickPurgeLink","TAGS","TagsEditor","purge","onshow","modelString","$activator","failed_metadata","_renderAnnotation","visualizationsTemplate","wrapTemplate","AnnotationEditor","el","warnings","annotationEditor","edit","events","clone","click .undelete-link","click .purge-link","click .edit-btn","click .delete-btn","click .rerun-btn","click .report-err-btn","click .visualization-btn","click .dbkey a","_clickUndeleteLink","confirm","toString"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["define(\n    [\n        \"mvc/dataset/states\",\n        \"mvc/dataset/dataset-li\",\n        \"mvc/tag\",\n        \"mvc/annotation\",\n        \"ui/fa-icon-button\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(\n        STATES,\n        DATASET_LI,\n        TAGS,\n        ANNOTATIONS,\n        faIconButton,\n        BASE_MVC,\n        _l\n    ) {\n        \"use strict\";\n        //==============================================================================\n        var _super = DATASET_LI.DatasetListItemView;\n        /** @class Editing view for DatasetAssociation.\n */\n        var DatasetListItemEdit = _super.extend(\n            /** @lends DatasetListItemEdit.prototype */ {\n                /** set up: options */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                    this.hasUser = attributes.hasUser;\n\n                    /** allow user purge of dataset files? */\n                    this.purgeAllowed = attributes.purgeAllowed || false;\n\n                    //TODO: move to HiddenUntilActivatedViewMixin\n                    /** should the tags editor be shown or hidden initially? */\n                    this.tagsEditorShown = attributes.tagsEditorShown || false;\n                    /** should the tags editor be shown or hidden initially? */\n                    this.annotationEditorShown =\n                        attributes.annotationEditorShown || false;\n                },\n\n                // ......................................................................... titlebar actions\n                /** In this override, add the other two primary actions: edit and delete */\n                _renderPrimaryActions: function() {\n                    var actions = _super.prototype._renderPrimaryActions.call(\n                        this\n                    );\n                    if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                        return actions;\n                    }\n                    // render the display, edit attr and delete icon-buttons\n                    return _super.prototype._renderPrimaryActions\n                        .call(this)\n                        .concat([\n                            this._renderEditButton(),\n                            this._renderDeleteButton()\n                        ]);\n                },\n\n                //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n                /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n                _renderEditButton: function() {\n                    var self = this;\n                    // don't show edit while uploading, in-accessible\n                    // DO show if in error (ala previous history panel)\n                    if (\n                        this.model.get(\"state\") === STATES.DISCARDED ||\n                        !this.model.get(\"accessible\")\n                    ) {\n                        return null;\n                    }\n                    var purged = this.model.get(\"purged\"),\n                        deleted = this.model.get(\"deleted\"),\n                        editBtnData = {\n                            title: _l(\"Edit attributes\"),\n                            href:\n                                Galaxy.root +\n                                \"datasets/edit?dataset_id=\" +\n                                this.model.attributes.id,\n                            faIcon: \"fa-pencil\",\n                            classes: \"edit-btn\",\n                            onclick: function(ev) {\n                                if (Galaxy.router) {\n                                    ev.preventDefault();\n                                    Galaxy.router.push(\"datasets/edit\", {\n                                        dataset_id: self.model.attributes.id\n                                    });\n                                }\n                            }\n                        };\n                    // disable if purged or deleted and explain why in the tooltip\n                    if (deleted || purged) {\n                        editBtnData.disabled = true;\n                        if (purged) {\n                            editBtnData.title = _l(\n                                \"Cannot edit attributes of datasets removed from disk\"\n                            );\n                        } else if (deleted) {\n                            editBtnData.title = _l(\n                                \"Undelete dataset to edit attributes\"\n                            );\n                        }\n\n                        // disable if still uploading or new\n                    } else if (\n                        _.contains(\n                            [STATES.UPLOAD, STATES.NEW],\n                            this.model.get(\"state\")\n                        )\n                    ) {\n                        editBtnData.disabled = true;\n                        editBtnData.title = _l(\n                            \"This dataset is not yet editable\"\n                        );\n                    }\n                    return faIconButton(editBtnData);\n                },\n\n                /** Render icon-button to delete this hda. */\n                _renderDeleteButton: function() {\n                    // don't show delete if...\n                    if (!this.model.get(\"accessible\")) {\n                        return null;\n                    }\n\n                    var self = this,\n                        deletedAlready = this.model.isDeletedOrPurged();\n                    return faIconButton({\n                        title: !deletedAlready\n                            ? _l(\"Delete\")\n                            : _l(\"Dataset is already deleted\"),\n                        disabled: deletedAlready,\n                        faIcon: \"fa-times\",\n                        classes: \"delete-btn\",\n                        onclick: function() {\n                            // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                            self.$el\n                                .find(\".icon-btn.delete-btn\")\n                                .trigger(\"mouseout\");\n                            self.model[\"delete\"]();\n                        }\n                    });\n                },\n\n                // ......................................................................... details\n                /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n                _renderDetails: function() {\n                    //TODO: generalize to be allow different details for each state\n                    var $details = _super.prototype._renderDetails.call(this),\n                        state = this.model.get(\"state\");\n\n                    if (\n                        !this.model.isDeletedOrPurged() &&\n                        _.contains([STATES.OK, STATES.FAILED_METADATA], state)\n                    ) {\n                        this._renderTags($details);\n                        this._renderAnnotation($details);\n                        this._makeDbkeyEditLink($details);\n                    }\n\n                    this._setUpBehaviors($details);\n                    return $details;\n                },\n\n                /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n                _renderToolHelpButton: function() {\n                    var datasetID = this.model.attributes.dataset_id;\n                    var jobID = this.model.attributes.creating_job;\n                    var self = this;\n\n                    var parseToolBuild = function(data) {\n                        var helpString =\n                            '<div id=\"thdiv-' +\n                            datasetID +\n                            '\" class=\"toolhelp\">';\n                        if (data.name && data.help) {\n                            helpString +=\n                                \"<strong>Tool help for \" +\n                                data.name +\n                                \"</strong><hr/>\";\n                            helpString += data.help;\n                        } else {\n                            helpString +=\n                                \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                        }\n                        helpString += \"</div>\";\n                        self.$el\n                            .find(\".details\")\n                            .append($.parseHTML(helpString));\n                    };\n                    var parseToolID = function(data) {\n                        $.ajax({\n                            url:\n                                Galaxy.root +\n                                \"api/tools/\" +\n                                data.tool_id +\n                                \"/build\"\n                        })\n                            .done(function(data) {\n                                parseToolBuild(data);\n                            })\n                            .fail(function() {\n                                parseToolBuild({});\n                            });\n                    };\n                    if (Galaxy.user.id === null) {\n                        return null;\n                    }\n                    return faIconButton({\n                        title: _l(\"Tool Help\"),\n                        classes: \"icon-btn\",\n                        href: \"#\",\n                        faIcon: \"fa-question\",\n                        onclick: function() {\n                            var divString = \"thdiv-\" + datasetID;\n                            if (self.$el.find(\".toolhelp\").length > 0) {\n                                self.$el.find(\".toolhelp\").toggle();\n                            } else {\n                                $.ajax({\n                                    url: Galaxy.root + \"api/jobs/\" + jobID\n                                })\n                                    .done(function(data) {\n                                        parseToolID(data);\n                                    })\n                                    .fail(function() {\n                                        console.log(\n                                            'Failed at recovering job information from the  Galaxy API for job id \"' +\n                                                jobID +\n                                                '\".'\n                                        );\n                                    });\n                            }\n                        }\n                    });\n                },\n                //*************************************************************************\n\n                /** Add less commonly used actions in the details section based on state */\n                _renderSecondaryActions: function() {\n                    var actions = _super.prototype._renderSecondaryActions.call(\n                        this\n                    );\n                    switch (this.model.get(\"state\")) {\n                        case STATES.UPLOAD:\n                        case STATES.NOT_VIEWABLE:\n                            return actions;\n                        case STATES.ERROR:\n                            // error button comes first\n                            actions.unshift(this._renderErrButton());\n                            return actions.concat([\n                                this._renderRerunButton(),\n                                this._renderToolHelpButton()\n                            ]);\n                        case STATES.OK:\n                        case STATES.FAILED_METADATA:\n                            return actions.concat([\n                                this._renderRerunButton(),\n                                this._renderVisualizationsButton(),\n                                this._renderToolHelpButton()\n                            ]);\n                    }\n                    return actions.concat([\n                        this._renderRerunButton(),\n                        this._renderToolHelpButton()\n                    ]);\n                },\n\n                /** Render icon-button to report an error on this dataset to the galaxy admin. */\n                _renderErrButton: function() {\n                    var self = this;\n                    return faIconButton({\n                        title: _l(\"View or report this error\"),\n                        href:\n                            Galaxy.root +\n                            \"datasets/error?dataset_id=\" +\n                            this.model.attributes.id,\n                        classes: \"report-error-btn\",\n                        faIcon: \"fa-bug\",\n                        onclick: function(ev) {\n                            if (Galaxy.router) {\n                                ev.preventDefault();\n                                Galaxy.router.push(\"datasets/error\", {\n                                    dataset_id: self.model.attributes.id\n                                });\n                            }\n                        }\n                    });\n                },\n\n                /** Render icon-button to re-run the job that created this dataset. */\n                _renderRerunButton: function() {\n                    var creating_job = this.model.get(\"creating_job\");\n                    if (this.model.get(\"rerunnable\")) {\n                        return faIconButton({\n                            title: _l(\"Run this job again\"),\n                            href: this.model.urls.rerun,\n                            classes: \"rerun-btn\",\n                            target: this.linkTarget,\n                            faIcon: \"fa-refresh\",\n                            onclick: function(ev) {\n                                if (Galaxy.router) {\n                                    ev.preventDefault();\n                                    Galaxy.router.push(\"/\", {\n                                        job_id: creating_job\n                                    });\n                                }\n                            }\n                        });\n                    }\n                },\n\n                /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n                _renderVisualizationsButton: function() {\n                    //TODO: someday - lazyload visualizations\n                    var visualizations = this.model.get(\"visualizations\");\n                    if (\n                        this.model.isDeletedOrPurged() ||\n                        !this.hasUser ||\n                        !this.model.hasData() ||\n                        _.isEmpty(visualizations)\n                    ) {\n                        return null;\n                    }\n                    if (!_.isObject(visualizations[0])) {\n                        this.warn(\"Visualizations have been switched off\");\n                        return null;\n                    }\n\n                    var $visualizations = $(\n                        this.templates.visualizations(visualizations, this)\n                    );\n                    //HACK: need to re-write those directed at galaxy_main with linkTarget\n                    $visualizations\n                        .find('[target=\"galaxy_main\"]')\n                        .attr(\"target\", this.linkTarget);\n                    // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n                    this._addScratchBookFn(\n                        $visualizations\n                            .find(\".visualization-link\")\n                            .addBack(\".visualization-link\")\n                    );\n                    return $visualizations;\n                },\n\n                /** add scratchbook functionality to visualization links */\n                _addScratchBookFn: function($links) {\n                    var li = this;\n                    $links.click(function(ev) {\n                        if (Galaxy.frame && Galaxy.frame.active) {\n                            Galaxy.frame.add({\n                                title: \"Visualization\",\n                                url: $(this).attr(\"href\")\n                            });\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        }\n                    });\n                },\n\n                //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n                /** Render the tags list/control */\n                _renderTags: function($where) {\n                    if (!this.hasUser) {\n                        return;\n                    }\n                    var view = this;\n                    this.tagsEditor = new TAGS.TagsEditor({\n                        model: this.model,\n                        el: $where.find(\".tags-display\"),\n                        onshowFirstTime: function() {\n                            this.render();\n                        },\n                        // persist state on the hda view (and not the editor) since these are currently re-created each time\n                        onshow: function() {\n                            view.tagsEditorShown = true;\n                        },\n                        onhide: function() {\n                            view.tagsEditorShown = false;\n                        },\n                        $activator: faIconButton({\n                            title: _l(\"Edit dataset tags\"),\n                            classes: \"tag-btn\",\n                            faIcon: \"fa-tags\"\n                        }).appendTo($where.find(\".actions .right\"))\n                    });\n                    if (this.tagsEditorShown) {\n                        this.tagsEditor.toggle(true);\n                    }\n                },\n\n                /** Render the annotation display/control */\n                _renderAnnotation: function($where) {\n                    if (!this.hasUser) {\n                        return;\n                    }\n                    var view = this;\n                    this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                        model: this.model,\n                        el: $where.find(\".annotation-display\"),\n                        onshowFirstTime: function() {\n                            this.render();\n                        },\n                        // persist state on the hda view (and not the editor) since these are currently re-created each time\n                        onshow: function() {\n                            view.annotationEditorShown = true;\n                        },\n                        onhide: function() {\n                            view.annotationEditorShown = false;\n                        },\n                        $activator: faIconButton({\n                            title: _l(\"Edit dataset annotation\"),\n                            classes: \"annotate-btn\",\n                            faIcon: \"fa-comment\"\n                        }).appendTo($where.find(\".actions .right\"))\n                    });\n                    if (this.annotationEditorShown) {\n                        this.annotationEditor.toggle(true);\n                    }\n                },\n\n                /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n                _makeDbkeyEditLink: function($details) {\n                    // make the dbkey a link to editing\n                    if (\n                        this.model.get(\"metadata_dbkey\") === \"?\" &&\n                        !this.model.isDeletedOrPurged()\n                    ) {\n                        var editableDbkey = $('<a class=\"value\">?</a>')\n                            .attr(\"href\", this.model.urls.edit)\n                            .attr(\"target\", \"_top\");\n                        $details\n                            .find(\".dbkey .value\")\n                            .replaceWith(editableDbkey);\n                    }\n                },\n\n                // ......................................................................... events\n                /** event map */\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .undelete-link\": \"_clickUndeleteLink\",\n                    \"click .purge-link\": \"_clickPurgeLink\",\n\n                    \"click .edit-btn\": function(ev) {\n                        this.trigger(\"edit\", this, ev);\n                    },\n                    \"click .delete-btn\": function(ev) {\n                        this.trigger(\"delete\", this, ev);\n                    },\n                    \"click .rerun-btn\": function(ev) {\n                        this.trigger(\"rerun\", this, ev);\n                    },\n                    \"click .report-err-btn\": function(ev) {\n                        this.trigger(\"report-err\", this, ev);\n                    },\n                    \"click .visualization-btn\": function(ev) {\n                        this.trigger(\"visualize\", this, ev);\n                    },\n                    \"click .dbkey a\": function(ev) {\n                        this.trigger(\"edit\", this, ev);\n                    }\n                }),\n\n                /** listener for item undelete (in the messages section) */\n                _clickUndeleteLink: function(ev) {\n                    this.model.undelete();\n                    return false;\n                },\n\n                /** listener for item purge (in the messages section) */\n                _clickPurgeLink: function(ev) {\n                    if (\n                        confirm(\n                            _l(\n                                \"This will permanently remove the data in your dataset. Are you sure?\"\n                            )\n                        )\n                    ) {\n                        this.model.purge();\n                    }\n                    return false;\n                },\n\n                // ......................................................................... misc\n                /** string rep */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"HDAEditView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DatasetListItemEdit.prototype.templates = (function() {\n            var warnings = _.extend({}, _super.prototype.templates.warnings, {\n                failed_metadata: BASE_MVC.wrapTemplate(\n                    [\n                        // in this override, provide a link to the edit page\n                        '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                        '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                        _l(\n                            \"An error occurred setting the metadata for this dataset\"\n                        ),\n                        '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                        _l(\"Set it manually or retry auto-detection\"),\n                        \"</a>\",\n                        \"</div>\",\n                        \"<% } %>\"\n                    ],\n                    \"dataset\"\n                ),\n\n                deleted: BASE_MVC.wrapTemplate(\n                    [\n                        // in this override, provide links to undelete or purge the dataset\n                        \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                        // deleted not purged\n                        '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l(\"This dataset has been deleted\"),\n                        '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                        _l(\"Undelete it\"),\n                        \"</a>\",\n                        \"<% if( view.purgeAllowed ){ %>\",\n                        '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                        _l(\"Permanently remove it from disk\"),\n                        \"</a>\",\n                        \"<% } %>\",\n                        \"</div>\",\n                        \"<% } %>\"\n                    ],\n                    \"dataset\"\n                )\n            });\n\n            var visualizationsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( visualizations.length === 1 ){ %>\",\n                    '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n                    ' target=\"<%- visualizations[0].target %>\" title=\"',\n                    _l(\"Visualize in\"),\n                    ' <%- visualizations[0].html %>\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                    \"</a>\",\n\n                    \"<% } else { %>\",\n                    '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n                    '<a data-toggle=\"dropdown\" title=\"',\n                    _l(\"Visualize\"),\n                    '\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    \"<% _.each( visualizations, function( visualization ){ %>\",\n                    '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n                    ' target=\"<%- visualization.target %>\">',\n                    \"<%- visualization.html %>\",\n                    \"</a></li>\",\n                    \"<% }); %>\",\n                    \"</ul>\",\n                    \"</div>\",\n                    \"<% } %>\"\n                ],\n                \"visualizations\"\n            );\n\n            return _.extend({}, _super.prototype.templates, {\n                warnings: warnings,\n                visualizations: visualizationsTemplate\n            });\n        })();\n\n        //==============================================================================\n        return {\n            DatasetListItemEdit: DatasetListItemEdit\n        };\n    }\n);\n"]}