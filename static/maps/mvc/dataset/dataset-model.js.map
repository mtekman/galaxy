{"version":3,"sources":["mvc/dataset/dataset-model.js"],"names":["define","STATES","_l","searchableMixin","BASE_MVC","SearchableModelMixin","_logNamespace","logNamespace","Model","extend","LoggableMixin","defaults","mixin","state","NEW","deleted","purged","name","accessible","data_type","file_ext","file_size","meta_files","misc_blurb","misc_info","tags","initialize","attributes","options","this","debug","get","set","NOT_VIEWABLE","urls","_generateUrls","_setUpListeners","report_error","id","show_params","visualization","purge","value","Galaxy","edit","download","_downloadQueryParameters","rerun","meta_download","_","inReadyState","key","trigger","root","currModel","json","newState","previous","on","toJSON","Backbone","prototype","call","parsed","create_time","contains","READY_STATES","update_time","isDeletedOrPurged","hasDetails","attrs","hasData","fetch","save","dataset","always","when","parse","response","_purge","jQuery","Date","ajax","responseJSON","wait","isUndefined","messageBuriedInUnfortunatelyFormattedError","xhr","error","delete","undelete","database","description","url","nameAndId","hda","done","message","status","responseObj","fail","DatasetAssociation","responseText","indexOf","urlRoot","searchAttributes","haveDetails","all","blurb","info","tag","toString","startingLength","resolve","deferred","DatasetAssociationCollection","Collection","model","ajaxFns","shift","ids","map","item","notReady","filter","content","ajaxQueue","ajaxFn","Deferred","length","responses","chain","reverse","i","notify","curr","total","push","matches","matchesWhat","join"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-model.js","sourcesContent":["define([\"mvc/dataset/states\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    STATES,\n    BASE_MVC,\n    _l\n) {\n    \"use strict\";\n\n    var logNamespace = \"dataset\";\n    //==============================================================================\n    var searchableMixin = BASE_MVC.SearchableModelMixin;\n    /** @class base model for any DatasetAssociation (HDAs, LDDAs, DatasetCollectionDAs).\n *      No knowledge of what type (HDA/LDDA/DCDA) should be needed here.\n *  The DA's are made searchable (by attribute) by mixing in SearchableModelMixin.\n */\n    var DatasetAssociation = Backbone.Model\n        .extend(BASE_MVC.LoggableMixin)\n        .extend(\n            BASE_MVC.mixin(\n                searchableMixin,\n                /** @lends DatasetAssociation.prototype */ {\n                    _logNamespace: logNamespace,\n\n                    /** default attributes for a model */\n                    defaults: {\n                        state: STATES.NEW,\n                        deleted: false,\n                        purged: false,\n                        name: \"(unnamed dataset)\",\n                        accessible: true,\n                        // sniffed datatype (sam, tabular, bed, etc.)\n                        data_type: \"\",\n                        file_ext: \"\",\n                        file_size: 0,\n\n                        // array of associated file types (eg. [ 'bam_index', ... ])\n                        meta_files: [],\n\n                        misc_blurb: \"\",\n                        misc_info: \"\",\n\n                        tags: []\n                        // do NOT default on annotation, as this default is valid and will be passed on 'save'\n                        //  which is incorrect behavior when the model is only partially fetched (annos are not passed in summary data)\n                        //annotation          : ''\n                    },\n\n                    /** instance vars and listeners */\n                    initialize: function(attributes, options) {\n                        this.debug(\n                            this + \"(Dataset).initialize\",\n                            attributes,\n                            options\n                        );\n\n                        //!! this state is not in trans.app.model.Dataset.states - set it here -\n                        if (!this.get(\"accessible\")) {\n                            this.set(\"state\", STATES.NOT_VIEWABLE);\n                        }\n\n                        /** Datasets rely/use some web controllers - have the model generate those URLs on startup */\n                        this.urls = this._generateUrls();\n\n                        this._setUpListeners();\n                    },\n\n                    /** returns misc. web urls for rendering things like re-run, display, etc. */\n                    _generateUrls: function() {\n                        var id = this.get(\"id\");\n                        if (!id) {\n                            return {};\n                        }\n                        var urls = {\n                            purge: \"datasets/\" + id + \"/purge_async\",\n                            display:\n                                \"datasets/\" + id + \"/display/?preview=True\",\n                            edit: \"datasets/edit?dataset_id=\" + id,\n                            download:\n                                \"datasets/\" +\n                                id +\n                                \"/display\" +\n                                this._downloadQueryParameters(),\n                            report_error: \"dataset/errors?id=\" + id,\n                            rerun: \"tool_runner/rerun?id=\" + id,\n                            show_params: \"datasets/\" + id + \"/show_params\",\n                            visualization: \"visualization\",\n                            meta_download:\n                                \"dataset/get_metadata_file?hda_id=\" +\n                                id +\n                                \"&metadata_name=\"\n                        };\n                        _.each(urls, function(value, key) {\n                            urls[key] = Galaxy.root + value;\n                        });\n                        this.urls = urls;\n                        return urls;\n                    },\n\n                    _downloadQueryParameters: function() {\n                        return \"?to_ext=\" + this.get(\"file_ext\");\n                    },\n\n                    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n                    _setUpListeners: function() {\n                        // if the state has changed and the new state is a ready state, fire an event\n                        this.on(\"change:state\", function(currModel, newState) {\n                            this.log(\n                                this + \" has changed state:\",\n                                currModel,\n                                newState\n                            );\n                            if (this.inReadyState()) {\n                                this.trigger(\n                                    \"state:ready\",\n                                    currModel,\n                                    newState,\n                                    this.previous(\"state\")\n                                );\n                            }\n                        });\n                        // the download url (currently) relies on having a correct file extension\n                        this.on(\"change:id change:file_ext\", function(\n                            currModel\n                        ) {\n                            this._generateUrls();\n                        });\n                    },\n\n                    // ........................................................................ common queries\n                    /** override to add urls */\n                    toJSON: function() {\n                        var json = Backbone.Model.prototype.toJSON.call(this);\n                        //console.warn( 'returning json?' );\n                        //return json;\n                        return _.extend(json, {\n                            urls: this.urls\n                        });\n                    },\n\n                    /** Is this dataset deleted or purged? */\n                    isDeletedOrPurged: function() {\n                        return this.get(\"deleted\") || this.get(\"purged\");\n                    },\n\n                    /** Is this dataset in a 'ready' state; where 'Ready' states are states where no\n     *      processing (for the ds) is left to do on the server.\n     */\n                    inReadyState: function() {\n                        var ready = _.contains(\n                            STATES.READY_STATES,\n                            this.get(\"state\")\n                        );\n                        return this.isDeletedOrPurged() || ready;\n                    },\n\n                    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n                    hasDetails: function() {\n                        // if it's inaccessible assume it has everything it needs\n                        if (!this.get(\"accessible\")) {\n                            return true;\n                        }\n                        return this.has(\"annotation\");\n                    },\n\n                    /** Convenience function to match dataset.has_data. */\n                    hasData: function() {\n                        return this.get(\"file_size\") > 0;\n                    },\n\n                    // ........................................................................ ajax\n                    fetch: function(options) {\n                        var dataset = this;\n                        return Backbone.Model.prototype.fetch\n                            .call(this, options)\n                            .always(function() {\n                                dataset._generateUrls();\n                            });\n                    },\n\n                    /** override to use actual Dates objects for create/update times */\n                    parse: function(response, options) {\n                        var parsed = Backbone.Model.prototype.parse.call(\n                            this,\n                            response,\n                            options\n                        );\n                        if (parsed.create_time) {\n                            parsed.create_time = new Date(parsed.create_time);\n                        }\n                        if (parsed.update_time) {\n                            parsed.update_time = new Date(parsed.update_time);\n                        }\n                        return parsed;\n                    },\n\n                    /** override to wait by default */\n                    save: function(attrs, options) {\n                        options = options || {};\n                        options.wait = _.isUndefined(options.wait)\n                            ? true\n                            : options.wait;\n                        return Backbone.Model.prototype.save.call(\n                            this,\n                            attrs,\n                            options\n                        );\n                    },\n\n                    //NOTE: subclasses of DA's will need to implement url and urlRoot in order to have these work properly\n                    /** save this dataset, _Mark_ing it as deleted (just a flag) */\n                    delete: function(options) {\n                        if (this.get(\"deleted\")) {\n                            return jQuery.when();\n                        }\n                        return this.save({ deleted: true }, options);\n                    },\n                    /** save this dataset, _Mark_ing it as undeleted */\n                    undelete: function(options) {\n                        if (!this.get(\"deleted\") || this.get(\"purged\")) {\n                            return jQuery.when();\n                        }\n                        return this.save({ deleted: false }, options);\n                    },\n\n                    /** remove the file behind this dataset from the filesystem (if permitted) */\n                    purge: function _purge(options) {\n                        //TODO: use, override model.destroy, HDA.delete({ purge: true })\n                        if (this.get(\"purged\")) {\n                            return jQuery.when();\n                        }\n                        options = options || {};\n                        options.url = this.urls.purge;\n\n                        //TODO: ideally this would be a DELETE call to the api\n                        //  using purge async for now\n                        var hda = this,\n                            xhr = jQuery.ajax(options);\n                        xhr.done(function(message, status, responseObj) {\n                            hda.set({ deleted: true, purged: true });\n                        });\n                        xhr.fail(function(xhr, status, message) {\n                            // Exception messages are hidden within error page including:  '...not allowed in this Galaxy instance.'\n                            // unbury and re-add to xhr\n                            var error = _l(\"Unable to purge dataset\");\n                            var messageBuriedInUnfortunatelyFormattedError =\n                                \"Removal of datasets by users \" +\n                                \"is not allowed in this Galaxy instance\";\n                            if (xhr.responseJSON && xhr.responseJSON.error) {\n                                error = xhr.responseJSON.error;\n                            } else if (\n                                xhr.responseText.indexOf(\n                                    messageBuriedInUnfortunatelyFormattedError\n                                ) !== -1\n                            ) {\n                                error = messageBuriedInUnfortunatelyFormattedError;\n                            }\n                            xhr.responseText = error;\n                            hda.trigger(\"error\", hda, xhr, options, _l(error), {\n                                error: error\n                            });\n                        });\n                        return xhr;\n                    },\n\n                    // ........................................................................ searching\n                    /** what attributes of an HDA will be used in a text search */\n                    searchAttributes: [\n                        \"name\",\n                        \"file_ext\",\n                        \"genome_build\",\n                        \"misc_blurb\",\n                        \"misc_info\",\n                        \"annotation\",\n                        \"tags\"\n                    ],\n\n                    /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n                    searchAliases: {\n                        title: \"name\",\n                        format: \"file_ext\",\n                        database: \"genome_build\",\n                        blurb: \"misc_blurb\",\n                        description: \"misc_blurb\",\n                        info: \"misc_info\",\n                        tag: \"tags\"\n                    },\n\n                    // ........................................................................ misc\n                    /** String representation */\n                    toString: function() {\n                        var nameAndId = this.get(\"id\") || \"\";\n                        if (this.get(\"name\")) {\n                            nameAndId =\n                                '\"' + this.get(\"name\") + '\",' + nameAndId;\n                        }\n                        return \"Dataset(\" + nameAndId + \")\";\n                    }\n                }\n            )\n        );\n\n    //==============================================================================\n    /** @class Backbone collection for dataset associations.\n */\n    var DatasetAssociationCollection = Backbone.Collection\n        .extend(BASE_MVC.LoggableMixin)\n        .extend(\n            /** @lends HistoryContents.prototype */ {\n                _logNamespace: logNamespace,\n\n                model: DatasetAssociation,\n\n                /** root api url */\n                urlRoot: Galaxy.root + \"api/datasets\",\n\n                /** url fn */\n                url: function() {\n                    return this.urlRoot;\n                },\n\n                // ........................................................................ common queries\n                /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n                ids: function() {\n                    return this.map(function(item) {\n                        return item.get(\"id\");\n                    });\n                },\n\n                /** Get contents that are not ready\n     *  @returns array of content models\n     */\n                notReady: function() {\n                    return this.filter(function(content) {\n                        return !content.inReadyState();\n                    });\n                },\n\n                /** return true if any datasets don't have details */\n                haveDetails: function() {\n                    return this.all(function(dataset) {\n                        return dataset.hasDetails();\n                    });\n                },\n\n                // ........................................................................ ajax\n                /** using a queue, perform ajaxFn on each of the models in this collection */\n                ajaxQueue: function(ajaxFn, options) {\n                    var deferred = jQuery.Deferred(),\n                        startingLength = this.length,\n                        responses = [];\n\n                    if (!startingLength) {\n                        deferred.resolve([]);\n                        return deferred;\n                    }\n\n                    // use reverse order (stylistic choice)\n                    var ajaxFns = this.chain()\n                        .reverse()\n                        .map(function(dataset, i) {\n                            return function() {\n                                var xhr = ajaxFn.call(dataset, options);\n                                // if successful, notify using the deferred to allow tracking progress\n                                xhr.done(function(response) {\n                                    deferred.notify({\n                                        curr: i,\n                                        total: startingLength,\n                                        response: response,\n                                        model: dataset\n                                    });\n                                });\n                                // (regardless of previous error or success) if not last ajax call, shift and call the next\n                                //  if last fn, resolve deferred\n                                xhr.always(function(response) {\n                                    responses.push(response);\n                                    if (ajaxFns.length) {\n                                        ajaxFns.shift()();\n                                    } else {\n                                        deferred.resolve(responses);\n                                    }\n                                });\n                            };\n                        })\n                        .value();\n                    // start the queue\n                    ajaxFns.shift()();\n\n                    return deferred;\n                },\n\n                // ........................................................................ sorting/filtering\n                /** return a new collection of datasets whose attributes contain the substring matchesWhat */\n                matches: function(matchesWhat) {\n                    return this.filter(function(dataset) {\n                        return dataset.matches(matchesWhat);\n                    });\n                },\n\n                /** String representation. */\n                toString: function() {\n                    return [\n                        \"DatasetAssociationCollection(\",\n                        this.length,\n                        \")\"\n                    ].join(\"\");\n                }\n            }\n        );\n\n    //==============================================================================\n    return {\n        DatasetAssociation: DatasetAssociation,\n        DatasetAssociationCollection: DatasetAssociationCollection\n    };\n});\n"]}