{"version":3,"sources":["mvc/dataset/data.js"],"names":["define","Modal","mod_icon_btn","DatasetMetadata","Backbone","Model","extend","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","on","_","each","keys","new_key","k","indexOf","attributes","split","set","get_metadata","attribute","TabularDataset","Dataset","defaults","prototype","offset","at_eof","options","chunk_url","Galaxy","first_data_chunk","get_next_chunk","url_viz","root","$","getJSON","self","rval","chunk","success","next_chunk","resolve","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","attempt_to_fetch","$el","expand_to_container","scroll_elt","scrolled_to_bottom","_renderChunk","loading_indicator","when","then","result","hide","attr","column_names","header_row","data_table","append","header_container","appendTo","first_chunk","join","j","scroll","column_types","_renderCell","cell_contents","index","colspan","$cell","text","row","undefined","_renderRow","addClass","cells","line","length","num_columns","slice","range","find","height","overflow","call","parents","p","css","window","scrollTop","dataset_id","EmbeddedTabularDatasetChunkedView","innerHeight","el","scrollHeight","col","chrom","start","end","genome_build","file_ext","modal","array","frame","console","log","IconButton","icon_class","str","match","search","btn_viz","is_numeric","parseFloat","children","btn_viz_pars","IconButtonView","left","top","render","url","events","mouseleave","show","e","target","parent","a_view","eq","html","parent_elt","isNaN","n","isFinite","gene_region","embedded","view","click","add","title","param","createTabularDatasetChunkedView","dataset_config","TopLevelTabularDatasetChunkedView"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\ndefine([\"mvc/ui/ui-modal\", \"mvc/ui/ui-frames\", \"mvc/ui/icon-button\"], function(\n    Modal,\n    Frames,\n    mod_icon_btn\n) {\n    /**\n * Dataset metedata.\n */\n    var DatasetMetadata = Backbone.Model.extend({});\n\n    /**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\n    var Dataset = Backbone.Model.extend({\n        defaults: {\n            id: \"\",\n            type: \"\",\n            name: \"\",\n            hda_ldda: \"hda\",\n            metadata: null\n        },\n\n        initialize: function() {\n            // Metadata can be passed in as a model or a set of attributes; if it's\n            // already a model, there's no need to set metadata.\n            if (!this.get(\"metadata\")) {\n                this._set_metadata();\n            }\n\n            // Update metadata on change.\n            this.on(\"change\", this._set_metadata, this);\n        },\n\n        _set_metadata: function() {\n            var metadata = new DatasetMetadata();\n\n            // Move metadata from dataset attributes to metadata object.\n            _.each(\n                _.keys(this.attributes),\n                function(k) {\n                    if (k.indexOf(\"metadata_\") === 0) {\n                        // Found metadata.\n                        var new_key = k.split(\"metadata_\")[1];\n                        metadata.set(new_key, this.attributes[k]);\n                        delete this.attributes[k];\n                    }\n                },\n                this\n            );\n\n            // Because this is an internal change, silence it.\n            this.set(\"metadata\", metadata, { silent: true });\n        },\n\n        /**\n     * Returns dataset metadata for a given attribute.\n     */\n        get_metadata: function(attribute) {\n            return this.attributes.metadata.get(attribute);\n        },\n\n        urlRoot: Galaxy.root + \"api/datasets\"\n    });\n\n    /**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\n    var TabularDataset = Dataset.extend({\n        defaults: _.extend({}, Dataset.prototype.defaults, {\n            chunk_url: null,\n            first_data_chunk: null,\n            offset: 0,\n            at_eof: false\n        }),\n\n        initialize: function(options) {\n            Dataset.prototype.initialize.call(this);\n\n            // If first data chunk is available, next chunk is 1.\n            if (this.attributes.first_data_chunk) {\n                this.attributes.offset = this.attributes.first_data_chunk.offset;\n            }\n            this.attributes.chunk_url =\n                Galaxy.root + \"dataset/display?dataset_id=\" + this.id;\n            this.attributes.url_viz = Galaxy.root + \"visualization\";\n        },\n\n        /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n        get_next_chunk: function() {\n            // If already at end of file, do nothing.\n            if (this.attributes.at_eof) {\n                return null;\n            }\n\n            // Get next chunk.\n            var self = this,\n                next_chunk = $.Deferred();\n            $.getJSON(this.attributes.chunk_url, {\n                offset: self.attributes.offset\n            }).success(function(chunk) {\n                var rval;\n                if (chunk.ck_data !== \"\") {\n                    // Found chunk.\n                    rval = chunk;\n                    self.attributes.offset = chunk.offset;\n                } else {\n                    // At EOF.\n                    self.attributes.at_eof = true;\n                    rval = null;\n                }\n                next_chunk.resolve(rval);\n            });\n\n            return next_chunk;\n        }\n    });\n\n    var DatasetCollection = Backbone.Collection.extend({\n        model: Dataset\n    });\n\n    /**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\n    var TabularDatasetChunkedView = Backbone.View.extend({\n        /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n        initialize: function(options) {\n            // Row count for rendering.\n            this.row_count = 0;\n            this.loading_chunk = false;\n\n            // load trackster button\n            new TabularButtonTracksterView({\n                model: options.model,\n                $el: this.$el\n            });\n        },\n\n        expand_to_container: function() {\n            if (this.$el.height() < this.scroll_elt.height()) {\n                this.attempt_to_fetch();\n            }\n        },\n\n        attempt_to_fetch: function(func) {\n            var self = this;\n            if (!this.loading_chunk && this.scrolled_to_bottom()) {\n                this.loading_chunk = true;\n                this.loading_indicator.show();\n                $.when(self.model.get_next_chunk()).then(function(result) {\n                    if (result) {\n                        self._renderChunk(result);\n                        self.loading_chunk = false;\n                    }\n                    self.loading_indicator.hide();\n                    self.expand_to_container();\n                });\n            }\n        },\n\n        render: function() {\n            // Add loading indicator.\n            this.loading_indicator = $(\"<div/>\").attr(\n                \"id\",\n                \"loading_indicator\"\n            );\n            this.$el.append(this.loading_indicator);\n\n            // Add data table and header.\n            var data_table = $(\"<table/>\").attr({\n                id: \"content_table\",\n                cellpadding: 0\n            });\n            this.$el.append(data_table);\n            var column_names = this.model.get_metadata(\"column_names\"),\n                header_container = $(\"<thead/>\").appendTo(data_table),\n                header_row = $(\"<tr/>\").appendTo(header_container);\n            if (column_names) {\n                header_row.append(\n                    \"<th>\" + column_names.join(\"</th><th>\") + \"</th>\"\n                );\n            } else {\n                for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                    header_row.append(\"<th>\" + j + \"</th>\");\n                }\n            }\n\n            // Render first chunk.\n            var self = this,\n                first_chunk = this.model.get(\"first_data_chunk\");\n            if (first_chunk) {\n                // First chunk is bootstrapped, so render now.\n                this._renderChunk(first_chunk);\n            } else {\n                // No bootstrapping, so get first chunk and then render.\n                $.when(self.model.get_next_chunk()).then(function(result) {\n                    self._renderChunk(result);\n                });\n            }\n\n            // -- Show new chunks during scrolling. --\n\n            // Set up chunk loading when scrolling using the scrolling element.\n            this.scroll_elt.scroll(function() {\n                self.attempt_to_fetch();\n            });\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return false;\n        },\n\n        // -- Helper functions. --\n\n        _renderCell: function(cell_contents, index, colspan) {\n            var $cell = $(\"<td>\").text(cell_contents);\n            var column_types = this.model.get_metadata(\"column_types\");\n            if (colspan !== undefined) {\n                $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n            } else if (column_types) {\n                if (index < column_types.length) {\n                    if (\n                        column_types[index] === \"str\" ||\n                        column_types[index] === \"list\"\n                    ) {\n                        /* Left align all str columns, right align the rest */\n                        $cell.addClass(\"stringalign\");\n                    }\n                }\n            }\n            return $cell;\n        },\n\n        _renderRow: function(line) {\n            // Check length of cells to ensure this is a complete row.\n            var cells = line.split(\"\\t\"),\n                row = $(\"<tr>\"),\n                num_columns = this.model.get_metadata(\"columns\");\n\n            if (this.row_count % 2 !== 0) {\n                row.addClass(\"dark_row\");\n            }\n\n            if (cells.length === num_columns) {\n                _.each(\n                    cells,\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n            } else if (cells.length > num_columns) {\n                // SAM file or like format with optional metadata included.\n                _.each(\n                    cells.slice(0, num_columns - 1),\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n                row.append(\n                    this._renderCell(\n                        cells.slice(num_columns - 1).join(\"\\t\"),\n                        num_columns - 1\n                    )\n                );\n            } else if (cells.length === 1) {\n                // Comment line, just return the one cell.\n                row.append(this._renderCell(line, 0, num_columns));\n            } else {\n                // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n                // Possibly a SAM file or like format with optional metadata missing.\n                // Could also be a tabular file with a line with missing columns.\n                _.each(\n                    cells,\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n                _.each(_.range(num_columns - cells.length), function() {\n                    row.append($(\"<td>\"));\n                });\n            }\n\n            this.row_count++;\n            return row;\n        },\n\n        _renderChunk: function(chunk) {\n            var data_table = this.$el.find(\"table\");\n            _.each(\n                chunk.ck_data.split(\"\\n\"),\n                function(line, index) {\n                    if (line !== \"\") {\n                        data_table.append(this._renderRow(line));\n                    }\n                },\n                this\n            );\n        }\n    });\n\n    /**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\n    var TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n        initialize: function(options) {\n            TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n            // Scrolling happens in top-level elements.\n            var scroll_elt = _.find(this.$el.parents(), function(p) {\n                return $(p).css(\"overflow\") === \"auto\";\n            });\n\n            // If no scrolling element found, use window.\n            if (!scroll_elt) {\n                scroll_elt = window;\n            }\n\n            // Wrap scrolling element for easy access.\n            this.scroll_elt = $(scroll_elt);\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return (\n                this.$el.height() -\n                    this.scroll_elt.scrollTop() -\n                    this.scroll_elt.height() <=\n                0\n            );\n        }\n    });\n\n    /**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\n    var EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n        initialize: function(options) {\n            TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n            // Because view is embedded, set up div to do scrolling.\n            this.scroll_elt = this.$el.css({\n                position: \"relative\",\n                overflow: \"scroll\",\n                height: options.height || \"500px\"\n            });\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return (\n                this.$el.scrollTop() + this.$el.innerHeight() >=\n                this.el.scrollHeight\n            );\n        }\n    });\n\n    /** Button for trackster visualization */\n    var TabularButtonTracksterView = Backbone.View.extend({\n        // gene region columns\n        col: {\n            chrom: null,\n            start: null,\n            end: null\n        },\n\n        // url for trackster\n        url_viz: null,\n\n        // dataset id\n        dataset_id: null,\n\n        // database key\n        genome_build: null,\n\n        // data type\n        file_ext: null,\n\n        // backbone initialize\n        initialize: function(options) {\n            // check if environment is available\n            var Galaxy = parent.Galaxy;\n\n            // link galaxy modal or create one\n            if (Galaxy && Galaxy.modal) {\n                this.modal = Galaxy.modal;\n            }\n\n            // link galaxy frames\n            if (Galaxy && Galaxy.frame) {\n                this.frame = Galaxy.frame;\n            }\n\n            // check\n            if (!this.modal || !this.frame) {\n                return;\n            }\n\n            // model/metadata\n            var model = options.model;\n            var metadata = model.get(\"metadata\");\n\n            // check for datatype\n            if (!model.get(\"file_ext\")) {\n                return;\n            }\n\n            // get data type\n            this.file_ext = model.get(\"file_ext\");\n\n            // check for bed-file format\n            if (this.file_ext == \"bed\") {\n                // verify that metadata exists\n                if (\n                    metadata.get(\"chromCol\") &&\n                    metadata.get(\"startCol\") &&\n                    metadata.get(\"endCol\")\n                ) {\n                    // read in columns\n                    this.col.chrom = metadata.get(\"chromCol\") - 1;\n                    this.col.start = metadata.get(\"startCol\") - 1;\n                    this.col.end = metadata.get(\"endCol\") - 1;\n                } else {\n                    console.log(\n                        \"TabularButtonTrackster : Bed-file metadata incomplete.\"\n                    );\n                    return;\n                }\n            }\n\n            // check for vcf-file format\n            if (this.file_ext == \"vcf\") {\n                // search array\n                function search(str, array) {\n                    for (var j = 0; j < array.length; j++)\n                        if (array[j].match(str)) return j;\n                    return -1;\n                }\n\n                // load\n                this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n                this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n                this.col.end = null;\n\n                // verify that metadata exists\n                if (this.col.chrom == -1 || this.col.start == -1) {\n                    console.log(\n                        \"TabularButtonTrackster : VCF-file metadata incomplete.\"\n                    );\n                    return;\n                }\n            }\n\n            // check\n            if (this.col.chrom === undefined) {\n                return;\n            }\n\n            // get dataset id\n            if (model.id) {\n                this.dataset_id = model.id;\n            } else {\n                console.log(\n                    \"TabularButtonTrackster : Dataset identification is missing.\"\n                );\n                return;\n            }\n\n            // get url\n            if (model.get(\"url_viz\")) {\n                this.url_viz = model.get(\"url_viz\");\n            } else {\n                console.log(\n                    \"TabularButtonTrackster : Url for visualization controller is missing.\"\n                );\n                return;\n            }\n\n            // get genome_build / database key\n            if (model.get(\"genome_build\")) {\n                this.genome_build = model.get(\"genome_build\");\n            }\n\n            // create the icon\n            var btn_viz = new mod_icon_btn.IconButtonView({\n                model: new mod_icon_btn.IconButton({\n                    title: \"Visualize\",\n                    icon_class: \"chart_curve\",\n                    id: \"btn_viz\"\n                })\n            });\n\n            // set element\n            this.setElement(options.$el);\n\n            // add to element\n            this.$el.append(btn_viz.render().$el);\n\n            // hide the button\n            this.hide();\n        },\n\n        /** Add event handlers */\n        events: {\n            \"mouseover tr\": \"show\",\n            mouseleave: \"hide\"\n        },\n\n        // show button\n        show: function(e) {\n            var self = this;\n\n            // is numeric\n            function is_numeric(n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            }\n\n            // check\n            if (this.col.chrom === null) return;\n\n            // get selected data line\n            var row = $(e.target).parent();\n\n            // verify that location has been found\n            var chrom = row\n                .children()\n                .eq(this.col.chrom)\n                .html();\n            var start = row\n                .children()\n                .eq(this.col.start)\n                .html();\n\n            // end is optional\n            var end = this.col.end\n                ? row\n                      .children()\n                      .eq(this.col.end)\n                      .html()\n                : start;\n\n            // double check location\n            if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n                // get target gene region\n                var btn_viz_pars = {\n                    dataset_id: this.dataset_id,\n                    gene_region: chrom + \":\" + start + \"-\" + end\n                };\n\n                // get button position\n                var offset = row.offset();\n                var left = offset.left - 10;\n                var top = offset.top - $(window).scrollTop() + 3;\n\n                // update css\n                $(\"#btn_viz\").css({\n                    position: \"fixed\",\n                    top: top + \"px\",\n                    left: left + \"px\"\n                });\n                $(\"#btn_viz\").off(\"click\");\n                $(\"#btn_viz\").click(function() {\n                    self.frame.add({\n                        title: \"Trackster\",\n                        url:\n                            self.url_viz + \"/trackster?\" + $.param(btn_viz_pars)\n                    });\n                });\n\n                // show the button\n                $(\"#btn_viz\").show();\n            } else {\n                // hide the button\n                $(\"#btn_viz\").hide();\n            }\n        },\n\n        /** hide button */\n        hide: function() {\n            this.$(\"#btn_viz\").hide();\n        }\n    });\n\n    // -- Utility functions. --\n\n    /**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\n    var createModelAndView = function(model, view, model_config, parent_elt) {\n        // Create model, view.\n        var a_view = new view({\n            model: new model(model_config)\n        });\n\n        // Render view and add to parent element.\n        a_view.render();\n        if (parent_elt) {\n            parent_elt.append(a_view.$el);\n        }\n\n        return a_view;\n    };\n\n    /**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\n    var createTabularDatasetChunkedView = function(options) {\n        // If no model, create and set model from dataset config.\n        if (!options.model) {\n            options.model = new TabularDataset(options.dataset_config);\n        }\n\n        var parent_elt = options.parent_elt;\n        var embedded = options.embedded;\n\n        // Clean up options so that only needed options are passed to view.\n        delete options.embedded;\n        delete options.parent_elt;\n        delete options.dataset_config;\n\n        // Create and set up view.\n        var view = embedded\n            ? new EmbeddedTabularDatasetChunkedView(options)\n            : new TopLevelTabularDatasetChunkedView(options);\n        view.render();\n\n        if (parent_elt) {\n            parent_elt.append(view.$el);\n            // If we're sticking this in another element, once it's appended check\n            // to make sure we've filled enough space.\n            // Without this, the scroll elements don't work.\n            view.expand_to_container();\n        }\n\n        return view;\n    };\n\n    return {\n        Dataset: Dataset,\n        TabularDataset: TabularDataset,\n        DatasetCollection: DatasetCollection,\n        TabularDatasetChunkedView: TabularDatasetChunkedView,\n        createTabularDatasetChunkedView: createTabularDatasetChunkedView\n    };\n});\n"]}