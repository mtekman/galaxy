{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["define","logNamespace","LIST_ITEM","STATES","faIconButton","BASE_MVC","_l","_super","ListItemView","DatasetListItemView","extend","_logNamespace","initialize","prototype","attributes","id","this","model","get","join","linkTarget","logger","log","_setUpListeners","call","self","changedAttributes","state","silent","has","changed","keys","inReadyState","expanded","hasDetails","fetch","done","render","_","length","$","html","_renderNametags","callback","view","jQuery","when","remove","speed","_swapNewRender","fxSpeed","View","addClass","NOT_VIEWABLE","target","$newRender","$el","_renderPrimaryActions","displayBtnData","title","disabled","NEW","DISCARDED","classes","Galaxy","addDataset","ev","preventDefault","UPLOAD","find","href","empty","append","display","_setUpBehaviors","$details","frame","active","summaryRenderFn","json","$warnings","templates","noAccess","toJSON","isDeletedOrPurged","_renderDetails","displayApplications","_renderSummary","prepend","_renderDetailMessages","_renderSecondaryActions","_renderDisplayApplications","_renderShowParamsButton","summaries","unknown","urls","show_params","faIcon","detailMessages","templateFn","onclick","stopPropagation","_renderDownloadButton","_renderMetaFileDownloadButton","debug","OK","FAILED_METADATA","trigger","add","url","warnings","isEmpty","download","detailsTemplate","wrapTemplate","summaryTemplates","map","meta_file","meta_download","file_type","displayApplicationsTemplate","noAccessTemplate","template","tpl","tags","events","clone","click .display-btn","click .params-btn","click .download-btn","toString","failed_metadata","error","purged","deleted","QUEUED","RUNNING","SETTING_METADATA","PAUSED","ERROR","EMPTY","detailMessageTemplates","resubmitted","details"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-item\",\n        \"mvc/dataset/states\",\n        \"ui/fa-icon-button\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(LIST_ITEM, STATES, faIconButton, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"dataset\";\n        /*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\n        var _super = LIST_ITEM.ListItemView;\n        /** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\n        var DatasetListItemView = _super.extend(\n            /** @lends DatasetListItemView.prototype */ {\n                _logNamespace: logNamespace,\n\n                className: _super.prototype.className + \" dataset\",\n                //TODO:?? doesn't exactly match an hda's type_id\n                id: function() {\n                    return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n                },\n\n                /** Set up: instance vars, options, and event handlers */\n                initialize: function(attributes) {\n                    if (attributes.logger) {\n                        this.logger = this.model.logger = attributes.logger;\n                    }\n                    this.log(this + \".initialize:\", attributes);\n                    _super.prototype.initialize.call(this, attributes);\n\n                    /** where should pages from links be displayed? (default to new tab/window) */\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n                },\n\n                /** event listeners */\n                _setUpListeners: function() {\n                    _super.prototype._setUpListeners.call(this);\n                    var self = this;\n\n                    // re-rendering on any model changes\n                    return self.listenTo(self.model, {\n                        change: function(model) {\n                            // if the model moved into the ready state and is expanded without details, fetch those details now\n                            if (\n                                self.model.changedAttributes().state &&\n                                self.model.inReadyState() &&\n                                self.expanded &&\n                                !self.model.hasDetails()\n                            ) {\n                                // normally, will render automatically (due to fetch -> change),\n                                // but! setting_metadata sometimes doesn't cause any other changes besides state\n                                // so, not rendering causes it to seem frozen in setting_metadata state\n                                self.model\n                                    .fetch({ silent: true })\n                                    .done(function() {\n                                        self.render();\n                                    });\n                            } else {\n                                if (\n                                    _.has(model.changed, \"tags\") &&\n                                    _.keys(model.changed).length === 1\n                                ) {\n                                    // If only the tags have changed, rerender specifically\n                                    // the titlebar region.  Otherwise default to the full\n                                    // render.\n                                    self\n                                        .$(\".nametags\")\n                                        .html(self._renderNametags());\n                                } else {\n                                    self.render();\n                                }\n                            }\n                        }\n                    });\n                },\n\n                // ......................................................................... expandable\n                /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n                _fetchModelDetails: function() {\n                    var view = this;\n                    if (view.model.inReadyState() && !view.model.hasDetails()) {\n                        return view.model.fetch({ silent: true });\n                    }\n                    return jQuery.when();\n                },\n\n                // ......................................................................... removal\n                /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n                remove: function(speed, callback) {\n                    var view = this;\n                    speed = speed || this.fxSpeed;\n                    this.$el.fadeOut(speed, function() {\n                        Backbone.View.prototype.remove.call(view);\n                        if (callback) {\n                            callback.call(view);\n                        }\n                    });\n                },\n\n                // ......................................................................... rendering\n                /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n                /** In this override, add the dataset state as a class for use with state-based CSS */\n                _swapNewRender: function($newRender) {\n                    _super.prototype._swapNewRender.call(this, $newRender);\n                    if (this.model.has(\"state\")) {\n                        this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n                    }\n                    return this.$el;\n                },\n\n                // ................................................................................ titlebar\n                /** In this override, add the dataset display button. */\n                _renderPrimaryActions: function() {\n                    // render just the display for read-only\n                    return [this._renderDisplayButton()];\n                },\n\n                /** Render icon-button to display dataset data */\n                _renderDisplayButton: function() {\n                    // don't show display if not viewable or not accessible\n                    var state = this.model.get(\"state\");\n                    if (\n                        state === STATES.NOT_VIEWABLE ||\n                        state === STATES.DISCARDED ||\n                        !this.model.get(\"accessible\")\n                    ) {\n                        return null;\n                    }\n\n                    var displayBtnData = {\n                        target: this.linkTarget,\n                        classes: \"display-btn\"\n                    };\n\n                    // show a disabled display if the data's been purged\n                    if (this.model.get(\"purged\")) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\n                            \"Cannot display datasets removed from disk\"\n                        );\n\n                        // disable if still uploading\n                    } else if (state === STATES.UPLOAD) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\n                            \"This dataset must finish uploading before it can be viewed\"\n                        );\n\n                        // disable if still new\n                    } else if (state === STATES.NEW) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\n                            \"This dataset is not yet viewable\"\n                        );\n                    } else {\n                        displayBtnData.title = _l(\"View data\");\n\n                        // default link for dataset\n                        displayBtnData.href = this.model.urls.display;\n\n                        // add frame manager option onclick event\n                        var self = this;\n                        displayBtnData.onclick = function(ev) {\n                            if (Galaxy.frame && Galaxy.frame.active) {\n                                // Add dataset to frames.\n                                Galaxy.frame.addDataset(self.model.get(\"id\"));\n                                ev.preventDefault();\n                            }\n                        };\n                    }\n                    displayBtnData.faIcon = \"fa-eye\";\n                    return faIconButton(displayBtnData);\n                },\n\n                // ......................................................................... rendering details\n                /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderDetails: function() {\n                    //TODO: generalize to be allow different details for each state\n\n                    // no access - render nothing but a message\n                    if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                        return $(\n                            this.templates.noAccess(this.model.toJSON(), this)\n                        );\n                    }\n\n                    var $details = _super.prototype._renderDetails.call(this);\n                    $details\n                        .find(\".actions .left\")\n                        .empty()\n                        .append(this._renderSecondaryActions());\n                    $details\n                        .find(\".summary\")\n                        .html(this._renderSummary())\n                        .prepend(this._renderDetailMessages());\n                    $details\n                        .find(\".display-applications\")\n                        .html(this._renderDisplayApplications());\n\n                    this._setUpBehaviors($details);\n                    return $details;\n                },\n\n                /** Defer to the appropo summary rendering fn based on state */\n                _renderSummary: function() {\n                    var json = this.model.toJSON(),\n                        summaryRenderFn = this.templates.summaries[json.state];\n                    summaryRenderFn =\n                        summaryRenderFn || this.templates.summaries.unknown;\n                    return summaryRenderFn(json, this);\n                },\n\n                /** Render messages to be displayed only when the details are shown */\n                _renderDetailMessages: function() {\n                    var view = this,\n                        $warnings = $('<div class=\"detail-messages\"></div>'),\n                        json = view.model.toJSON();\n                    //TODO:! unordered (map)\n                    _.each(view.templates.detailMessages, function(templateFn) {\n                        $warnings.append($(templateFn(json, view)));\n                    });\n                    return $warnings;\n                },\n\n                /** Render the external display application links */\n                _renderDisplayApplications: function() {\n                    if (this.model.isDeletedOrPurged()) {\n                        return \"\";\n                    }\n                    // render both old and new display apps using the same template\n                    return [\n                        this.templates.displayApplications(\n                            this.model.get(\"display_apps\"),\n                            this\n                        ),\n                        this.templates.displayApplications(\n                            this.model.get(\"display_types\"),\n                            this\n                        )\n                    ].join(\"\");\n                },\n\n                // ......................................................................... secondary/details actions\n                /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n                _renderSecondaryActions: function() {\n                    this.debug(\"_renderSecondaryActions\");\n                    switch (this.model.get(\"state\")) {\n                        case STATES.NOT_VIEWABLE:\n                            return [];\n                        case STATES.OK:\n                        case STATES.FAILED_METADATA:\n                        case STATES.ERROR:\n                            return [\n                                this._renderDownloadButton(),\n                                this._renderShowParamsButton()\n                            ];\n                    }\n                    return [this._renderShowParamsButton()];\n                },\n\n                /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderShowParamsButton: function() {\n                    // gen. safe to show in all cases\n                    return faIconButton({\n                        title: _l(\"View details\"),\n                        classes: \"params-btn\",\n                        href: this.model.urls.show_params,\n                        target: this.linkTarget,\n                        faIcon: \"fa-info-circle\",\n                        onclick: function(ev) {\n                            if (Galaxy.frame && Galaxy.frame.active) {\n                                Galaxy.frame.add({\n                                    title: \"Dataset details\",\n                                    url: this.href\n                                });\n                                ev.preventDefault();\n                                ev.stopPropagation();\n                            }\n                        }\n                    });\n                },\n\n                /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderDownloadButton: function() {\n                    // don't show anything if the data's been purged\n                    if (this.model.get(\"purged\") || !this.model.hasData()) {\n                        return null;\n                    }\n\n                    // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n                    //  or a single download icon-button (if there are no meta files)\n                    if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                        return this._renderMetaFileDownloadButton();\n                    }\n\n                    return $(\n                        [\n                            '<a class=\"download-btn icon-btn\" ',\n                            'href=\"',\n                            this.model.urls.download,\n                            '\" title=\"' + _l(\"Download\") + '\" download>',\n                            '<span class=\"fa fa-floppy-o\"></span>',\n                            \"</a>\"\n                        ].join(\"\")\n                    );\n                },\n\n                /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n                _renderMetaFileDownloadButton: function() {\n                    var urls = this.model.urls;\n                    return $(\n                        [\n                            '<div class=\"metafile-dropdown dropdown\">',\n                            '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                            ' title=\"' + _l(\"Download\") + '\">',\n                            '<span class=\"fa fa-floppy-o\"></span>',\n                            \"</a>\",\n                            '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                            '<li><a href=\"' + urls.download + '\" download>',\n                            _l(\"Download dataset\"),\n                            \"</a></li>\",\n                            _.map(this.model.get(\"meta_files\"), function(\n                                meta_file\n                            ) {\n                                return [\n                                    '<li><a href=\"',\n                                    urls.meta_download + meta_file.file_type,\n                                    '\">',\n                                    _l(\"Download\"),\n                                    \" \",\n                                    meta_file.file_type,\n                                    \"</a></li>\"\n                                ].join(\"\");\n                            }).join(\"\\n\"),\n                            \"</ul>\",\n                            \"</div>\"\n                        ].join(\"\\n\")\n                    );\n                },\n\n                _renderNametags: function() {\n                    var tpl = _.template(\n                        [\n                            \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                            '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                            '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                            \"<% } %>\",\n                            \"<% }); %>\"\n                        ].join(\"\")\n                    );\n                    return tpl({ tags: this.model.get(\"tags\") });\n                },\n\n                // ......................................................................... misc\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .display-btn\": function(ev) {\n                        this.trigger(\"display\", this, ev);\n                    },\n                    \"click .params-btn\": function(ev) {\n                        this.trigger(\"params\", this, ev);\n                    },\n                    \"click .download-btn\": function(ev) {\n                        this.trigger(\"download\", this, ev);\n                    }\n                }),\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"DatasetListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DatasetListItemView.prototype.templates = (function() {\n            //TODO: move to require text! plugin\n\n            var warnings = _.extend({}, _super.prototype.templates.warnings, {\n                failed_metadata: BASE_MVC.wrapTemplate([\n                    // failed metadata is rendered as a warning on an otherwise ok dataset view\n                    '<% if( model.state === \"failed_metadata\" ){ %>',\n                    '<div class=\"warningmessagesmall\">',\n                    _l(\n                        \"An error occurred setting the metadata for this dataset\"\n                    ),\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                error: BASE_MVC.wrapTemplate([\n                    // error during index fetch - show error on dataset\n                    \"<% if( model.error ){ %>\",\n                    '<div class=\"errormessagesmall\">',\n                    _l(\"There was an error getting the data for this dataset\"),\n                    \": <%- model.error %>\",\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                purged: BASE_MVC.wrapTemplate([\n                    \"<% if( model.purged ){ %>\",\n                    '<div class=\"purged-msg warningmessagesmall\">',\n                    _l(\"This dataset has been deleted and removed from disk\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                deleted: BASE_MVC.wrapTemplate([\n                    // deleted not purged\n                    \"<% if( model.deleted && !model.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This dataset has been deleted\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ])\n\n                //NOTE: hidden warning is only needed for HDAs\n            });\n\n            var detailsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"details\">',\n                    '<div class=\"summary\"></div>',\n\n                    '<div class=\"actions clear\">',\n                    '<div class=\"left\"></div>',\n                    '<div class=\"right\"></div>',\n                    \"</div>\",\n\n                    // do not display tags, annotation, display apps, or peek when deleted\n                    \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n                    '<div class=\"tags-display\"></div>',\n                    '<div class=\"annotation-display\"></div>',\n\n                    '<div class=\"display-applications\"></div>',\n\n                    \"<% if( dataset.peek ){ %>\",\n                    '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n                    \"<% } %>\",\n                    \"<% } %>\",\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n\n            var noAccessTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"details\">',\n                    '<div class=\"summary\">',\n                    _l(\"You do not have permission to view this dataset\"),\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n\n            //TODO: still toooooooooooooo complex - rework\n            var summaryTemplates = {};\n            summaryTemplates[STATES.OK] = summaryTemplates[\n                STATES.FAILED_METADATA\n            ] = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( dataset.misc_blurb ){ %>\",\n                    '<div class=\"blurb\">',\n                    '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.file_ext ){ %>\",\n                    '<div class=\"datatype\">',\n                    '<label class=\"prompt\">',\n                    _l(\"format\"),\n                    \"</label>\",\n                    '<span class=\"value\"><%- dataset.file_ext %></span>',\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.metadata_dbkey ){ %>\",\n                    '<div class=\"dbkey\">',\n                    '<label class=\"prompt\">',\n                    _l(\"database\"),\n                    \"</label>\",\n                    '<span class=\"value\">',\n                    \"<%- dataset.metadata_dbkey %>\",\n                    \"</span>\",\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.misc_info ){ %>\",\n                    '<div class=\"info\">',\n                    '<span class=\"value\"><%- dataset.misc_info %></span>',\n                    \"</div>\",\n                    \"<% } %>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l(\n                        \"This is a new dataset and not all of its data are available yet\"\n                    ),\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l(\"You do not have permission to view this dataset\"),\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l(\n                        \"The job creating this dataset was cancelled before completion\"\n                    ),\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l(\n                        'This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'\n                    ),\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( !dataset.purged ){ %>\",\n                    \"<div><%- dataset.misc_blurb %></div>\",\n                    \"<% } %>\",\n                    '<span class=\"help-text\">',\n                    _l(\"An error occurred with this dataset\"),\n                    \":</span>\",\n                    '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l(\"No data\"),\n                    \": <i><%- dataset.misc_blurb %></i></div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n                [\n                    '<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'\n                ],\n                \"dataset\"\n            );\n\n            // messages to be displayed only within the details section ('below the fold')\n            var detailMessageTemplates = {\n                resubmitted: BASE_MVC.wrapTemplate([\n                    // deleted not purged\n                    \"<% if( model.resubmitted ){ %>\",\n                    '<div class=\"resubmitted-msg infomessagesmall\">',\n                    _l(\"The job creating this dataset has been resubmitted\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ])\n            };\n\n            // this is applied to both old and new style display apps\n            var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    \"<% _.each( apps, function( app ){ %>\",\n                    '<div class=\"display-application\">',\n                    '<span class=\"display-application-location\"><%- app.label %></span> ',\n                    '<span class=\"display-application-links\">',\n                    \"<% _.each( app.links, function( link ){ %>\",\n                    '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n                    \"<% print( _l( link.text ) ); %>\",\n                    \"</a> \",\n                    \"<% }); %>\",\n                    \"</span>\",\n                    \"</div>\",\n                    \"<% }); %>\"\n                ],\n                \"apps\"\n            );\n\n            return _.extend({}, _super.prototype.templates, {\n                warnings: warnings,\n                details: detailsTemplate,\n                noAccess: noAccessTemplate,\n                summaries: summaryTemplates,\n                detailMessages: detailMessageTemplates,\n                displayApplications: displayApplicationsTemplate\n            });\n        })();\n\n        // ============================================================================\n        return {\n            DatasetListItemView: DatasetListItemView\n        };\n    }\n);\n"]}