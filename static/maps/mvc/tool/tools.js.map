{"version":3,"sources":["mvc/tool/tools.js"],"names":["define","_","util","data","ToolForm","VisibilityMixin","hidden","hide","this","set","toggle","is_visible","attributes","type","Backbone","Model","extend","value","html","num_samples","initialize","copy","options","ToolParameter","unescape","set_value","toJSON","ToolParameterCollection","Collection","model","DataToolParameter","IntegerToolParameter","parseInt","get_samples","FloatToolParameter","linear","domain","parseFloat","get","ticks","SelectToolParameter","subModelTypes","option","integer","float","Tool","select","inputs","defaults","id","urlRoot","Galaxy","description","outputs","root","prototype","call","p","remove_inputs","tool","rval","map","i","types","only_samplable_inputs","valid_inputs","input","indexOf","remove","incompatible_inputs","apply_search_results","each","push","results","self","inputs_dict","set_input_values","show","keys","set_input_value","name","find","_run","target_dataset_id","target_dataset","regions","input_name","run","input_dict","rerun","action","additional_params","get_inputs_dict","url","run_deferred","Deferred","ss_deferred","ServerStateDeferred","success_fn","payload","tool_id","$","ajax_settings","View","stringify","dataType","contentType","ToolCollection","response","ToolSectionLabel","then","resolve","DatasetCollection","result","clear_search_results","elt","ToolSection","all_hidden","elems","cur_label","clear_key","ToolSearch","query","min_chars_for_search","clear_btn_url","visible","on","do_search","length","q","timer","clearTimeout","ToolPanel","tool_search","clear_search","panel_elt","parse","parse_elt","elt_dict","model_class","update_visible","router","version","$el","append","$link","ToolLinkView","BaseView","ToolSectionLabelView","className","tool_link","formStyle","e","preventDefault","upload","section_body","tool_view","tagName","render","label_view","text","ToolSectionView","events","update_open","templates","panel_section","click .toolSectionTitle > a","open","slideDown","children","slideUp","ToolSearchView","query_changed","click","keyup :input","change :input","click #search-clear-btn","ToolPanelView","is","css","tooltip","focus_and_select","search_view","val","evData","which","trigger","handle_search_results","section_title_view","tool_form","IntegratedToolMenuAndView","tool_panel_view","done","tool_form_view","template","collection","ToolFormView","show_tool","fetch","width","join","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\ndefine(\n    [\n        \"libs/underscore\",\n        \"viz/trackster/util\",\n        \"mvc/dataset/data\",\n        \"mvc/tool/tool-form\"\n    ],\n    function(_, util, data, ToolForm) {\n        \"use strict\";\n\n        /**\n * Mixin for tracking model visibility.\n */\n        var VisibilityMixin = {\n            hidden: false,\n\n            show: function() {\n                this.set(\"hidden\", false);\n            },\n\n            hide: function() {\n                this.set(\"hidden\", true);\n            },\n\n            toggle: function() {\n                this.set(\"hidden\", !this.get(\"hidden\"));\n            },\n\n            is_visible: function() {\n                return !this.attributes.hidden;\n            }\n        };\n\n        /**\n * A tool parameter.\n */\n        var ToolParameter = Backbone.Model.extend({\n            defaults: {\n                name: null,\n                label: null,\n                type: null,\n                value: null,\n                html: null,\n                num_samples: 5\n            },\n\n            initialize: function(options) {\n                this.attributes.html = unescape(this.attributes.html);\n            },\n\n            copy: function() {\n                return new ToolParameter(this.toJSON());\n            },\n\n            set_value: function(value) {\n                this.set(\"value\", value || \"\");\n            }\n        });\n\n        var ToolParameterCollection = Backbone.Collection.extend({\n            model: ToolParameter\n        });\n\n        /**\n * A data tool parameter.\n */\n        var DataToolParameter = ToolParameter.extend({});\n\n        /**\n * An integer tool parameter.\n */\n        var IntegerToolParameter = ToolParameter.extend({\n            set_value: function(value) {\n                this.set(\"value\", parseInt(value, 10));\n            },\n\n            /**\n     * Returns samples from a tool input.\n     */\n            get_samples: function() {\n                return d3.scale\n                    .linear()\n                    .domain([this.get(\"min\"), this.get(\"max\")])\n                    .ticks(this.get(\"num_samples\"));\n            }\n        });\n\n        var FloatToolParameter = IntegerToolParameter.extend({\n            set_value: function(value) {\n                this.set(\"value\", parseFloat(value));\n            }\n        });\n\n        /**\n * A select tool parameter.\n */\n        var SelectToolParameter = ToolParameter.extend({\n            /**\n     * Returns tool options.\n     */\n            get_samples: function() {\n                return _.map(this.get(\"options\"), function(option) {\n                    return option[0];\n                });\n            }\n        });\n\n        // Set up dictionary of parameter types.\n        ToolParameter.subModelTypes = {\n            integer: IntegerToolParameter,\n            float: FloatToolParameter,\n            data: DataToolParameter,\n            select: SelectToolParameter\n        };\n\n        /**\n * A Galaxy tool.\n */\n        var Tool = Backbone.Model.extend({\n            // Default attributes.\n            defaults: {\n                id: null,\n                name: null,\n                description: null,\n                target: null,\n                inputs: [],\n                outputs: []\n            },\n\n            urlRoot: Galaxy.root + \"api/tools\",\n\n            initialize: function(options) {\n                // Set parameters.\n                this.set(\n                    \"inputs\",\n                    new ToolParameterCollection(\n                        _.map(options.inputs, function(p) {\n                            var p_class =\n                                ToolParameter.subModelTypes[p.type] ||\n                                ToolParameter;\n                            return new p_class(p);\n                        })\n                    )\n                );\n            },\n\n            /**\n     *\n     */\n            toJSON: function() {\n                var rval = Backbone.Model.prototype.toJSON.call(this);\n\n                // Convert inputs to JSON manually.\n                rval.inputs = this.get(\"inputs\").map(function(i) {\n                    return i.toJSON();\n                });\n                return rval;\n            },\n\n            /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n            remove_inputs: function(types) {\n                var tool = this,\n                    incompatible_inputs = tool\n                        .get(\"inputs\")\n                        .filter(function(input) {\n                            return types.indexOf(input.get(\"type\")) !== -1;\n                        });\n                tool.get(\"inputs\").remove(incompatible_inputs);\n            },\n\n            /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n            copy: function(only_samplable_inputs) {\n                var copy = new Tool(this.toJSON());\n\n                // Return only samplable inputs if flag is set.\n                if (only_samplable_inputs) {\n                    var valid_inputs = new Backbone.Collection();\n                    copy.get(\"inputs\").each(function(input) {\n                        if (input.get_samples()) {\n                            valid_inputs.push(input);\n                        }\n                    });\n                    copy.set(\"inputs\", valid_inputs);\n                }\n\n                return copy;\n            },\n\n            apply_search_results: function(results) {\n                _.indexOf(results, this.attributes.id) !== -1\n                    ? this.show()\n                    : this.hide();\n                return this.is_visible();\n            },\n\n            /**\n     * Set a tool input's value.\n     */\n            set_input_value: function(name, value) {\n                this.get(\"inputs\")\n                    .find(function(input) {\n                        return input.get(\"name\") === name;\n                    })\n                    .set(\"value\", value);\n            },\n\n            /**\n     * Set many input values at once.\n     */\n            set_input_values: function(inputs_dict) {\n                var self = this;\n                _.each(_.keys(inputs_dict), function(input_name) {\n                    self.set_input_value(input_name, inputs_dict[input_name]);\n                });\n            },\n\n            /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n            run: function() {\n                return this._run();\n            },\n\n            /**\n     * Rerun tool using regions and a target dataset.\n     */\n            rerun: function(target_dataset, regions) {\n                return this._run({\n                    action: \"rerun\",\n                    target_dataset_id: target_dataset.id,\n                    regions: regions\n                });\n            },\n\n            /**\n     * Returns input dict for tool's inputs.\n     */\n            get_inputs_dict: function() {\n                var input_dict = {};\n                this.get(\"inputs\").each(function(input) {\n                    input_dict[input.get(\"name\")] = input.get(\"value\");\n                });\n                return input_dict;\n            },\n\n            /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n            _run: function(additional_params) {\n                // Create payload.\n                var payload = _.extend(\n                    {\n                        tool_id: this.id,\n                        inputs: this.get_inputs_dict()\n                    },\n                    additional_params\n                );\n\n                // Because job may require indexing datasets, use server-side\n                // deferred to ensure that job is run. Also use deferred that\n                // resolves to outputs from tool.\n                var run_deferred = $.Deferred(),\n                    ss_deferred = new util.ServerStateDeferred({\n                        ajax_settings: {\n                            url: this.urlRoot,\n                            data: JSON.stringify(payload),\n                            dataType: \"json\",\n                            contentType: \"application/json\",\n                            type: \"POST\"\n                        },\n                        interval: 2000,\n                        success_fn: function(response) {\n                            return response !== \"pending\";\n                        }\n                    });\n\n                // Run job and resolve run_deferred to tool outputs.\n                $.when(ss_deferred.go()).then(function(result) {\n                    run_deferred.resolve(new data.DatasetCollection(result));\n                });\n                return run_deferred;\n            }\n        });\n        _.extend(Tool.prototype, VisibilityMixin);\n\n        /**\n * Tool view.\n */\n        var ToolView = Backbone.View.extend({});\n\n        /**\n * Wrap collection of tools for fast access/manipulation.\n */\n        var ToolCollection = Backbone.Collection.extend({\n            model: Tool\n        });\n\n        /**\n * Label or section header in tool panel.\n */\n        var ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n        /**\n * Section of tool panel with elements (labels and tools).\n */\n        var ToolSection = Backbone.Model.extend({\n            defaults: {\n                elems: [],\n                open: false\n            },\n\n            clear_search_results: function() {\n                _.each(this.attributes.elems, function(elt) {\n                    elt.show();\n                });\n\n                this.show();\n                this.set(\"open\", false);\n            },\n\n            apply_search_results: function(results) {\n                var all_hidden = true,\n                    cur_label;\n                _.each(this.attributes.elems, function(elt) {\n                    if (elt instanceof ToolSectionLabel) {\n                        cur_label = elt;\n                        cur_label.hide();\n                    } else if (elt instanceof Tool) {\n                        if (elt.apply_search_results(results)) {\n                            all_hidden = false;\n                            if (cur_label) {\n                                cur_label.show();\n                            }\n                        }\n                    }\n                });\n\n                if (all_hidden) {\n                    this.hide();\n                } else {\n                    this.show();\n                    this.set(\"open\", true);\n                }\n            }\n        });\n        _.extend(ToolSection.prototype, VisibilityMixin);\n\n        /**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\n        var ToolSearch = Backbone.Model.extend({\n            defaults: {\n                search_hint_string: \"search tools\",\n                min_chars_for_search: 3,\n                clear_btn_url: \"\",\n                visible: true,\n                query: \"\",\n                results: null,\n                // ESC (27) will clear the input field and tool search filters\n                clear_key: 27\n            },\n\n            urlRoot: Galaxy.root + \"api/tools\",\n\n            initialize: function() {\n                this.on(\"change:query\", this.do_search);\n            },\n\n            /**\n     * Do the search and update the results.\n     */\n            do_search: function() {\n                var query = this.attributes.query;\n\n                // If query is too short, do not search.\n                if (query.length < this.attributes.min_chars_for_search) {\n                    this.set(\"results\", null);\n                    return;\n                }\n\n                // Do search via AJAX.\n                var q = query;\n                // Stop previous ajax-request\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n                // Start a new ajax-request in X ms\n                $(\"#search-clear-btn\").hide();\n                $(\"#search-spinner\").show();\n                var self = this;\n                this.timer = setTimeout(function() {\n                    // log the search to analytics if present\n                    if (typeof ga !== \"undefined\") {\n                        ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n                    }\n                    $.get(\n                        self.urlRoot,\n                        { q: q },\n                        function(data) {\n                            self.set(\"results\", data);\n                            $(\"#search-spinner\").hide();\n                            $(\"#search-clear-btn\").show();\n                        },\n                        \"json\"\n                    );\n                }, 400);\n            },\n\n            clear_search: function() {\n                this.set(\"query\", \"\");\n                this.set(\"results\", null);\n            }\n        });\n        _.extend(ToolSearch.prototype, VisibilityMixin);\n\n        /**\n * Tool Panel.\n */\n        var ToolPanel = Backbone.Model.extend({\n            initialize: function(options) {\n                this.attributes.tool_search = options.tool_search;\n                this.attributes.tool_search.on(\n                    \"change:results\",\n                    this.apply_search_results,\n                    this\n                );\n                this.attributes.tools = options.tools;\n                this.attributes.layout = new Backbone.Collection(\n                    this.parse(options.layout)\n                );\n            },\n\n            /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n            parse: function(response) {\n                // Recursive function to parse tool panel elements.\n                var self = this,\n                    // Helper to recursively parse tool panel.\n                    parse_elt = function(elt_dict) {\n                        var type = elt_dict.model_class;\n                        // There are many types of tools; for now, anything that ends in 'Tool'\n                        // is treated as a generic tool.\n                        if (type.indexOf(\"Tool\") === type.length - 4) {\n                            return self.attributes.tools.get(elt_dict.id);\n                        } else if (type === \"ToolSection\") {\n                            // Parse elements.\n                            var elems = _.map(elt_dict.elems, parse_elt);\n                            elt_dict.elems = elems;\n                            return new ToolSection(elt_dict);\n                        } else if (type === \"ToolSectionLabel\") {\n                            return new ToolSectionLabel(elt_dict);\n                        }\n                    };\n\n                return _.map(response, parse_elt);\n            },\n\n            clear_search_results: function() {\n                this.get(\"layout\").each(function(panel_elt) {\n                    if (panel_elt instanceof ToolSection) {\n                        panel_elt.clear_search_results();\n                    } else {\n                        // Label or tool, so just show.\n                        panel_elt.show();\n                    }\n                });\n            },\n\n            apply_search_results: function() {\n                var results = this.get(\"tool_search\").get(\"results\");\n                if (results === null) {\n                    this.clear_search_results();\n                    return;\n                }\n\n                var cur_label = null;\n                this.get(\"layout\").each(function(panel_elt) {\n                    if (panel_elt instanceof ToolSectionLabel) {\n                        cur_label = panel_elt;\n                        cur_label.hide();\n                    } else if (panel_elt instanceof Tool) {\n                        if (panel_elt.apply_search_results(results)) {\n                            if (cur_label) {\n                                cur_label.show();\n                            }\n                        }\n                    } else {\n                        // Starting new section, so clear current label.\n                        cur_label = null;\n                        panel_elt.apply_search_results(results);\n                    }\n                });\n            }\n        });\n\n        /**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n        /**\n * Base view that handles visibility based on model's hidden attribute.\n */\n        var BaseView = Backbone.View.extend({\n            initialize: function() {\n                this.model.on(\"change:hidden\", this.update_visible, this);\n                this.update_visible();\n            },\n            update_visible: function() {\n                this.model.attributes.hidden\n                    ? this.$el.hide()\n                    : this.$el.show();\n            }\n        });\n\n        /**\n * Link to a tool.\n */\n        var ToolLinkView = BaseView.extend({\n            tagName: \"div\",\n\n            render: function() {\n                // create element\n                var $link = $(\"<div/>\");\n                $link.append(templates.tool_link(this.model.toJSON()));\n\n                var formStyle = this.model.get(\"form_style\", null);\n                // open upload dialog for upload tool\n                if (this.model.id === \"upload1\") {\n                    $link.find(\"a\").on(\"click\", function(e) {\n                        e.preventDefault();\n                        Galaxy.upload.show();\n                    });\n                } else if (formStyle === \"regular\") {\n                    // regular tools\n                    var self = this;\n                    $link.find(\"a\").on(\"click\", function(e) {\n                        e.preventDefault();\n                        Galaxy.router.push(\"/\", {\n                            tool_id: self.model.id,\n                            version: self.model.get(\"version\")\n                        });\n                    });\n                }\n\n                // add element\n                this.$el.append($link);\n                return this;\n            }\n        });\n\n        /**\n * Panel label/section header.\n */\n        var ToolSectionLabelView = BaseView.extend({\n            tagName: \"div\",\n            className: \"toolPanelLabel\",\n\n            render: function() {\n                this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n                return this;\n            }\n        });\n\n        /**\n * Panel section.\n */\n        var ToolSectionView = BaseView.extend({\n            tagName: \"div\",\n            className: \"toolSectionWrapper\",\n\n            initialize: function() {\n                BaseView.prototype.initialize.call(this);\n                this.model.on(\"change:open\", this.update_open, this);\n            },\n\n            render: function() {\n                // Build using template.\n                this.$el.append(templates.panel_section(this.model.toJSON()));\n\n                // Add tools to section.\n                var section_body = this.$el.find(\".toolSectionBody\");\n                _.each(this.model.attributes.elems, function(elt) {\n                    if (elt instanceof Tool) {\n                        var tool_view = new ToolLinkView({\n                            model: elt,\n                            className: \"toolTitle\"\n                        });\n                        tool_view.render();\n                        section_body.append(tool_view.$el);\n                    } else if (elt instanceof ToolSectionLabel) {\n                        var label_view = new ToolSectionLabelView({\n                            model: elt\n                        });\n                        label_view.render();\n                        section_body.append(label_view.$el);\n                    } else {\n                        // TODO: handle nested section bodies?\n                    }\n                });\n                return this;\n            },\n\n            events: {\n                \"click .toolSectionTitle > a\": \"toggle\"\n            },\n\n            /**\n     * Toggle visibility of tool section.\n     */\n            toggle: function() {\n                this.model.set(\"open\", !this.model.attributes.open);\n            },\n\n            /**\n     * Update whether section is open or close.\n     */\n            update_open: function() {\n                this.model.attributes.open\n                    ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n                    : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n            }\n        });\n\n        var ToolSearchView = Backbone.View.extend({\n            tagName: \"div\",\n            id: \"tool-search\",\n            className: \"bar\",\n\n            events: {\n                click: \"focus_and_select\",\n                \"keyup :input\": \"query_changed\",\n                \"change :input\": \"query_changed\",\n                \"click #search-clear-btn\": \"clear\"\n            },\n\n            render: function() {\n                this.$el.append(templates.tool_search(this.model.toJSON()));\n                if (!this.model.is_visible()) {\n                    this.$el.hide();\n                }\n\n                // Adjust top for issue 2907 depending on whether the messagebox is visible.\n                if ($(\"#messagebox\").is(\":visible\")) {\n                    this.$el.css(\"top\", \"95px\");\n                }\n\n                this.$el.find(\"[title]\").tooltip();\n                return this;\n            },\n\n            focus_and_select: function() {\n                this.$el\n                    .find(\":input\")\n                    .focus()\n                    .select();\n            },\n\n            clear: function() {\n                this.model.clear_search();\n                this.$el.find(\":input\").val(\"\");\n                this.focus_and_select();\n                return false;\n            },\n\n            query_changed: function(evData) {\n                // check for the 'clear key' (ESC) first\n                if (\n                    this.model.attributes.clear_key &&\n                    this.model.attributes.clear_key === evData.which\n                ) {\n                    this.clear();\n                    return false;\n                }\n                this.model.set(\"query\", this.$el.find(\":input\").val());\n            }\n        });\n\n        /**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\n        var ToolPanelView = Backbone.View.extend({\n            tagName: \"div\",\n            className: \"toolMenu\",\n\n            /**\n     * Set up view.\n     */\n            initialize: function() {\n                this.model\n                    .get(\"tool_search\")\n                    .on(\"change:results\", this.handle_search_results, this);\n            },\n\n            render: function() {\n                var self = this;\n\n                // Render search.\n                var search_view = new ToolSearchView({\n                    model: this.model.get(\"tool_search\")\n                });\n                search_view.render();\n                self.$el.append(search_view.$el);\n\n                // Render panel.\n                this.model.get(\"layout\").each(function(panel_elt) {\n                    if (panel_elt instanceof ToolSection) {\n                        var section_title_view = new ToolSectionView({\n                            model: panel_elt\n                        });\n                        section_title_view.render();\n                        self.$el.append(section_title_view.$el);\n                    } else if (panel_elt instanceof Tool) {\n                        var tool_view = new ToolLinkView({\n                            model: panel_elt,\n                            className: \"toolTitleNoSection\"\n                        });\n                        tool_view.render();\n                        self.$el.append(tool_view.$el);\n                    } else if (panel_elt instanceof ToolSectionLabel) {\n                        var label_view = new ToolSectionLabelView({\n                            model: panel_elt\n                        });\n                        label_view.render();\n                        self.$el.append(label_view.$el);\n                    }\n                });\n\n                // Setup tool link click eventing.\n                self.$el.find(\"a.tool-link\").click(function(e) {\n                    // Tool id is always the first class.\n                    var tool_id = $(this)\n                            .attr(\"class\")\n                            .split(/\\s+/)[0],\n                        tool = self.model.get(\"tools\").get(tool_id);\n\n                    self.trigger(\"tool_link_click\", e, tool);\n                });\n\n                return this;\n            },\n\n            handle_search_results: function() {\n                var results = this.model.get(\"tool_search\").get(\"results\");\n                if (results && results.length === 0) {\n                    $(\"#search-no-results\").show();\n                } else {\n                    $(\"#search-no-results\").hide();\n                }\n            }\n        });\n\n        /**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\n        var ToolFormView = Backbone.View.extend({\n            className: \"toolForm\",\n\n            render: function() {\n                this.$el.children().remove();\n                this.$el.append(templates.tool_form(this.model.toJSON()));\n            }\n        });\n\n        /**\n * Integrated tool menu + tool execution.\n */\n        var IntegratedToolMenuAndView = Backbone.View.extend({\n            className: \"toolMenuAndView\",\n\n            initialize: function() {\n                this.tool_panel_view = new ToolPanelView({\n                    collection: this.collection\n                });\n                this.tool_form_view = new ToolFormView();\n            },\n\n            render: function() {\n                // Render and append tool panel.\n                this.tool_panel_view.render();\n                this.tool_panel_view.$el.css(\"float\", \"left\");\n                this.$el.append(this.tool_panel_view.$el);\n\n                // Append tool form view.\n                this.tool_form_view.$el.hide();\n                this.$el.append(this.tool_form_view.$el);\n\n                // On tool link click, show tool.\n                var self = this;\n                this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n                    // Prevents click from activating link:\n                    e.preventDefault();\n                    // Show tool that was clicked on:\n                    self.show_tool(tool);\n                });\n            },\n\n            /**\n     * Fetch and display tool.\n     */\n            show_tool: function(tool) {\n                var self = this;\n                tool.fetch().done(function() {\n                    self.tool_form_view.model = tool;\n                    self.tool_form_view.render();\n                    self.tool_form_view.$el.show();\n                    $(\"#left\").width(\"650px\");\n                });\n            }\n        });\n\n        // TODO: move into relevant views\n        var templates = {\n            // the search bar at the top of the tool panel\n            tool_search: _.template(\n                [\n                    '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n                    'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n                    '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n                    //TODO: replace with icon\n                    '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n                ].join(\"\")\n            ),\n\n            // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n            panel_section: _.template(\n                [\n                    '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n                    '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n                    \"</div>\",\n                    '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n                    '<div class=\"toolSectionBg\"></div>',\n                    \"<div>\"\n                ].join(\"\")\n            ),\n\n            // a single tool's link in the tool panel; will load the tool form in the center panel\n            tool_link: _.template(\n                [\n                    '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n                    '<span class=\"labels\">',\n                    \"<% _.each( labels, function( label ){ %>\",\n                    '<span class=\"label label-default label-<%- label %>\">',\n                    \"<%- label %>\",\n                    \"</span>\",\n                    \"<% }); %>\",\n                    \"</span>\",\n                    '<span class=\"tool-old-link\">',\n                    \"<%- name %>\",\n                    \"</span>\",\n                    \" <%- description %>\",\n                    \"</a>\"\n                ].join(\"\")\n            ),\n\n            // the tool form for entering tool parameters, viewing help and executing the tool\n            // loaded when a tool link is clicked in the tool panel\n            tool_form: _.template(\n                [\n                    '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n                    '<div class=\"toolFormBody\">',\n                    \"<% _.each( tool.inputs, function( input ){ %>\",\n                    '<div class=\"form-row\">',\n                    '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n                    '<div class=\"form-row-input\">',\n                    \"<%= input.html %>\",\n                    \"</div>\",\n                    '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n                    \"<%- input.help %>\",\n                    \"</div>\",\n                    '<div style=\"clear: both;\"></div>',\n                    \"</div>\",\n                    \"<% }); %>\",\n                    \"</div>\",\n                    '<div class=\"form-row form-actions\">',\n                    '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n                    \"</div>\",\n                    '<div class=\"toolHelp\">',\n                    '<div class=\"toolHelpBody\"><% tool.help %></div>',\n                    \"</div>\"\n                    // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n                    // which implies a leaky variable that I can't find\n                ].join(\"\"),\n                { variable: \"tool\" }\n            )\n        };\n\n        // Exports\n        return {\n            ToolParameter: ToolParameter,\n            IntegerToolParameter: IntegerToolParameter,\n            SelectToolParameter: SelectToolParameter,\n            Tool: Tool,\n            ToolCollection: ToolCollection,\n            ToolSearch: ToolSearch,\n            ToolPanel: ToolPanel,\n            ToolPanelView: ToolPanelView,\n            ToolFormView: ToolFormView\n        };\n    }\n);\n"]}