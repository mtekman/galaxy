{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["define","View","initialize","listen_to_history","Webhooks","always_refresh","extend","buildmodel","options","self","this","modal","parent","Galaxy","Modal","form","ToolFormBase","Utils","build_url","job_id","process","model","attributes","build_data","root","window","set","id","_customize","emit","$","params","resolve","error_message","status","location","version","get","prepend","message","data","persistent","display","title","body","buttons","Close","error","response","debug","err_msg","param","redirect","create","$el","is","Ui","Message","large","show","hide","reject","postchange","current_state","wait","disable","unwait","execute","execute_button","request","type","url","success","update","$f","enctype","setElement","_","each","job_def","inputs","appendTo","callback","Button","name","cls","wait_cls","WebhookApp","urlRoot","toolId","tool_id","portlet","enable","err_data","error_messages","label","input_found","ignore","value","submit","tool_version","job_inputs","batch_src","job_input_id","input_value","input_id","input_field","action","input_def","optional","attr","highlight","method","batch_n","n","values","length","key","src","remove","_templateSuccess","$message","njobs","njobs_text","append","addClass","jobs","WebhookView","_templateError","currHistoryPanel","refreshContents","matchResponse","validate","match","field_list","input_list","batch","text","outputs","output","hid","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-modal\",\n        \"mvc/tool/tool-form-base\",\n        \"mvc/webhooks\"\n    ],\n    function(Utils, Ui, Modal, ToolFormBase, Webhooks) {\n        var View = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.modal = parent.Galaxy.modal || new Modal.View();\n                this.form = new ToolFormBase(\n                    Utils.merge(\n                        {\n                            listen_to_history: true,\n                            always_refresh: false,\n                            buildmodel: function(process, form) {\n                                var options = form.model.attributes;\n\n                                // build request url\n                                var build_url = \"\";\n                                var build_data = {};\n                                var job_id = options.job_id;\n                                if (job_id) {\n                                    build_url =\n                                        Galaxy.root +\n                                        \"api/jobs/\" +\n                                        job_id +\n                                        \"/build_for_rerun\";\n                                } else {\n                                    build_url =\n                                        Galaxy.root +\n                                        \"api/tools/\" +\n                                        options.id +\n                                        \"/build\";\n                                    build_data = $.extend({}, Galaxy.params);\n                                    build_data[\"tool_id\"] &&\n                                        delete build_data[\"tool_id\"];\n                                }\n                                options.version &&\n                                    (build_data[\"tool_version\"] =\n                                        options.version);\n\n                                // get initial model\n                                Utils.get({\n                                    url: build_url,\n                                    data: build_data,\n                                    success: function(data) {\n                                        if (!data.display) {\n                                            window.location = Galaxy.root;\n                                            return;\n                                        }\n                                        form.model.set(data);\n                                        self._customize(form);\n                                        Galaxy.emit.debug(\n                                            \"tool-form-base::_buildModel()\",\n                                            \"Initial tool model ready.\",\n                                            data\n                                        );\n                                        process.resolve();\n                                    },\n                                    error: function(response, status) {\n                                        var error_message =\n                                            (response && response.err_msg) ||\n                                            \"Uncaught error.\";\n                                        if (status == 401) {\n                                            window.location =\n                                                Galaxy.root +\n                                                \"user/login?\" +\n                                                $.param({\n                                                    redirect:\n                                                        Galaxy.root +\n                                                        \"?tool_id=\" +\n                                                        options.id\n                                                });\n                                        } else if (form.$el.is(\":empty\")) {\n                                            form.$el.prepend(\n                                                new Ui.Message({\n                                                    message: error_message,\n                                                    status: \"danger\",\n                                                    persistent: true,\n                                                    large: true\n                                                }).$el\n                                            );\n                                        } else {\n                                            Galaxy.modal &&\n                                                Galaxy.modal.show({\n                                                    title:\n                                                        \"Tool request failed\",\n                                                    body: error_message,\n                                                    buttons: {\n                                                        Close: function() {\n                                                            Galaxy.modal.hide();\n                                                        }\n                                                    }\n                                                });\n                                        }\n                                        Galaxy.emit.debug(\n                                            \"tool-form-base::_buildModel()\",\n                                            \"Initial tool model request failed.\",\n                                            response\n                                        );\n                                        process.reject();\n                                    }\n                                });\n                            },\n                            postchange: function(process, form) {\n                                var current_state = {\n                                    tool_id: form.model.get(\"id\"),\n                                    tool_version: form.model.get(\"version\"),\n                                    inputs: $.extend(\n                                        true,\n                                        {},\n                                        form.data.create()\n                                    )\n                                };\n                                form.wait(true);\n                                Galaxy.emit.debug(\n                                    \"tool-form::postchange()\",\n                                    \"Sending current state.\",\n                                    current_state\n                                );\n                                Utils.request({\n                                    type: \"POST\",\n                                    url:\n                                        Galaxy.root +\n                                        \"api/tools/\" +\n                                        form.model.get(\"id\") +\n                                        \"/build\",\n                                    data: current_state,\n                                    success: function(data) {\n                                        form.update(data);\n                                        form.wait(false);\n                                        Galaxy.emit.debug(\n                                            \"tool-form::postchange()\",\n                                            \"Received new model.\",\n                                            data\n                                        );\n                                        process.resolve();\n                                    },\n                                    error: function(response) {\n                                        Galaxy.emit.debug(\n                                            \"tool-form::postchange()\",\n                                            \"Refresh request failed.\",\n                                            response\n                                        );\n                                        process.reject();\n                                    }\n                                });\n                            }\n                        },\n                        options\n                    )\n                );\n                this.deferred = this.form.deferred;\n                this.setElement(\"<div/>\");\n                this.$el.append(this.form.$el);\n            },\n\n            _customize: function(form) {\n                var self = this;\n                var options = form.model.attributes;\n                // build execute button\n                var execute_button = new Ui.Button({\n                    icon: \"fa-check\",\n                    tooltip:\n                        \"Execute: \" +\n                        options.name +\n                        \" (\" +\n                        options.version +\n                        \")\",\n                    title: \"Execute\",\n                    cls: \"btn btn-primary ui-clear-float\",\n                    wait_cls: \"btn btn-info ui-clear-float\",\n                    onclick: function() {\n                        execute_button.wait();\n                        form.portlet.disable();\n                        self.submit(options, function() {\n                            execute_button.unwait();\n                            form.portlet.enable();\n                        });\n                    }\n                });\n                options.buttons = { execute: execute_button };\n\n                // remap feature\n                if (options.job_id && options.job_remap) {\n                    options.inputs.push({\n                        label: \"Resume dependencies from this job\",\n                        name: \"rerun_remap_job_id\",\n                        type: \"select\",\n                        display: \"radio\",\n                        ignore: \"__ignore__\",\n                        value: \"__ignore__\",\n                        options: [\n                            [\"Yes\", options.job_id],\n                            [\"No\", \"__ignore__\"]\n                        ],\n                        help:\n                            \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n                    });\n                }\n            },\n\n            /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n            submit: function(options, callback) {\n                var self = this;\n                var job_def = {\n                    tool_id: options.id,\n                    tool_version: options.version,\n                    inputs: this.form.data.create()\n                };\n                this.form.trigger(\"reset\");\n                if (!self.validate(job_def)) {\n                    Galaxy.emit.debug(\n                        \"tool-form::submit()\",\n                        \"Submission canceled. Validation failed.\"\n                    );\n                    callback && callback();\n                    return;\n                }\n                if (options.action !== Galaxy.root + \"tool_runner/index\") {\n                    var $f = $(\"<form/>\").attr({\n                        action: options.action,\n                        method: options.method,\n                        enctype: options.enctype\n                    });\n                    _.each(job_def.inputs, function(value, key) {\n                        $f.append(\n                            $(\"<input/>\").attr({ name: key, value: value })\n                        );\n                    });\n                    $f\n                        .hide()\n                        .appendTo(\"body\")\n                        .submit()\n                        .remove();\n                    callback && callback();\n                    return;\n                }\n                Galaxy.emit.debug(\n                    \"tool-form::submit()\",\n                    \"Validation complete.\",\n                    job_def\n                );\n                Utils.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/tools\",\n                    data: job_def,\n                    success: function(response) {\n                        callback && callback();\n                        self.$el.children().hide();\n                        self.$el.append(self._templateSuccess(response));\n                        // Show Webhook if job is running\n                        if (response.jobs && response.jobs.length > 0) {\n                            self.$el.append(\n                                $(\"<div/>\", { id: \"webhook-view\" })\n                            );\n                            var WebhookApp = new Webhooks.WebhookView({\n                                urlRoot: Galaxy.root + \"api/webhooks/tool\",\n                                toolId: job_def.tool_id\n                            });\n                        }\n                        parent.Galaxy &&\n                            parent.Galaxy.currHistoryPanel &&\n                            parent.Galaxy.currHistoryPanel.refreshContents();\n                    },\n                    error: function(response) {\n                        callback && callback();\n                        Galaxy.emit.debug(\n                            \"tool-form::submit\",\n                            \"Submission failed.\",\n                            response\n                        );\n                        var input_found = false;\n                        if (response && response.err_data) {\n                            var error_messages = self.form.data.matchResponse(\n                                response.err_data\n                            );\n                            for (var input_id in error_messages) {\n                                self.form.highlight(\n                                    input_id,\n                                    error_messages[input_id]\n                                );\n                                input_found = true;\n                                break;\n                            }\n                        }\n                        if (!input_found) {\n                            self.modal.show({\n                                title: \"Job submission failed\",\n                                body: self._templateError(\n                                    job_def,\n                                    response && response.err_msg\n                                ),\n                                buttons: {\n                                    Close: function() {\n                                        self.modal.hide();\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n            },\n\n            /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n            validate: function(job_def) {\n                var job_inputs = job_def.inputs;\n                var batch_n = -1;\n                var batch_src = null;\n                for (var job_input_id in job_inputs) {\n                    var input_value = job_inputs[job_input_id];\n                    var input_id = this.form.data.match(job_input_id);\n                    var input_field = this.form.field_list[input_id];\n                    var input_def = this.form.input_list[input_id];\n                    if (!input_id || !input_def || !input_field) {\n                        Galaxy.emit.debug(\n                            \"tool-form::validate()\",\n                            \"Retrieving input objects failed.\"\n                        );\n                        continue;\n                    }\n                    if (!input_def.optional && input_value == null) {\n                        this.form.highlight(input_id);\n                        return false;\n                    }\n                    if (input_value && input_value.batch) {\n                        var n = input_value.values.length;\n                        var src =\n                            n > 0 &&\n                            input_value.values[0] &&\n                            input_value.values[0].src;\n                        if (src) {\n                            if (batch_src === null) {\n                                batch_src = src;\n                            } else if (batch_src !== src) {\n                                this.form.highlight(\n                                    input_id,\n                                    \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                                );\n                                return false;\n                            }\n                        }\n                        if (batch_n === -1) {\n                            batch_n = n;\n                        } else if (batch_n !== n) {\n                            this.form.highlight(\n                                input_id,\n                                \"Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>\" +\n                                    n +\n                                    \"</b> selection(s) while a previous field contains <b>\" +\n                                    batch_n +\n                                    \"</b>.\"\n                            );\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            },\n\n            _templateSuccess: function(response) {\n                if (response.jobs && response.jobs.length > 0) {\n                    var njobs = response.jobs.length;\n                    var njobs_text =\n                        njobs == 1 ? \"1 job has\" : njobs + \" jobs have\";\n                    var $message = $(\"<div/>\")\n                        .addClass(\"donemessagelarge\")\n                        .append(\n                            $(\"<p/>\").text(\n                                njobs_text +\n                                    \" been successfully added to the queue - resulting in the following datasets:\"\n                            )\n                        );\n                    _.each(response.outputs, function(output) {\n                        $message.append(\n                            $(\"<p/>\")\n                                .addClass(\"messagerow\")\n                                .append(\n                                    $(\"<b/>\").text(\n                                        output.hid + \": \" + output.name\n                                    )\n                                )\n                        );\n                    });\n                    $message.append(\n                        $(\"<p/>\")\n                            .append(\"<b/>\")\n                            .text(\n                                \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                            )\n                    );\n                    return $message;\n                } else {\n                    return this._templateError(\n                        response,\n                        \"Invalid success response. No jobs found.\"\n                    );\n                }\n            },\n\n            _templateError: function(response, err_msg) {\n                return $(\"<div/>\")\n                    .addClass(\"errormessagelarge\")\n                    .append(\n                        $(\"<p/>\").text(\n                            \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                                (err_msg || \"\")\n                        )\n                    )\n                    .append(\n                        $(\"<pre/>\").text(JSON.stringify(response, null, 4))\n                    );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n"]}