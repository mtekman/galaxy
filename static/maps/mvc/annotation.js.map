{"version":3,"sources":["mvc/annotation.js"],"names":["define","baseMVC","AnnotationEditor","Backbone","View","className","LoggableMixin","extend","HiddenUntilActivatedViewMixin","initialize","options","this","tooltipConfig","listenTo","model","render","hiddenUntilActivated","$activator","$annotation","use_textarea","_template","view","make_text_editable","on_finish","newAnnotation","text","save","annotation","silent","fail","previous","get","stopListening","_","escape","join","$el","find","remove","off","prototype","call","toString"],"mappings":"aAAAA,QAAQ,eAAgB,qBAAsB,oBAAqB,SAC/DC,EADJD,GAsFI,OACIE,iBA7EQC,SAAAC,KAEJC,OAAAA,EAAWC,eAHdC,OAAON,EAAQO,+BAKZD,QACAE,QAAY,MACRC,UAAUA,qBACoCD,WAA9C,SAAAC,GAGAA,EAAAA,MACAC,KAAAC,cAAAF,EAAAE,gBACKC,UAAcC,UAZnBH,KAAAE,SAAAF,KAAAG,MAAA,oBAAA,WAaIH,KAAKI,WAMLJ,KAAAK,qBAAWN,EAAAO,WAAAP,IAIfK,OAAA,WACA,IAAKG,EAAAA,KAxBL,OAyBIC,KAAAA,IAAAA,KAAcR,KADoBS,aAI9BC,KAAAA,cAAAC,oBAMQD,cACKH,EAERK,UATL,SAAAC,GAUHH,EAAAH,cAAAO,KAAAD,GAdLH,EAAAP,MAgBAY,MAxCAC,WAAAH,IA+BkBI,QAAQ,IAanBC,KAAA,WACUR,EACVH,cACHO,KAAAJ,EAAAP,MAAAgB,SAAA,oBA/CJnB,MA4DAS,UAAO,WA5DP,IAAAO,EAAAhB,KAAAG,MAAAiB,IAAA,cA8CA,OAkBI,yBACCb,EAAAA,cACAc,WAlEL,2BAqDIC,EAAEC,OAAOP,GAiBjB,UACUQ,KAAA,KAIlBjB,YAAA,WACO,OAAAP,KAAAyB,IAAAC,KAAA,gBAZCC,OAAQ,WACJ3B,KAAKO,YAAYqB,MACjB5B,KAAKqB,cAAcrB,KAAKG,OACxBX,SAASC,KAAKoC,UAAUF,OAAOG,KAAK9B,OAIxC+B,SAAU,WACN,OAAQ,oBAAqB/B,KAAKG,MAAQ,GAAI,KAAKqB,KAAK","file":"../../scripts/mvc/annotation.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\", \"ui/editable-text\"], function(\n    baseMVC,\n    _l\n) {\n    // =============================================================================\n    /** A view on any model that has a 'annotation' attribute\n */\n    var AnnotationEditor = Backbone.View\n        .extend(baseMVC.LoggableMixin)\n        .extend(baseMVC.HiddenUntilActivatedViewMixin)\n        .extend({\n            tagName: \"div\",\n            className: \"annotation-display\",\n\n            /** Set up listeners, parse options */\n            initialize: function(options) {\n                options = options || {};\n                this.tooltipConfig = options.tooltipConfig || {\n                    placement: \"bottom\"\n                };\n                //console.debug( this, options );\n                // only listen to the model only for changes to annotations\n                this.listenTo(this.model, \"change:annotation\", function() {\n                    this.render();\n                });\n                this.hiddenUntilActivated(options.$activator, options);\n            },\n\n            /** Build the DOM elements, call select to on the created input, and set up behaviors */\n            render: function() {\n                var view = this;\n                this.$el.html(this._template());\n\n                //TODO: handle empties better\n                this.$annotation().make_text_editable({\n                    use_textarea: true,\n                    on_finish: function(newAnnotation) {\n                        view.$annotation().text(newAnnotation);\n                        view.model\n                            .save(\n                                { annotation: newAnnotation },\n                                { silent: true }\n                            )\n                            .fail(function() {\n                                view\n                                    .$annotation()\n                                    .text(view.model.previous(\"annotation\"));\n                            });\n                    }\n                });\n                return this;\n            },\n\n            /** @returns {String} the html text used to build the view's DOM */\n            _template: function() {\n                var annotation = this.model.get(\"annotation\");\n                return [\n                    //TODO: make prompt optional\n                    '<label class=\"prompt\">',\n                    _l(\"Annotation\"),\n                    \"</label>\",\n                    // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                    '<div class=\"annotation\">',\n                    _.escape(annotation),\n                    \"</div>\"\n                ].join(\"\");\n            },\n\n            /** @returns {jQuery} the main element for this view */\n            $annotation: function() {\n                return this.$el.find(\".annotation\");\n            },\n\n            /** shut down event listeners and remove this view's DOM */\n            remove: function() {\n                this.$annotation.off();\n                this.stopListening(this.model);\n                Backbone.View.prototype.remove.call(this);\n            },\n\n            /** string rep */\n            toString: function() {\n                return [\"AnnotationEditor(\", this.model + \"\", \")\"].join(\"\");\n            }\n        });\n    // =============================================================================\n    return {\n        AnnotationEditor: AnnotationEditor\n    };\n});\n"]}