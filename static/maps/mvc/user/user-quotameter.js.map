{"version":3,"sources":["mvc/user/user-quotameter.js"],"names":["define","baseMVC","_l","UserQuotaMeter","Backbone","View","extend","LoggableMixin","options","warnAtPercent","initialize","this","log","listenTo","model","render","update","loadFromApi","get","isOverQuota","errorAtPercent","_render_quota","$meter","_templateQuotaMeter","percent","modelJson","quota_percent","$","$bar","find","_render_usage","attr","css","trigger","usage","_templateUsage","toJSON","meterHtml","undefined","toString","$el","html","tooltip","data","nice_total_disk_usage","join"],"mappings":"aAAAA,QAAQ,eAAgB,sBAAuB,SAASC,EAASC,GAkL7D,OACIC,eAxKiBC,SAASC,KAAKC,OAAOL,EAAQM,eAAeD,QAA7DH,cAVJ,OAeQK,SADAC,cAAA,GACAD,eAAS,KAMTE,WAAY,SAASF,GADrBG,KAAAC,IAAAD,KAAA,eAAAH,GACAE,EAAAA,OAAYC,KAAAH,QAAAA,GAKRG,KAAKE,SADLF,KAAAG,MACKD,+CAf0BF,KAAAI,SAyB/BC,OAAKF,SAAMG,GACX,OAAAN,KAAOC,IAAPD,KAAA,yBAAAH,GA1B+BG,KAAAG,MAAAG,YAAAN,KAAAG,MAAAI,IAAA,MAAAV,GA0BxBG,MA1BwBQ,YAAA,WAiC/B,OAOJ,OAAAR,KAAAG,MAAAI,IAAA,kBALQP,KAAKG,MAAMI,IAAI,kBACXP,KAAKH,QAAQY,gBAgBjBC,cAAA,WACAC,IAAAA,EAAgBC,KAAAA,MAAAA,SAEpBC,EAAAC,EAAAC,cAEAJ,EAAAK,EAAAhB,KAAAY,oBAAAE,IACIG,EAAKT,EAATU,KAAwB,iBA8B5BC,OA1BQnB,KAAAQ,eAFAS,EAAKG,KAAK,QAAS,oCAKnBT,EAAAO,KAAA,qBAAAG,IAAA,QAAA,SAEArB,KAAAsB,QAAA,aAAAR,IAGKQ,GACDtB,KAAAH,QAAAC,eAIJmB,EAAAG,KAAA,QAAA,qCAEAH,KAAAK,QACA,sCACKA,KAKbL,EAAAG,KAAA,QAAA,qCALQpB,KAAKsB,QAAQ,6BAA8BR,IASpCH,GAOfQ,cAAA,WALI,IAAII,EAAQP,EAAEhB,KAAKwB,eAAexB,KAAKG,MAAMsB,WASzC,OARJzB,KAAKC,IAAID,KAAO,oBAAqBuB,GAQjCA,GAaAG,OAAAA,WAEA,IAAAA,EAAA,KA+CP,OA5CO1B,KAAAC,IACAD,KAAA,wBACHA,KAAAG,MAAAI,IAAA,kBAPGmB,EAUJ,OAAA1B,KAAAG,MAAcI,IAAA,uBACdoB,IAAO3B,KAAPG,MAAAI,IAAA,iBAXgBP,KAAKmB,gBAILnB,KAAKU,gBA2CzBkB,KAAUC,IAAAC,KAAAJ,GACN1B,KAAO6B,IAAAX,KAAA,qBAAAa,UACV/B,MAITY,oBAAA,SAAAoB,GACO,OACHxC,sDADJ,2CAlLJwC,EAAAjB,cA+IoB,YACA,uEACAiB,EAAKC,sBACC,iBACAD,EAAKC,sBACL,oDACA,IACN1C,EAAG,SACH,IACAyC,EAAKjB,cACL,IACA,SACA,UACFmB,KAAK,KAGXV,eAAgB,SAASQ,GACrB,OACI,mFACA,yJACAA,EAAKC,sBACC1C,EAAG,UAAYyC,EAAKC,sBACpB,GACN,SACA,UACFC,KAAK,KAGXN,SAAU,WACN,MAAO,kBAAoB5B,KAAKG,MAAQ","file":"../../../scripts/mvc/user/user-quotameter.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\"], function(baseMVC, _l) {\n    \"use strict\";\n\n    var logNamespace = \"user\";\n    //==============================================================================\n    /** @class View to display a user's disk/storage usage\n *      either as a progress bar representing the percentage of a quota used\n *      or a simple text element displaying the human readable size used.\n *  @name UserQuotaMeter\n *  @augments Backbone.View\n */\n    var UserQuotaMeter = Backbone.View.extend(baseMVC.LoggableMixin).extend(\n        /** @lends UserQuotaMeter.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** Defaults for optional settings passed to initialize */\n            options: {\n                warnAtPercent: 85,\n                errorAtPercent: 100\n            },\n\n            /** Set up, accept options, and bind events */\n            initialize: function(options) {\n                this.log(this + \".initialize:\", options);\n                _.extend(this.options, options);\n\n                //this.bind( 'all', function( event, data ){ this.log( this + ' event:', event, data ); }, this );\n                this.listenTo(\n                    this.model,\n                    \"change:quota_percent change:total_disk_usage\",\n                    this.render\n                );\n            },\n\n            /** Re-load user model data from the api */\n            update: function(options) {\n                this.log(this + \" updating user data...\", options);\n                this.model.loadFromApi(this.model.get(\"id\"), options);\n                return this;\n            },\n\n            /** Is the user over their quota (if there is one)?\n     * @returns {Boolean} true if over quota, false if no quota or under quota\n     */\n            isOverQuota: function() {\n                return (\n                    this.model.get(\"quota_percent\") !== null &&\n                    this.model.get(\"quota_percent\") >=\n                        this.options.errorAtPercent\n                );\n            },\n\n            /** Render the meter when they have an applicable quota. Will render as a progress bar\n     *      with their percentage of that quota in text over the bar.\n     *  @fires quota:over when user is over quota (>= this.errorAtPercent)\n     *  @fires quota:under when user is under quota\n     *  @fires quota:under:approaching when user is >= this.warnAtPercent of their quota\n     *  @fires quota:under:ok when user is below this.warnAtPercent\n     *  @returns {jQuery} the rendered meter\n     */\n            _render_quota: function() {\n                var modelJson = this.model.toJSON(),\n                    //prevPercent = this.model.previous( 'quota_percent' ),\n                    percent = modelJson.quota_percent,\n                    //meter = $( UserQuotaMeter.templates.quota( modelJson ) );\n                    $meter = $(this._templateQuotaMeter(modelJson)),\n                    $bar = $meter.find(\".progress-bar\");\n                //this.log( this + '.rendering quota, percent:', percent, 'meter:', meter );\n\n                // OVER QUOTA: color the quota bar and show the quota error message\n                if (this.isOverQuota()) {\n                    //this.log( '\\t over quota' );\n                    $bar.attr(\"class\", \"progress-bar progress-bar-danger\");\n                    $meter.find(\".quota-meter-text\").css(\"color\", \"white\");\n                    //TODO: only trigger event if state has changed\n                    this.trigger(\"quota:over\", modelJson);\n\n                    // APPROACHING QUOTA: color the quota bar\n                } else if (percent >= this.options.warnAtPercent) {\n                    //this.log( '\\t approaching quota' );\n                    $bar.attr(\"class\", \"progress-bar progress-bar-warning\");\n                    //TODO: only trigger event if state has changed\n                    this.trigger(\n                        \"quota:under quota:under:approaching\",\n                        modelJson\n                    );\n\n                    // otherwise, hide/don't use the msg box\n                } else {\n                    $bar.attr(\"class\", \"progress-bar progress-bar-success\");\n                    //TODO: only trigger event if state has changed\n                    this.trigger(\"quota:under quota:under:ok\", modelJson);\n                }\n                return $meter;\n            },\n\n            /** Render the meter when the user has NO applicable quota. Will render as text\n     *      showing the human readable sum storage their data is using.\n     *  @returns {jQuery} the rendered text\n     */\n            _render_usage: function() {\n                //var usage = $( UserQuotaMeter.templates.usage( this.model.toJSON() ) );\n                var usage = $(this._templateUsage(this.model.toJSON()));\n                this.log(this + \".rendering usage:\", usage);\n                return usage;\n            },\n\n            /** Render either the quota percentage meter or the human readable disk usage\n     *      depending on whether the user model has quota info (quota_percent === null -> no quota)\n     *  @returns {Object} this UserQuotaMeter\n     */\n            render: function() {\n                //this.log( this + '.rendering' );\n                var meterHtml = null;\n\n                // no quota on server ('quota_percent' === null (can be valid at 0)), show usage instead\n                this.log(\n                    this + \".model.quota_percent:\",\n                    this.model.get(\"quota_percent\")\n                );\n                if (\n                    this.model.get(\"quota_percent\") === null ||\n                    this.model.get(\"quota_percent\") === undefined\n                ) {\n                    meterHtml = this._render_usage();\n\n                    // otherwise, render percent of quota (and warning, error)\n                } else {\n                    meterHtml = this._render_quota();\n                    //TODO: add the original text for unregistered quotas\n                    //tooltip = \"Your disk quota is %s.  You can increase your quota by registering a Galaxy account.\"\n                }\n\n                this.$el.html(meterHtml);\n                this.$el.find(\".quota-meter-text\").tooltip();\n                return this;\n            },\n\n            _templateQuotaMeter: function(data) {\n                return [\n                    '<div id=\"quota-meter\" class=\"quota-meter progress\">',\n                    '<div class=\"progress-bar\" style=\"width: ',\n                    data.quota_percent,\n                    '%\"></div>',\n                    '<div class=\"quota-meter-text\" data-placement=\"left\" style=\"top: 6px\"',\n                    data.nice_total_disk_usage\n                        ? ' title=\"Using ' +\n                          data.nice_total_disk_usage +\n                          '.  This value is recalculated when you log out.\">'\n                        : \">\",\n                    _l(\"Using\"),\n                    \" \",\n                    data.quota_percent,\n                    \"%\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\");\n            },\n\n            _templateUsage: function(data) {\n                return [\n                    '<div id=\"quota-meter\" class=\"quota-meter\" style=\"background-color: transparent\">',\n                    '<div class=\"quota-meter-text\" data-placement=\"left\" data-original-title=\"This value is recalculated when you log out.\" style=\"top: 6px; color: white\">',\n                    data.nice_total_disk_usage\n                        ? _l(\"Using \") + data.nice_total_disk_usage\n                        : \"\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\");\n            },\n\n            toString: function() {\n                return \"UserQuotaMeter(\" + this.model + \")\";\n            }\n        }\n    );\n\n    //==============================================================================\n    return {\n        UserQuotaMeter: UserQuotaMeter\n    };\n});\n"]}