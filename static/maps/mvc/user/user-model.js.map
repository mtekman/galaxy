{"version":3,"sources":["mvc/user/user-model.js"],"names":["define","_","Backbone","baseMVC","_l","logNamespace","User","Model","extend","LoggableMixin","_logNamespace","urlRoot","Galaxy","root","defaults","id","username","email","total_disk_usage","nice_total_disk_usage","quota_percent","is_admin","initialize","data","this","log","on","resp","changes","isAnonymous","get","isAdmin","loadFromApi","idOrCurrent","CURRENT_ID_STR","model","userFn","options","success","newModel","response","trigger","url","prototype","call","clearSessionStorage","sessionStorage","indexOf","removeItem","key","toString","userInfo","unshift","push","join","currentUser","Collection"],"mappings":"aAAAA,QACK,kBAAmB,gBAAiB,eAAgB,sBADzDA,SACKC,EAAAC,EAADC,EAAoBC,GAIZC,IAKAC,EAAOJ,EAASK,MAAMC,OAAOL,EAAQM,eAAeD,QAEhDE,cAPW,OAUXC,QAAS,WACEC,OAAOC,OAAOA,KAAA,aAOzBC,UAAuCC,GAAA,KAEnCC,SAAgBZ,IAAGA,EAAA,kBAFgB,IAG5Ba,MAH4B,GAInCC,iBAJmC,EAKnCC,sBALmC,GAMnCC,cANmC,KAOnCC,UAAU,GAMdC,WAAY,SAAAC,GACRC,KAASC,IAAA,mBAATF,GAEQC,KAAAE,GAAR,SAAkB,SAAgBC,EAAMA,GACpCH,KAASC,IAAOD,KAAA,eAAuBG,EAAvCA,KAEIH,KAAAE,GAAR,SAAkB,SAAgBH,EAAMA,GACpCC,KAASC,IAAOD,KAAA,gBAAwBD,EAAKK,EAA7CA,YAIRC,YAAa,WACD,OAAAL,KAASM,IAAjB,UAGJC,QAAS,WACE,OAAAP,KAASM,IAAA,aAUpBE,YAAa,SAAAC,EAASA,GAClBA,EAAcA,GAAoBC,EAAAA,eAG9BC,IAAQA,EAAZX,KACIY,GAFJC,EAAUA,OACVC,QAeOpC,OAXCoC,EAARA,QAAkB,SAASC,EAAUC,GAC3BC,EAAQA,QAAd,SAAAF,EAAAC,GACYJ,GACDG,EAAPA,EAAAC,IAKJP,IAAqBC,EAAAA,iBACbQ,EAAMA,IAAK/B,KAALA,QAAqBL,IAAK4B,EAAAA,gBAErChC,EAAeyC,MAAAA,UAAgBC,MAAKA,KAAMP,KAAjDA,IAKJQ,oBAAqB,WACZ,IAAL,IAAgBC,KAAAA,eAGuB,IAA3BC,EAAQA,QAAA,YACZD,eAAeE,WAAfC,GACe,kBAAAA,GACfH,eAAeE,WAAfC,IAMZC,SAAU,WACFC,IAAAA,GAAY3B,KAASM,IAAA,aAKlB,OAJHN,KAAAM,IAAgB,QAChBqB,EAAiBC,QAAA5B,KAAAM,IAAjB,OACAqB,EAAcE,KAAA7B,KAASM,IAAvB,WAEG,QAAUqB,EAAAG,KAAqB,KAAtC,OAMZhD,EAAK4B,eAAiB,UAIlB5B,EAAIiD,sBAAJ,SAAAlB,GACAkB,IAAAA,EAAYvB,IAAY1B,EAF5B,OAGIiD,EAAOA,YAAPjD,EAAA4B,eAAAG,GAHJkB,GASYrD,EAAAsD,WAEJ7C,OAASR,EAAAM,eACLD,QACH2B,MAAA7B,EACDK,QAAA,WAPR,OAAAC,OAAAC,KAAA,eAzHR,OAqIYP,KAAMA","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["define(\n    [\"libs/underscore\", \"libs/backbone\", \"mvc/base-mvc\", \"utils/localization\"],\n    function(_, Backbone, baseMVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"user\";\n        //==============================================================================\n        /** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\n        var User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n            /** @lends User.prototype */ {\n                _logNamespace: logNamespace,\n\n                /** API location for this resource */\n                urlRoot: function() {\n                    return Galaxy.root + \"api/users\";\n                },\n\n                /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n                defaults: /** @lends User.prototype */ {\n                    id: null,\n                    username: \"(\" + _l(\"anonymous user\") + \")\",\n                    email: \"\",\n                    total_disk_usage: 0,\n                    nice_total_disk_usage: \"\",\n                    quota_percent: null,\n                    is_admin: false\n                },\n\n                /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n                initialize: function(data) {\n                    this.log(\"User.initialize:\", data);\n\n                    this.on(\"loaded\", function(model, resp) {\n                        this.log(this + \" has loaded:\", model, resp);\n                    });\n                    this.on(\"change\", function(model, data) {\n                        this.log(this + \" has changed:\", model, data.changes);\n                    });\n                },\n\n                isAnonymous: function() {\n                    return !this.get(\"email\");\n                },\n\n                isAdmin: function() {\n                    return this.get(\"is_admin\");\n                },\n\n                /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n                loadFromApi: function(idOrCurrent, options) {\n                    idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n                    options = options || {};\n                    var model = this,\n                        userFn = options.success;\n\n                    /** @ignore */\n                    options.success = function(newModel, response) {\n                        model.trigger(\"loaded\", newModel, response);\n                        if (userFn) {\n                            userFn(newModel, response);\n                        }\n                    };\n\n                    // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n                    if (idOrCurrent === User.CURRENT_ID_STR) {\n                        options.url = this.urlRoot + \"/\" + User.CURRENT_ID_STR;\n                    }\n                    return Backbone.Model.prototype.fetch.call(this, options);\n                },\n\n                /** Clears all data from the sessionStorage.\n     */\n                clearSessionStorage: function() {\n                    for (var key in sessionStorage) {\n                        //TODO: store these under the user key so we don't have to do this\n                        // currently only history\n                        if (key.indexOf(\"history:\") === 0) {\n                            sessionStorage.removeItem(key);\n                        } else if (key === \"history-panel\") {\n                            sessionStorage.removeItem(key);\n                        }\n                    }\n                },\n\n                /** string representation */\n                toString: function() {\n                    var userInfo = [this.get(\"username\")];\n                    if (this.get(\"id\")) {\n                        userInfo.unshift(this.get(\"id\"));\n                        userInfo.push(this.get(\"email\"));\n                    }\n                    return \"User(\" + userInfo.join(\":\") + \")\";\n                }\n            }\n        );\n\n        // string to send to tell server to return this transaction's user (see api/users.py)\n        User.CURRENT_ID_STR = \"current\";\n\n        // class method to load the current user via the api and return that model\n        User.getCurrentUserFromApi = function(options) {\n            var currentUser = new User();\n            currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n            return currentUser;\n        };\n\n        // (stub) collection for users (shouldn't be common unless admin UI)\n        var UserCollection = Backbone.Collection\n            .extend(baseMVC.LoggableMixin)\n            .extend({\n                model: User,\n                urlRoot: function() {\n                    return Galaxy.root + \"api/users\";\n                }\n                //logger  : console,\n            });\n\n        //==============================================================================\n        return {\n            User: User\n        };\n    }\n);\n"]}