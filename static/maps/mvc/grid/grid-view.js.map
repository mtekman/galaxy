{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","define","Utils","GridModel","Templates","PopupMenu","initialize","View","extend","grid","dict_format","window","add_tag_to_grid_filter","this","tag","tag_name","tag_value","advanced_search","title","self","success","$","slideToggle","add_filter_condition","undefined","is","grid_config","items","url_data","response","filters","init_grid","_","each","v","k","url","url_base","param","embedded","css","setElement","handle_refresh","use_panels","refresh_frames","inArray","top","Galaxy","currHistoryPanel","loadCurrentHistory","attributes","allow_title_display","options","setWindowTitle","get","find","replace","html","set","$el","setTimeout","header","body","footer","message","init_refresh_on_change","use_hide_message","init_grid_elements","init_grid_controls","off","click","submit_operation","select","submit","column_key","set_sort_condition","attr","parent","remove_filter_condition","text_input_obj","text_input","val","remove","update_checked","set_categorical_filter","checkboxes","change","on","check_all_items","set_page","check_count","text","filter","length","items_length","rating","operation","href","settings","e","target","confirmation_text","label","item","index","value","popup","button","_add_operation","t","operation_config","allowed","allow_popup","addItem","url_args","func","preventDefault","onclick","encode_id","execute","findItemByHtml","remove_filter","go_page_one","add_filter","name","filter_element","cur_sort","new_sort","sort_arrow","col_key","filter_value","indexOf","substring","addClass","empty","removeClass","append","new_value","id","page_num","cur_page","new_page","trim","category_filter","cur_value","parseInt","operation_name","number_of_checked_ids","findWhere","item_ids","push","operation_button","state","confirm","href_parts","check","href_parms_str","href_parms","c","prop","go_to","split","update_grid","async","toLowerCase","location","get_url_data","can_async_op","json","complete","method","show","ajax","type","data","error","alert","response_text","insert","parseJSON","hide"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/grid/grid-model\",\n        \"mvc/grid/grid-template\",\n        \"mvc/ui/popup-menu\"\n    ],\n    function(Utils, GridModel, Templates, PopupMenu) {\n        // grid view\n        return Backbone.View.extend({\n            // model\n            grid: null,\n\n            // Initialize\n            initialize: function(grid_config) {\n                this.grid = new GridModel();\n                this.dict_format = grid_config.dict_format;\n                this.title = grid_config.title;\n                var self = this;\n                window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n                    // Put tag name and value together.\n                    var tag =\n                        tag_name +\n                        (tag_value !== undefined && tag_value !== \"\"\n                            ? \":\" + tag_value\n                            : \"\");\n                    var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                    if (!advanced_search) {\n                        $(\"#standard-search\").slideToggle(\"fast\");\n                        $(\"#advanced-search\").slideToggle(\"fast\");\n                    }\n                    self.add_filter_condition(\"tags\", tag);\n                };\n\n                // set element\n                if (this.dict_format) {\n                    this.setElement(\"<div/>\");\n                    if (grid_config.url_base && !grid_config.items) {\n                        var url_data = grid_config.url_data || {};\n                        _.each(grid_config.filters, function(v, k) {\n                            url_data[\"f-\" + k] = v;\n                        });\n                        $.ajax({\n                            url: grid_config.url_base + \"?\" + $.param(url_data),\n                            success: function(response) {\n                                response.embedded = grid_config.embedded;\n                                response.filters = grid_config.filters || {};\n                                self.init_grid(response);\n                            }\n                        });\n                    } else {\n                        this.init_grid(grid_config);\n                    }\n                } else {\n                    this.setElement(\"#grid-container\");\n                    this.init_grid(grid_config);\n                }\n\n                // fix padding\n                if (grid_config.use_panels) {\n                    $(\"#center\").css({\n                        padding: \"10px\",\n                        overflow: \"auto\"\n                    });\n                }\n            },\n\n            // refresh frames\n            handle_refresh: function(refresh_frames) {\n                if (refresh_frames) {\n                    if ($.inArray(\"history\", refresh_frames) > -1) {\n                        if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                            top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                        }\n                    }\n                }\n            },\n\n            // Initialize\n            init_grid: function(grid_config) {\n                this.grid.set(grid_config);\n\n                // get options\n                var options = this.grid.attributes;\n\n                if (this.allow_title_display && options.title) {\n                    Utils.setWindowTitle(options.title);\n                }\n                // handle refresh requests\n                this.handle_refresh(options.refresh_frames);\n\n                // strip protocol and domain\n                var url = this.grid.get(\"url_base\");\n                url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n                this.grid.set(\"url_base\", url);\n\n                // append main template\n                this.$el.html(Templates.grid(options));\n\n                // update div contents\n                this.$el\n                    .find(\"#grid-table-header\")\n                    .html(Templates.header(options));\n                this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n                this.$el\n                    .find(\"#grid-table-footer\")\n                    .html(Templates.footer(options));\n\n                // update message\n                if (options.message) {\n                    this.$el\n                        .find(\"#grid-message\")\n                        .html(Templates.message(options));\n                    var self = this;\n                    if (options.use_hide_message) {\n                        setTimeout(function() {\n                            self.$el.find(\"#grid-message\").html(\"\");\n                        }, 5000);\n                    }\n                }\n\n                // configure elements\n                this.init_grid_elements();\n                this.init_grid_controls();\n\n                // attach global event handler\n                // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n                init_refresh_on_change();\n            },\n\n            // Initialize grid controls\n            init_grid_controls: function() {\n                // link\n                var self = this;\n\n                // Initialize grid operation button.\n                this.$el.find(\".operation-button\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.submit_operation(this);\n                        return false;\n                    });\n                });\n\n                // Initialize text filters to select text on click and use normal font when user is typing.\n                this.$el.find(\"input[type=text]\").each(function() {\n                    $(this).off();\n                    $(this)\n                        .click(function() {\n                            $(this).select();\n                        })\n                        .keyup(function() {\n                            $(this).css(\"font-style\", \"normal\");\n                        });\n                });\n\n                // Initialize sort links.\n                this.$el.find(\".sort-link\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_sort_condition($(this).attr(\"sort_key\"));\n                        return false;\n                    });\n                });\n\n                // Initialize text filters.\n                this.$el.find(\".text-filter-form\").each(function() {\n                    $(this).off();\n                    $(this).submit(function() {\n                        var column_key = $(this).attr(\"column_key\");\n                        var text_input_obj = $(\n                            \"#input-\" + column_key + \"-filter\"\n                        );\n                        var text_input = text_input_obj.val();\n                        text_input_obj.val(\"\");\n                        self.add_filter_condition(column_key, text_input);\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".text-filter-val > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        // Remove visible element.\n                        $(this)\n                            .parent()\n                            .remove();\n\n                        // Remove filter condition.\n                        self.remove_filter_condition(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n\n                        // Return\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".categorical-filter > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_categorical_filter(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n                        return false;\n                    });\n                });\n\n                // Initialize standard, advanced search toggles.\n                this.$el.find(\".advanced-search-toggle\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                        self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                        return false;\n                    });\n                });\n\n                // Add event to check all box\n                this.$el.find(\"#check_all\").off();\n                this.$el.find(\"#check_all\").on(\"click\", function() {\n                    self.check_all_items();\n                });\n            },\n\n            // Initialize grid elements.\n            init_grid_elements: function() {\n                // Initialize grid selection checkboxes.\n                this.$el.find(\".grid\").each(function() {\n                    var checkboxes = $(this).find(\n                        \"input.grid-row-select-checkbox\"\n                    );\n                    var check_count = $(this).find(\"span.grid-selected-count\");\n                    var update_checked = function() {\n                        check_count.text(\n                            $(checkboxes).filter(\":checked\").length\n                        );\n                    };\n\n                    $(checkboxes).each(function() {\n                        $(this).change(update_checked);\n                    });\n                    update_checked();\n                });\n\n                // Initialize ratings.\n                if (this.$el.find(\".community_rating_star\").length !== 0)\n                    this.$el.find(\".community_rating_star\").rating({});\n\n                // get options\n                var options = this.grid.attributes;\n                var self = this;\n\n                //\n                // add page click events\n                //\n                this.$el.find(\".page-link > a\").each(function() {\n                    $(this).click(function() {\n                        self.set_page($(this).attr(\"page_num\"));\n                        return false;\n                    });\n                });\n\n                //\n                // add inbound/outbound events\n                //\n                this.$el.find(\".use-target\").each(function() {\n                    $(this).click(function(e) {\n                        self.execute({\n                            href: $(this).attr(\"href\"),\n                            target: $(this).attr(\"target\")\n                        });\n                        return false;\n                    });\n                });\n\n                // empty grid?\n                var items_length = options.items.length;\n                if (items_length == 0) {\n                    return;\n                }\n\n                // add operation popup menus\n                _.each(options.items, function(item, index) {\n                    var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                    var popup = new PopupMenu(button);\n                    _.each(options[\"operations\"], function(operation) {\n                        self._add_operation(popup, operation, item);\n                    });\n                });\n            },\n\n            /** Add an operation to the items menu */\n            _add_operation: function(popup, operation, item) {\n                var self = this;\n                var settings = item.operation_config[operation.label];\n                if (settings.allowed && operation.allow_popup) {\n                    popup.addItem({\n                        html: operation.label,\n                        href: settings.url_args,\n                        target: settings.target,\n                        confirmation_text: operation.confirm,\n                        func: function(e) {\n                            e.preventDefault();\n                            var label = $(e.target).html();\n                            if (operation.onclick) {\n                                operation.onclick(item.encode_id);\n                            } else {\n                                self.execute(this.findItemByHtml(label));\n                            }\n                        }\n                    });\n                }\n            },\n\n            // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n            add_filter_condition: function(name, value) {\n                // Do nothing is value is empty.\n                if (value === \"\") {\n                    return false;\n                }\n\n                // Add condition to grid.\n                this.grid.add_filter(name, value, true);\n\n                // Add button that displays filter and provides a button to delete it.\n                var t = $(Templates.filter_element(name, value));\n                var self = this;\n                t.click(function() {\n                    // Remove visible element.\n                    $(this).remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition(name, value);\n                });\n\n                // append to container\n                var container = this.$el.find(\n                    \"#\" + name + \"-filtering-criteria\"\n                );\n                container.append(t);\n\n                // execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n            remove_filter_condition: function(name, value) {\n                // Remove filter condition.\n                this.grid.remove_filter(name, value);\n\n                // Execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set sort condition for grid.\n            set_sort_condition: function(col_key) {\n                // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n                // currently sorted column, sort is reversed.\n                var cur_sort = this.grid.get(\"sort_key\");\n                var new_sort = col_key;\n                if (cur_sort.indexOf(col_key) !== -1) {\n                    // Reverse sort.\n                    if (cur_sort.substring(0, 1) !== \"-\") {\n                        new_sort = \"-\" + col_key;\n                    }\n                }\n\n                // Remove sort arrows elements.\n                this.$el.find(\".sort-arrow\").remove();\n\n                // Add sort arrow element to new sort column.\n                var sort_arrow =\n                    new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n                var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\n                    \"sort-arrow\"\n                );\n\n                // Add to header\n                this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n                // Update grid.\n                this.grid.set(\"sort_key\", new_sort);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set new value for categorical filter.\n            set_categorical_filter: function(name, new_value) {\n                // Update filter hyperlinks to reflect new filter value.\n                var category_filter = this.grid.get(\"categorical_filters\")[\n                        name\n                    ],\n                    cur_value = this.grid.get(\"filters\")[name];\n                var self = this;\n                this.$el.find(\".\" + name + \"-filter\").each(function() {\n                    var text = $.trim($(this).text());\n                    var filter = category_filter[text];\n                    var filter_value = filter[name];\n                    if (filter_value == new_value) {\n                        // Remove filter link since grid will be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        $(this).empty();\n                        $(this).addClass(\"current-filter\");\n                        $(this).append(text);\n                    } else if (filter_value == cur_value) {\n                        // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        $(this).empty();\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_categorical_filter(name, filter_value);\n                        });\n                        $(this).removeClass(\"current-filter\");\n                        $(this).append(t);\n                    }\n                });\n\n                // Update grid.\n                this.grid.add_filter(name, new_value);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set page to view.\n            set_page: function(new_page) {\n                // Update page hyperlink to reflect new page.\n                var self = this;\n                this.$el.find(\".page-link\").each(function() {\n                    var id = $(this).attr(\"id\"),\n                        page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                        cur_page = self.grid.get(\"cur_page\"),\n                        text;\n                    if (page_num === new_page) {\n                        // Remove link to page since grid will be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        text = $(this)\n                            .children()\n                            .text();\n                        $(this).empty();\n                        $(this).addClass(\"inactive-link\");\n                        $(this).text(text);\n                    } else if (page_num === cur_page) {\n                        // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        text = $(this).text();\n                        $(this).empty();\n                        $(this).removeClass(\"inactive-link\");\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_page(page_num);\n                        });\n                        $(this).append(t);\n                    }\n                });\n\n                if (new_page === \"all\") {\n                    this.grid.set(\"cur_page\", new_page);\n                } else {\n                    this.grid.set(\"cur_page\", parseInt(new_page, 10));\n                }\n                this.execute();\n            },\n\n            // confirmation/submission of operation request\n            submit_operation: function(operation_button, confirmation_text) {\n                // identify operation\n                var operation_name = $(operation_button).val();\n\n                // verify in any item is selected\n                var number_of_checked_ids = this.$el.find(\n                    'input[name=\"id\"]:checked'\n                ).length;\n                if (!number_of_checked_ids > 0) {\n                    return false;\n                }\n\n                // Check to see if there's grid confirmation text for this operation\n                var operation = _.findWhere(this.grid.attributes.operations, {\n                    label: operation_name\n                });\n                if (operation && !confirmation_text) {\n                    confirmation_text = operation.confirm || \"\";\n                }\n\n                // collect ids\n                var item_ids = [];\n                this.$el.find(\"input[name=id]:checked\").each(function() {\n                    item_ids.push($(this).val());\n                });\n\n                // execute operation\n                var options = {\n                    operation: operation_name,\n                    id: item_ids,\n                    confirmation_text: confirmation_text\n                };\n                if (operation.target == \"top\") {\n                    options = _.extend(options, {\n                        href: operation.href,\n                        target: operation.target\n                    });\n                }\n                this.execute(options);\n                return true;\n            },\n\n            check_all_items: function() {\n                var check = this.$(\".grid-row-select-checkbox\");\n                var state = this.$(\"#check_all\").prop(\"checked\");\n                _.each(check, function(c) {\n                    $(c).prop(\"checked\", state);\n                });\n                this.init_grid_elements();\n            },\n\n            // Go back to page one; this is useful when a filter is applied.\n            go_page_one: function() {\n                // Need to go back to page 1 if not showing all.\n                var cur_page = this.grid.get(\"cur_page\");\n                if (\n                    cur_page !== null &&\n                    cur_page !== undefined &&\n                    cur_page !== \"all\"\n                ) {\n                    this.grid.set(\"cur_page\", 1);\n                }\n            },\n\n            //\n            // execute operations and hyperlink requests\n            //\n            execute: function(options) {\n                // get url\n                var id = null;\n                var href = null;\n                var operation = null;\n                var confirmation_text = null;\n                var target = null;\n\n                // check for options\n                if (options) {\n                    // get options\n                    href = options.href;\n                    operation = options.operation;\n                    id = options.id;\n                    confirmation_text = options.confirmation_text;\n                    target = options.target;\n\n                    // check if input contains the operation tag\n                    if (\n                        href !== undefined &&\n                        href.indexOf(\"operation=\") != -1\n                    ) {\n                        // Get operation, id in hyperlink's href.\n                        var href_parts = href.split(\"?\");\n                        if (href_parts.length > 1) {\n                            var href_parms_str = href_parts[1];\n                            var href_parms = href_parms_str.split(\"&\");\n                            for (\n                                var index = 0;\n                                index < href_parms.length;\n                                index++\n                            ) {\n                                if (\n                                    href_parms[index].indexOf(\"operation\") != -1\n                                ) {\n                                    // Found operation parm; get operation value.\n                                    operation = href_parms[index].split(\"=\")[1];\n                                    operation = operation.replace(/\\+/g, \" \");\n                                } else if (\n                                    href_parms[index].indexOf(\"id\") != -1\n                                ) {\n                                    // Found id parm; get id value.\n                                    id = href_parms[index].split(\"=\")[1];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // check for operation details\n                if (operation && id) {\n                    // show confirmation box\n                    if (\n                        confirmation_text &&\n                        confirmation_text != \"\" &&\n                        confirmation_text != \"None\" &&\n                        confirmation_text != \"null\"\n                    )\n                        if (!confirm(confirmation_text)) return false;\n\n                    // use small characters for operation?!\n                    operation = operation.toLowerCase();\n\n                    // Update grid.\n                    this.grid.set({\n                        operation: operation,\n                        item_ids: id\n                    });\n\n                    // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                    if (target == \"top\") {\n                        window.top.location =\n                            href + \"?\" + $.param(this.grid.get_url_data());\n                    } else if (\n                        this.grid.can_async_op(operation) ||\n                        this.dict_format\n                    ) {\n                        this.update_grid();\n                    } else {\n                        this.go_to(target, href);\n                    }\n\n                    // done\n                    return false;\n                }\n\n                // refresh grid\n                if (href) {\n                    this.go_to(target, href);\n                    return false;\n                }\n\n                // refresh grid\n                if (this.grid.get(\"async\") || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            },\n\n            // go to url\n            go_to: function(target, href) {\n                // get aysnc status\n                var async = this.grid.get(\"async\");\n                this.grid.set(\"async\", false);\n\n                // get slide status\n                var advanced_search = this.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n                this.grid.set(\"advanced_search\", advanced_search);\n\n                // get default url\n                if (!href) {\n                    href =\n                        this.grid.get(\"url_base\") +\n                        \"?\" +\n                        $.param(this.grid.get_url_data());\n                }\n\n                // clear grid of transient request attributes.\n                this.grid.set({\n                    operation: undefined,\n                    item_ids: undefined,\n                    async: async\n                });\n                switch (target) {\n                    case \"center\":\n                        $(\"#galaxy_main\").attr(\"src\", href);\n                        break;\n                    case \"top\":\n                        window.top.location = href;\n                        break;\n                    default:\n                        window.location = href;\n                }\n            },\n\n            // Update grid.\n            update_grid: function() {\n                // If there's an operation, do POST; otherwise, do GET.\n                var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n                // Show overlay to indicate loading and prevent user actions.\n                this.$el.find(\".loading-elt-overlay\").show();\n                var self = this;\n                $.ajax({\n                    type: method,\n                    url: self.grid.get(\"url_base\"),\n                    data: self.grid.get_url_data(),\n                    error: function(response) {\n                        alert(\"Grid refresh failed\");\n                    },\n                    success: function(response_text) {\n                        // backup\n                        var embedded = self.grid.get(\"embedded\");\n                        var insert = self.grid.get(\"insert\");\n                        var advanced_search = self.$el\n                            .find(\"#advanced-search\")\n                            .is(\":visible\");\n\n                        // request new configuration\n                        var json = self.dict_format\n                            ? response_text\n                            : $.parseJSON(response_text);\n\n                        // update\n                        json.embedded = embedded;\n                        json.insert = insert;\n                        json.advanced_search = advanced_search;\n\n                        // Initialize new grid config\n                        self.init_grid(json);\n\n                        // Hide loading overlay.\n                        self.$el.find(\".loading-elt-overlay\").hide();\n                    },\n                    complete: function() {\n                        // Clear grid of transient request attributes.\n                        self.grid.set({\n                            operation: undefined,\n                            item_ids: undefined\n                        });\n                    }\n                });\n            }\n        });\n    }\n);\n"]}