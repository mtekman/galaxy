{"version":3,"sources":["mvc/grid/grid-model.js"],"names":["define","Backbone","Model","extend","defaults","url_base","async","async_ops","categorical_filters","filters","sort_key","show_item_checkboxes","advanced_search","cur_page","undefined","num_pages","can_async_op","op","_","indexOf","this","attributes","add_filter","key","value","append","new_val","cur_val","values","remove_filter","condition","condition_index","get_url_data","url_data","sort","page","operation","id","item_ids","self","each","pairs","k","get_url","args","get","$","param"],"mappings":"aACAA,UAAW,WAAXA,OAAWC,SAAAC,MAAWC,QAClBC,UACOH,SAASC,GACZE,OAAU,EACNC,aACAC,uBACAC,WACAC,SAAAA,KACAC,sBALM,EAMNC,iBANM,EAONC,SAAAA,EACAC,UAAAA,EACAC,eATMC,EAUNC,cAAAA,GAQJC,aAAc,SAASC,GACnB,OAAqD,IAA9CC,EAAEC,QAAQC,KAAKC,WAAWd,UAAWU,IAMhDK,WAAY,SAASC,EAAKC,EAAOC,GAAjCH,GAAAA,EAAY,CAEJG,IACAC,EADAD,EAAQL,KAAAC,WAAAZ,QAAAc,GAER,GAAc,OAAVI,QAA0BlB,IAAXY,EACfK,EADJF,OAEIG,GAAoBA,iBAARA,EACZD,GAAA,OAAAA,GAAAC,GAAAH,EACGE,EAAWC,MACVA,CAAJ,IAEOC,KACHA,EAAA,GAAAD,EACAC,EAAIA,GAAAA,EACJA,EAAAA,OAKJ,KAXGF,EAUAC,GACHR,QAAAK,IACAE,EAAUC,KAAVH,GAGCJ,KAAAC,WAAAZ,QAAAc,GAAAG,OArBTN,KAwBOC,WAAAZ,QAAAc,GAAAC,GASXK,cAAe,SAASN,EAAKO,GACzB,IAAIH,EAAUP,KAAKC,WAAWZ,QAAQc,GAD1CM,GAAe,OAAfA,QAAwBN,IAATI,EACPA,OAAAA,EAGH,GAAA,iBAAAA,EAEGP,KAAAC,WAAAZ,QAAmBc,GAAU,OAC7B,CADJ,IAGOQ,EAAAb,EAAAC,QAAAQ,EAAAG,IACH,IAAAC,IACIA,EAAAA,GAAkB,MAU9BC,aAAc,WACV,IAAIC,GADRD,MAAcZ,KAAAC,WAAAf,MACN2B,KAAAA,KAAWZ,WAAAX,SACXJ,KAAAA,KAAOe,WAAAR,SACPqB,qBAAsBxB,KAAAA,WAFXC,qBAGXwB,gBAAWd,KAAWR,WAHXD,iBASXQ,KAAKC,WAAWe,YADpBH,EAAAG,UAAAhB,KAAAC,WAAAe,WAEIH,KAAAA,WAASG,WACZH,EAAAI,GAAAjB,KAAAC,WAAAiB,UAMD,IAAIC,EAAOnB,KAEPa,OAHJf,EAAAsB,KAAAtB,EAAAuB,MAAAF,EAAAlB,WAAAZ,SAAA,SAAAiC,GACIH,EAAO,KAAXG,EAAA,IAAAA,EAAA,KAEIT,GAMRU,QAAS,SAASC,GADlB,OACAD,KAASE,IAAA,YACL,IAOHC,EAAAC,MAAA3B,KAAAY,gBApHL,IAFJc,EAAAC,MAAAH","file":"../../../scripts/mvc/grid/grid-model.js","sourcesContent":["// dependencies\ndefine([], function() {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n     * Return true if operation can be done asynchronously.\n     */\n        can_async_op: function(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n     * Add filtering criterion.\n     */\n        add_filter: function(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n     * Remove filtering criterion.\n     */\n        remove_filter: function(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n     * Returns URL data for obtaining a new grid.\n     */\n        get_url_data: function() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function(k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function(args) {\n            return (\n                this.get(\"url_base\") +\n                \"?\" +\n                $.param(this.get_url_data()) +\n                \"&\" +\n                $.param(args)\n            );\n        }\n    });\n});\n"]}