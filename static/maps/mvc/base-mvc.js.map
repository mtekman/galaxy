{"version":3,"sources":["mvc/base-mvc.js"],"names":["define","_","Backbone","addLogging","_l","LoggableMixin","_logNamespace","SessionStorageModel","Model","extend","initialize","initialAttrs","this","_checkEnabledSessionStorage","id","Error","existing","isNew","_read","clear","silent","save","defaults","on","window","sessionStorage","length","err","options","alert","sync","method","model","returned","_create","_update","_delete","undefined","success","error","set","json","toJSON","setItem","JSON","stringify","DOMException","userAgent","indexOf","parse","getItem","toString","removeItem","hasOwnProperty","_log","mixin","mixinHash1","args","prototype","omit","propsHash","Array","slice","call","arguments","lastArg","pop","searchAliases","apply","SearchableModelMixin","searchAttributes","searchFor","searchAttribute","attrKey","toLowerCase","attrVal","get","_searchArrayAttribute","key","array","split","matches","elem","search","matchesAll","filter","term","terms","match","s","HUAVOptions","showFn","$elementShown","replace","jQuery","toggle","HiddenUntilActivatedViewMixin","hiddenUntilActivated","$activator","hidden","isFunction","$el","hasBeenShown","showSpeed","is","isHidden","onhide","attributes","draggable","onshowFirstTime","onshow","$","trigger","draggableOff","draggableOn","DraggableViewMixin","handle","removeEventListener","_dragStartHandler","toggleDraggable","dragStartHandler","bind","dragEndHandler","_dragEndHandler","$dragHandle","attr","addEventListener","SelectableViewMixin","$selector","hideSelector","event","speed","dataTransfer","effectAllowed","setData","showSelector","selectable","selected","deselect","_renderSelected","find","toggleClass","toggleSelector","fxSpeed","show","hide","toggleSelect","wrapTemplate","jsonNamespace","view","select","ascending","__comparator","attribute_name","a","buildComparator","template","templateFn","join","templateVars","b"],"mappings":"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","file":"../../scripts/mvc/base-mvc.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"libs/backbone\",\n        \"utils/add-logging\",\n        \"utils/localization\"\n    ],\n    function(_, Backbone, addLogging, _l) {\n        \"use strict\";\n\n        //==============================================================================\n        /** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\n        var LoggableMixin = /** @lends LoggableMixin# */ {\n            // replace null with console (if available) to see all logs for a particular view/model\n            /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n            logger: null,\n            /** @type {String} a namespace for filtering/focusing log output */\n            _logNamespace: \".\"\n        };\n        addLogging(LoggableMixin);\n\n        //==============================================================================\n        /** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\n        var SessionStorageModel = Backbone.Model.extend({\n            initialize: function(initialAttrs) {\n                // check for sessionStorage and error if no id is provided\n                this._checkEnabledSessionStorage();\n                if (!initialAttrs.id) {\n                    throw new Error(\n                        \"SessionStorageModel requires an id in the initial attributes\"\n                    );\n                }\n                this.id = initialAttrs.id;\n\n                // load existing from storage (if any), clear any attrs set by bbone before init is called,\n                //  layer initial over existing and defaults, and save\n                var existing = !this.isNew() ? this._read(this) : {};\n                this.clear({ silent: true });\n                this.save(_.extend({}, this.defaults, existing, initialAttrs), {\n                    silent: true\n                });\n\n                // save on any change to it immediately\n                this.on(\"change\", function() {\n                    this.save();\n                });\n            },\n\n            _checkEnabledSessionStorage: function() {\n                try {\n                    return window.sessionStorage.length >= 0;\n                } catch (err) {\n                    alert(\n                        \"Please enable cookies in your browser for this Galaxy site\"\n                    );\n                    return false;\n                }\n            },\n\n            /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n            sync: function(method, model, options) {\n                if (!options.silent) {\n                    model.trigger(\"request\", model, {}, options);\n                }\n                var returned = {};\n                switch (method) {\n                    case \"create\":\n                        returned = this._create(model);\n                        break;\n                    case \"read\":\n                        returned = this._read(model);\n                        break;\n                    case \"update\":\n                        returned = this._update(model);\n                        break;\n                    case \"delete\":\n                        returned = this._delete(model);\n                        break;\n                }\n                if (returned !== undefined || returned !== null) {\n                    if (options.success) {\n                        options.success();\n                    }\n                } else {\n                    if (options.error) {\n                        options.error();\n                    }\n                }\n                return returned;\n            },\n\n            /** set storage to the stringified item */\n            _create: function(model) {\n                try {\n                    var json = model.toJSON(),\n                        set = sessionStorage.setItem(\n                            model.id,\n                            JSON.stringify(json)\n                        );\n                    return set === null ? set : json;\n                    // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n                    // http://stackoverflow.com/questions/14555347\n                    // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n                } catch (err) {\n                    if (\n                        !(\n                            err instanceof DOMException &&\n                            navigator.userAgent.indexOf(\"Safari\") > -1\n                        )\n                    ) {\n                        throw err;\n                    }\n                }\n                return null;\n            },\n\n            /** read and parse json from storage */\n            _read: function(model) {\n                return JSON.parse(sessionStorage.getItem(model.id));\n            },\n\n            /** set storage to the item (alias to create) */\n            _update: function(model) {\n                return model._create(model);\n            },\n\n            /** remove the item from storage */\n            _delete: function(model) {\n                return sessionStorage.removeItem(model.id);\n            },\n\n            /** T/F whether sessionStorage contains the model's id (data is present) */\n            isNew: function() {\n                return !sessionStorage.hasOwnProperty(this.id);\n            },\n\n            _log: function() {\n                return JSON.stringify(this.toJSON(), null, \"  \");\n            },\n            toString: function() {\n                return \"SessionStorageModel(\" + this.id + \")\";\n            }\n        });\n        (function() {\n            SessionStorageModel.prototype = _.omit(\n                SessionStorageModel.prototype,\n                \"url\",\n                \"urlRoot\"\n            );\n        })();\n\n        //==============================================================================\n        /** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\n        function mixin(\n            mixinHash1,\n            /* mixinHash2, etc: ... variadic */ propsHash\n        ) {\n            var args = Array.prototype.slice.call(arguments, 0),\n                lastArg = args.pop();\n            args.unshift(lastArg);\n            return _.defaults.apply(_, args);\n        }\n\n        //==============================================================================\n        /** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\n        var SearchableModelMixin = {\n            /** what attributes of an HDA will be used in a text search */\n            searchAttributes: [\n                // override\n            ],\n\n            /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n            searchAliases: {\n                // override\n            },\n\n            /** search the attribute with key attrKey for the string searchFor; T/F if found */\n            searchAttribute: function(attrKey, searchFor) {\n                var attrVal = this.get(attrKey);\n                //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n                // bail if empty searchFor or unsearchable values\n                if (!searchFor || (attrVal === undefined || attrVal === null)) {\n                    return false;\n                }\n                // pass to sep. fn for deep search of array attributes\n                if (_.isArray(attrVal)) {\n                    return this._searchArrayAttribute(attrVal, searchFor);\n                }\n                return (\n                    attrVal\n                        .toString()\n                        .toLowerCase()\n                        .indexOf(searchFor.toLowerCase()) !== -1\n                );\n            },\n\n            /** deep(er) search for array attributes; T/F if found */\n            _searchArrayAttribute: function(array, searchFor) {\n                //this.debug( '_searchArrayAttribute', array, searchFor );\n                searchFor = searchFor.toLowerCase();\n                //precondition: searchFor has already been validated as non-empty string\n                //precondition: assumes only 1 level array\n                //TODO: could possibly break up searchFor more (CSV...)\n                return _.any(array, function(elem) {\n                    return (\n                        elem\n                            .toString()\n                            .toLowerCase()\n                            .indexOf(searchFor.toLowerCase()) !== -1\n                    );\n                });\n            },\n\n            /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n            search: function(searchFor) {\n                var model = this;\n                return _.filter(this.searchAttributes, function(key) {\n                    return model.searchAttribute(key, searchFor);\n                });\n            },\n\n            /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n            matches: function(term) {\n                var ATTR_SPECIFIER = \"=\",\n                    split = term.split(ATTR_SPECIFIER);\n                // attribute is specified - search only that\n                if (split.length >= 2) {\n                    var attrKey = split[0];\n                    attrKey = this.searchAliases[attrKey] || attrKey;\n                    return this.searchAttribute(attrKey, split[1]);\n                }\n                // no attribute is specified - search all attributes in searchAttributes\n                return !!this.search(term).length;\n            },\n\n            /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n            matchesAll: function(terms) {\n                var model = this;\n                // break the terms up by whitespace and filter out the empty strings\n                terms = terms.match(/(\".*\"|\\w*=\".*\"|\\S*)/g).filter(function(s) {\n                    return !!s;\n                });\n                return _.all(terms, function(term) {\n                    term = term.replace(/\"/g, \"\");\n                    return model.matches(term);\n                });\n            }\n        };\n\n        //==============================================================================\n        /** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\n        var HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */ {\n            //TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n            /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n            hiddenUntilActivated: function($activator, options) {\n                // call this in your view's initialize fn\n                options = options || {};\n                //TODO: flesh out options - show them all here\n                this.HUAVOptions = {\n                    $elementShown: this.$el,\n                    showFn: jQuery.prototype.toggle,\n                    showSpeed: \"fast\"\n                };\n                _.extend(this.HUAVOptions, options || {});\n                /** has this been shown already (and onshowFirstTime called)? */\n                this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is(\n                    \":visible\"\n                );\n                this.hidden = this.isHidden();\n\n                if ($activator) {\n                    var mixin = this;\n                    $activator.on(\"click\", function(ev) {\n                        mixin.toggle(mixin.HUAVOptions.showSpeed);\n                    });\n                }\n            },\n\n            //TODO:?? remove? use .hidden?\n            /** returns T/F if the view is hidden */\n            isHidden: function() {\n                return this.HUAVOptions.$elementShown.is(\":hidden\");\n            },\n\n            /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n            toggle: function() {\n                //TODO: more specific name - toggle is too general\n                // can be called manually as well with normal toggle arguments\n                //TODO: better as a callback (when the show/hide is actually done)\n                // show\n                if (this.hidden) {\n                    // fire the optional fns on the first/each showing - good for render()\n                    if (!this.HUAVOptions.hasBeenShown) {\n                        if (_.isFunction(this.HUAVOptions.onshowFirstTime)) {\n                            this.HUAVOptions.hasBeenShown = true;\n                            this.HUAVOptions.onshowFirstTime.call(this);\n                        }\n                    }\n                    if (_.isFunction(this.HUAVOptions.onshow)) {\n                        this.HUAVOptions.onshow.call(this);\n                        this.trigger(\"hiddenUntilActivated:shown\", this);\n                    }\n                    this.hidden = false;\n\n                    // hide\n                } else {\n                    if (_.isFunction(this.HUAVOptions.onhide)) {\n                        this.HUAVOptions.onhide.call(this);\n                        this.trigger(\"hiddenUntilActivated:hidden\", this);\n                    }\n                    this.hidden = true;\n                }\n                return this.HUAVOptions.showFn.apply(\n                    this.HUAVOptions.$elementShown,\n                    arguments\n                );\n            }\n        };\n\n        //==============================================================================\n        /** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\n        var DraggableViewMixin = {\n            /** set up instance vars to track whether this view is currently draggable */\n            initialize: function(attributes) {\n                /** is the body of this hda view expanded/not? */\n                this.draggable = attributes.draggable || false;\n            },\n\n            /** what part of the view's DOM triggers the dragging */\n            $dragHandle: function() {\n                //TODO: make abstract/general - move this to listItem\n                // override to the element you want to be your view's handle\n                return this.$(\".title-bar\");\n            },\n\n            /** toggle whether this view is draggable */\n            toggleDraggable: function() {\n                if (this.draggable) {\n                    this.draggableOff();\n                } else {\n                    this.draggableOn();\n                }\n            },\n\n            /** allow the view to be dragged, set up event handlers */\n            draggableOn: function() {\n                this.draggable = true;\n                this.dragStartHandler = _.bind(this._dragStartHandler, this);\n                this.dragEndHandler = _.bind(this._dragEndHandler, this);\n\n                var handle = this.$dragHandle()\n                    .attr(\"draggable\", true)\n                    .get(0);\n                handle.addEventListener(\n                    \"dragstart\",\n                    this.dragStartHandler,\n                    false\n                );\n                handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n            },\n\n            /** turn of view dragging and remove event listeners */\n            draggableOff: function() {\n                this.draggable = false;\n                var handle = this.$dragHandle()\n                    .attr(\"draggable\", false)\n                    .get(0);\n                handle.removeEventListener(\n                    \"dragstart\",\n                    this.dragStartHandler,\n                    false\n                );\n                handle.removeEventListener(\n                    \"dragend\",\n                    this.dragEndHandler,\n                    false\n                );\n            },\n\n            /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n            _dragStartHandler: function(event) {\n                event.dataTransfer.effectAllowed = \"move\";\n                //ASSUMES: this.model\n                //TODO: all except IE: should be 'application/json', IE: must be 'text'\n                event.dataTransfer.setData(\n                    \"text\",\n                    JSON.stringify(this.model.toJSON())\n                );\n                this.trigger(\"draggable:dragstart\", event, this);\n                return false;\n            },\n\n            /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n            _dragEndHandler: function(event) {\n                this.trigger(\"draggable:dragend\", event, this);\n                return false;\n            }\n        };\n\n        //==============================================================================\n        /** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\n        var SelectableViewMixin = {\n            /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n            initialize: function(attributes) {\n                /** is the view currently in selection mode? */\n                this.selectable = attributes.selectable || false;\n                /** is the view currently selected? */\n                this.selected = attributes.selected || false;\n            },\n\n            /** $el sub-element where the selector is rendered and what can be clicked to select. */\n            $selector: function() {\n                return this.$(\".selector\");\n            },\n\n            /** How the selector is rendered - defaults to font-awesome checkbox */\n            _renderSelected: function() {\n                // override\n                this.$selector()\n                    .find(\"span\")\n                    .toggleClass(\"fa-check-square-o\", this.selected)\n                    .toggleClass(\"fa-square-o\", !this.selected);\n            },\n\n            /** Toggle whether the selector is shown */\n            toggleSelector: function() {\n                //TODO: use this.selectable\n                if (!this.$selector().is(\":visible\")) {\n                    this.showSelector();\n                } else {\n                    this.hideSelector();\n                }\n            },\n\n            /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n            showSelector: function(speed) {\n                speed = speed !== undefined ? speed : this.fxSpeed;\n                // make sure selected state is represented properly\n                this.selectable = true;\n                this.trigger(\"selectable\", true, this);\n                this._renderSelected();\n                if (speed) {\n                    this.$selector().show(speed);\n                } else {\n                    this.$selector().show();\n                }\n            },\n\n            /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n            hideSelector: function(speed) {\n                speed = speed !== undefined ? speed : this.fxSpeed;\n                // reverse the process from showSelect\n                this.selectable = false;\n                this.trigger(\"selectable\", false, this);\n                if (speed) {\n                    this.$selector().hide(speed);\n                } else {\n                    this.$selector().hide();\n                }\n            },\n\n            /** Toggle whether the view is selected */\n            toggleSelect: function(event) {\n                if (this.selected) {\n                    this.deselect(event);\n                } else {\n                    this.select(event);\n                }\n            },\n\n            /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n            select: function(event) {\n                // switch icon, set selected, and trigger event\n                if (!this.selected) {\n                    this.trigger(\"selected\", this, event);\n                    this.selected = true;\n                    this._renderSelected();\n                }\n                return false;\n            },\n\n            /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n            deselect: function(event) {\n                // switch icon, set selected, and trigger event\n                if (this.selected) {\n                    this.trigger(\"de-selected\", this, event);\n                    this.selected = false;\n                    this._renderSelected();\n                }\n                return false;\n            }\n        };\n\n        //==============================================================================\n        /** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\n        function wrapTemplate(template, jsonNamespace) {\n            jsonNamespace = jsonNamespace || \"model\";\n            var templateFn = _.template(template.join(\"\"));\n            return function(json, view) {\n                var templateVars = { view: view || {}, _l: _l };\n                templateVars[jsonNamespace] = json || {};\n                return templateFn(templateVars);\n            };\n        }\n\n        //==============================================================================\n        /** Return a comparator function for sorted Collections */\n        function buildComparator(attribute_name, options) {\n            options = options || {};\n            var ascending = options.ascending ? 1 : -1;\n            return function __comparator(a, b) {\n                a = a.get(attribute_name);\n                b = b.get(attribute_name);\n                return (a < b ? -1 : a > b ? 1 : 0) * ascending;\n            };\n        }\n\n        //==============================================================================\n        return {\n            LoggableMixin: LoggableMixin,\n            SessionStorageModel: SessionStorageModel,\n            mixin: mixin,\n            SearchableModelMixin: SearchableModelMixin,\n            HiddenUntilActivatedViewMixin: HiddenUntilActivatedViewMixin,\n            DraggableViewMixin: DraggableViewMixin,\n            SelectableViewMixin: SelectableViewMixin,\n            wrapTemplate: wrapTemplate,\n            buildComparator: buildComparator\n        };\n    }\n);\n"]}