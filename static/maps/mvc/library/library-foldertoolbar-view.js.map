{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","FolderToolbarView","el","events","mod_masthead","mod_utils","mod_toastr","mod_library_model","mod_select","Backbone","View","extend","can_add_library_item","chain_call_control","total_number","failed_number","click #include_deleted_datasets_chk","disabled_jstree_element","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","contains_file_or_folder","select_genome","select_extension","list_extensions","auto","description","initialize","id","text","options","template_defaults","Galaxy","mutiple_add_dataset_options","this","fetchExtAndGenomes","render","_","toolbar_template","templateToolBar","renderPaginator","paginator_template","templatePaginator","show_page","is_admin","isAdmin","page_count","is_anonym","isAnonymous","items_shown","config","folder_page_size","library_import_dir","$el","html","user","$","find","parseInt","hide","total_items_count","libraries","preferences","get","configureElements","createFolderFromModal","stopPropagation","show","self","modal","closing_events","create_new_folder_event","template","tooltip","history","event","current_folder_id","url_items","templateNewFolderInModal","folder","urlRoot","folderDetails","success","set","error","serialize_new_folder","FolderAsModel","fragment","split","indexOf","length","save","validate_new_folder","name","type","folderListView","collection","add","$checkedValues","findCheckedRows","response","responseJSON","err_msg","body","Import","that","val","Close","modalBulkImport","info","histories","GalaxyHistories","importAllIntoHistory","disableButton","new_history_name","templateBulkImportInModal","root","new_history","last_used_history_id","buttons","enableButton","model","datasets_to_import","i","library_dataset_id","historyItem","content","processImportToHistory","folders_to_import","url","source","initChainCallControl","action","history_name","getJSON","history_id","chainCallImportingIntoHistory","dataset_ids","updateProgress","progress","progressStep","row_id","txt_representation","data","substring","folder_ids","push","each","HistoryItem","processDownload","library_folder_id","jQuery","inputs","pair","width","title","folder_id","format","closing_callback","fetchAndDisplayHistoryContents","ld_ids","method","param","template_modal","renderSelectBoxes","appendTo","submit","datatypes","extension","description_url","done","templateAddFilesFromHistory","models","Add","addAllDatasetsFromHistory","genomes","list_genomes","library_router","navigate","b","change","target","value","importFilesFromPathModal","templateImportPathModal","importFilesFromGalaxyFolderModal","importFromPathsClicked","trigger","renderJstree","key","sort","a","unshift","jstree","require","core","types","icon","container","file","importFromJstreePath","preserve_dirs","file_type","dbkey","valid_paths","bind","paths","trimmed","chainCallImportingFolders","link_data","space_to_tab","Jstree","folder_name","emit","plugins","checkbox","three_state","get_selected","err_code","selected_nodes","all_nodes","disabled","is","selection_type","full_source","to_posix_lines","tag_using_filenames","history_contents","history_contents_template","templateAddingDatasetsProgressBar","templateDeletingItemsProgressBar","checked_hdas","history_item_ids","history_item_types","items_to_add","templateImportIntoHistoryProgressBar","hid","item_type","folder_item","from_hdca_id","from_hda_id","history_item_id","filter","node","state","popped_item","onclick","window","location","warning","promise","undefined","li_attr","full_path","history_item_set","chainCallImportingUserdirFiles","when","post","HistoryContents","fetch","templateHistoryContents","contents","reverse","prop","chainCallAddingHdas","added_hdas","closest","hdas_set","Item","deleted_items","item_to_delete","updated_item","pop","item","checked","include_deleted","fetchFolder","deleteSelectedItems","items_total","items_to_delete","dataset","chainCallDeletingItems","showLocInfoModal","library","prompt","fail","Folder","templateBrowserModal","destroy","remove","model_class","checkIncludeDeleted","showLocInfo","libraryListView","parent_library_id","Library","templateLocInfoInModal","showImportModal","addFilesFromHistoryModal","back","showPageSizePrompt","e","preventDefault","join"],"mappings":"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CA,SAEA,wDAEA,UACFuO,KAAK,MAIfP,uBAAwB,WACpB,OAAOnQ,EAAEmC,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACFuO,KAAK,MAIfjO,yBAA0B,WACtB,OAAOzC,EAAEmC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACFuO,KAAK,MAIf5L,0BAA2B,WACvB,OAAO9E,EAAEmC,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACFuO,KAAK,MAIfpE,qCAAsC,WAClC,OAAOtM,EAAEmC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACFuO,KAAK,MAIf1E,kCAAmC,WAC/B,OAAOhM,EAAEmC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACFuO,KAAK,MAIfzE,iCAAkC,WAC9B,OAAOjM,EAAEmC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACFuO,KAAK,MAIfhB,qBAAsB,WAClB,OAAO1P,EAAEmC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFuO,KAAK,MAIfvH,wBAAyB,WACrB,OAAOnJ,EAAEmC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFuO,KAAK,MAIfpI,4BAA6B,WACzB,OAAOtI,EAAEmC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACFuO,KAAK,MAIf3C,wBAAyB,WACrB,OAAO/N,EAAEmC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACFuO,KAAK,MAIfrQ,kBAAmB,WACf,OAAOL,EAAEmC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACFuO,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/ui/ui-select\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_select\n    ) {\n        var FolderToolbarView = Backbone.View.extend({\n            el: \"#center\",\n\n            events: {\n                \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n                \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n                \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n                \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n                \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n                \"click .page_size_prompt\": \"showPageSizePrompt\"\n            },\n\n            defaults: {\n                can_add_library_item: false,\n                contains_file_or_folder: false,\n                chain_call_control: {\n                    total_number: 0,\n                    failed_number: 0\n                },\n                disabled_jstree_element: \"folders\"\n            },\n\n            modal: null,\n\n            // directory browsing object\n            jstree: null,\n\n            // user's histories\n            histories: null,\n\n            // genome select\n            select_genome: null,\n\n            // extension select\n            select_extension: null,\n\n            // extension types\n            list_extensions: [],\n\n            // datatype placeholder for extension auto-detection\n            auto: {\n                id: \"auto\",\n                text: \"Auto-detect\",\n                description:\n                    \"This system will try to detect the file type automatically.\" +\n                    \" If your file is not detected properly as one of the known formats,\" +\n                    \" it most likely means that it has some format problems (e.g., different\" +\n                    \" number of columns on different rows). You can still coerce the system\" +\n                    \" to set your data to the format you think it should be.\" +\n                    \" You can also upload compressed files, which will automatically be decompressed.\"\n            },\n\n            // genomes\n            list_genomes: [],\n\n            initialize: function(options) {\n                this.options = _.defaults(options || {}, this.defaults);\n                this.fetchExtAndGenomes();\n                this.render();\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var toolbar_template = this.templateToolBar();\n                var template_defaults = {\n                    id: this.options.id,\n                    is_admin: false,\n                    is_anonym: true,\n                    mutiple_add_dataset_options: false\n                };\n                if (Galaxy.user) {\n                    template_defaults.is_admin = Galaxy.user.isAdmin();\n                    template_defaults.is_anonym = Galaxy.user.isAnonymous();\n                    if (\n                        Galaxy.config.user_library_import_dir !== null ||\n                        Galaxy.config.allow_library_path_paste !== false ||\n                        Galaxy.config.library_import_dir !== null\n                    ) {\n                        template_defaults.mutiple_add_dataset_options = true;\n                    }\n                }\n                this.$el.html(toolbar_template(template_defaults));\n            },\n\n            /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n            renderPaginator: function(options) {\n                this.options = _.extend(this.options, options);\n                var paginator_template = this.templatePaginator();\n                $(\"body\")\n                    .find(\".folder-paginator\")\n                    .html(\n                        paginator_template({\n                            id: this.options.id,\n                            show_page: parseInt(this.options.show_page),\n                            page_count: parseInt(this.options.page_count),\n                            total_items_count: this.options.total_items_count,\n                            items_shown: this.options.items_shown,\n                            folder_page_size: Galaxy.libraries.preferences.get(\n                                \"folder_page_size\"\n                            )\n                        })\n                    );\n            },\n\n            configureElements: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (this.options.can_add_library_item === true) {\n                    $(\".add-library-items\").show();\n                } else {\n                    $(\".add-library-items\").hide();\n                }\n                if (this.options.contains_file_or_folder === true) {\n                    if (Galaxy.user) {\n                        if (!Galaxy.user.isAnonymous()) {\n                            $(\".logged-dataset-manipulation\").show();\n                            $(\".dataset-manipulation\").show();\n                        } else {\n                            $(\".dataset-manipulation\").show();\n                            $(\".logged-dataset-manipulation\").hide();\n                        }\n                    } else {\n                        $(\".logged-dataset-manipulation\").hide();\n                        $(\".dataset-manipulation\").hide();\n                    }\n                } else {\n                    $(\".logged-dataset-manipulation\").hide();\n                    $(\".dataset-manipulation\").hide();\n                }\n                this.$el.find(\"[data-toggle]\").tooltip();\n            },\n\n            // shows modal for creating folder\n            createFolderFromModal: function(event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                // create modal\n                var self = this;\n                var template = this.templateNewFolderInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Create New Folder\",\n                    body: template(),\n                    buttons: {\n                        Create: function() {\n                            self.create_new_folder_event();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            // create the new folder from modal\n            create_new_folder_event: function() {\n                var folderDetails = this.serialize_new_folder();\n                if (this.validate_new_folder(folderDetails)) {\n                    var folder = new mod_library_model.FolderAsModel();\n                    var url_items = Backbone.history.fragment.split(\"/\"),\n                        current_folder_id;\n                    if (url_items.indexOf(\"page\") > -1) {\n                        current_folder_id = url_items[url_items.length - 3];\n                    } else {\n                        current_folder_id = url_items[url_items.length - 1];\n                    }\n                    folder.url = folder.urlRoot + current_folder_id;\n\n                    folder.save(folderDetails, {\n                        success: function(folder) {\n                            Galaxy.modal.hide();\n                            mod_toastr.success(\"Folder created.\");\n                            folder.set({ type: \"folder\" });\n                            Galaxy.libraries.folderListView.collection.add(\n                                folder\n                            );\n                        },\n                        error: function(model, response) {\n                            Galaxy.modal.hide();\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"Folder's name is missing.\");\n                }\n                return false;\n            },\n\n            // serialize data from the modal\n            serialize_new_folder: function() {\n                return {\n                    name: $(\"input[name='Name']\").val(),\n                    description: $(\"input[name='Description']\").val()\n                };\n            },\n\n            // validate new folder info\n            validate_new_folder: function(folderDetails) {\n                return folderDetails.name !== \"\";\n            },\n\n            // show bulk import modal\n            modalBulkImport: function() {\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    var that = this;\n                    this.histories = new mod_library_model.GalaxyHistories();\n                    this.histories\n                        .fetch()\n                        .done(function() {\n                            var template = that.templateBulkImportInModal();\n                            that.modal = Galaxy.modal;\n                            that.modal.show({\n                                closing_events: true,\n                                title: \"Import into History\",\n                                body: template({\n                                    histories: that.histories.models\n                                }),\n                                buttons: {\n                                    Import: function() {\n                                        that.importAllIntoHistory();\n                                    },\n                                    Close: function() {\n                                        Galaxy.modal.hide();\n                                    }\n                                }\n                            });\n                        })\n                        .fail(function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        });\n                }\n            },\n\n            /**\n   * Import all selected datasets into history.\n   */\n            importAllIntoHistory: function() {\n                this.modal.disableButton(\"Import\");\n                var new_history_name = this.modal\n                    .$(\"input[name=history_name]\")\n                    .val();\n                var that = this;\n                if (new_history_name !== \"\") {\n                    $.post(Galaxy.root + \"api/histories\", {\n                        name: new_history_name\n                    })\n                        .done(function(new_history) {\n                            that.options.last_used_history_id = new_history.id;\n                            that.processImportToHistory(\n                                new_history.id,\n                                new_history.name\n                            );\n                        })\n                        .fail(function(xhr, status, error) {\n                            mod_toastr.error(\"An error occurred.\");\n                        })\n                        .always(function() {\n                            that.modal.enableButton(\"Import\");\n                        });\n                } else {\n                    var history_id = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).val();\n                    this.options.last_used_history_id = history_id;\n                    var history_name = $(\n                        \"select[name=dataset_import_bulk] option:selected\"\n                    ).text();\n                    this.processImportToHistory(history_id, history_name);\n                    this.modal.enableButton(\"Import\");\n                }\n            },\n\n            processImportToHistory: function(history_id, history_name) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                // prepare the dataset objects to be imported\n                var datasets_to_import = [];\n                for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                    var library_dataset_id = dataset_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_dataset_id;\n                    historyItem.source = \"library\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                // prepare the folder objects to be imported\n                var folders_to_import = [];\n                for (var i = folder_ids.length - 1; i >= 0; i--) {\n                    var library_folder_id = folder_ids[i];\n                    var historyItem = new mod_library_model.HistoryItem();\n                    historyItem.url =\n                        historyItem.urlRoot + history_id + \"/contents\";\n                    historyItem.content = library_folder_id;\n                    historyItem.source = \"library_folder\";\n                    datasets_to_import.push(historyItem);\n                }\n\n                this.initChainCallControl({\n                    length: datasets_to_import.length,\n                    action: \"to_history\",\n                    history_name: history_name\n                });\n                // set the used history as current so user will see the last one\n                // that he imported into in the history panel on the 'analysis' page\n                jQuery.getJSON(\n                    Galaxy.root + \"history/set_as_current?id=\" + history_id\n                );\n                this.chainCallImportingIntoHistory(\n                    datasets_to_import,\n                    history_name\n                );\n            },\n\n            /**\n   * Update the progress bar in modal window.\n   */\n            updateProgress: function() {\n                this.progress += this.progressStep;\n                $(\".progress-bar-import\").width(\n                    Math.round(this.progress) + \"%\"\n                );\n                var txt_representation =\n                    Math.round(this.progress) + \"% Complete\";\n                $(\".completion_span\").text(txt_representation);\n            },\n\n            /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n            download: function(folder_id, format) {\n                var dataset_ids = [];\n                var folder_ids = [];\n                this.findCheckedRows().each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                });\n                var url =\n                    Galaxy.root + \"api/libraries/datasets/download/\" + format;\n                var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n                this.processDownload(url, data, \"get\");\n            },\n\n            /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n            processDownload: function(url, data, method) {\n                if (url && data) {\n                    // data can be string of parameters or array/object\n                    data = typeof data === \"string\" ? data : $.param(data);\n                    // split params into form inputs\n                    var inputs = \"\";\n                    $.each(data.split(\"&\"), function() {\n                        var pair = this.split(\"=\");\n                        inputs +=\n                            '<input type=\"hidden\" name=\"' +\n                            pair[0] +\n                            '\" value=\"' +\n                            pair[1] +\n                            '\" />';\n                    });\n                    // send request\n                    $(\n                        '<form action=\"' +\n                            url +\n                            '\" method=\"' +\n                            (method || \"post\") +\n                            '\">' +\n                            inputs +\n                            \"</form>\"\n                    )\n                        .appendTo(\"body\")\n                        .submit()\n                        .remove();\n                    mod_toastr.info(\"Your download will begin soon.\");\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            },\n\n            addFilesFromHistoryModal: function() {\n                this.histories = new mod_library_model.GalaxyHistories();\n                var self = this;\n                this.histories\n                    .fetch()\n                    .done(function() {\n                        self.modal = Galaxy.modal;\n                        var template_modal = self.templateAddFilesFromHistory();\n                        self.modal.show({\n                            closing_events: true,\n                            title: \"Adding datasets from your history\",\n                            body: template_modal({\n                                histories: self.histories.models\n                            }),\n                            buttons: {\n                                Add: function() {\n                                    self.addAllDatasetsFromHistory();\n                                },\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            },\n                            closing_callback: function() {\n                                Galaxy.libraries.library_router.navigate(\n                                    \"folders/\" + self.id,\n                                    { trigger: true }\n                                );\n                            }\n                        });\n                        self.fetchAndDisplayHistoryContents(\n                            self.histories.models[0].id\n                        );\n                        $(\"#dataset_add_bulk\").change(function(event) {\n                            self.fetchAndDisplayHistoryContents(\n                                event.target.value\n                            );\n                        });\n                    })\n                    .fail(function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    });\n            },\n\n            /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n            importFilesFromPathModal: function() {\n                var that = this;\n                this.modal = Galaxy.modal;\n                var template_modal = this.templateImportPathModal();\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please enter paths to import\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromPathsClicked(that);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n                this.renderSelectBoxes();\n            },\n\n            /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n            fetchExtAndGenomes: function() {\n                var that = this;\n                mod_utils.get({\n                    url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                    success: function(datatypes) {\n                        that.list_extensions = [];\n                        for (var key in datatypes) {\n                            that.list_extensions.push({\n                                id: datatypes[key].extension,\n                                text: datatypes[key].extension,\n                                description: datatypes[key].description,\n                                description_url: datatypes[key].description_url\n                            });\n                        }\n                        that.list_extensions.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                        that.list_extensions.unshift(that.auto);\n                    },\n                    cache: true\n                });\n                mod_utils.get({\n                    url: Galaxy.root + \"api/genomes\",\n                    success: function(genomes) {\n                        that.list_genomes = [];\n                        for (var key in genomes) {\n                            that.list_genomes.push({\n                                id: genomes[key][1],\n                                text: genomes[key][0]\n                            });\n                        }\n                        that.list_genomes.sort(function(a, b) {\n                            return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                        });\n                    },\n                    cache: true\n                });\n            },\n\n            renderSelectBoxes: function() {\n                // This won't work properly unlesss we already have the data fetched.\n                // See this.fetchExtAndGenomes()\n                // TODO switch to common resources:\n                // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n                var that = this;\n                this.select_genome = new mod_select.View({\n                    css: \"library-genome-select\",\n                    data: that.list_genomes,\n                    container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n                    value: \"?\"\n                });\n                this.select_extension = new mod_select.View({\n                    css: \"library-extension-select\",\n                    data: that.list_extensions,\n                    container: Galaxy.modal.$el.find(\n                        \"#library_extension_select\"\n                    ),\n                    value: \"auto\"\n                });\n            },\n\n            /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n            importFilesFromGalaxyFolderModal: function(options) {\n                var that = this;\n                var template_modal = this.templateBrowserModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Please select folders or files\",\n                    body: template_modal({}),\n                    buttons: {\n                        Import: function() {\n                            that.importFromJstreePath(that, options);\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        //  TODO: should not trigger routes outside of the router\n                        Galaxy.libraries.library_router.navigate(\n                            \"folders/\" + that.id,\n                            { trigger: true }\n                        );\n                    }\n                });\n\n                $(\".libimport-select-all\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"check_all\");\n                });\n                $(\".libimport-select-none\").bind(\"click\", function() {\n                    $(\"#jstree_browser\").jstree(\"uncheck_all\");\n                });\n\n                this.renderSelectBoxes();\n                options.disabled_jstree_element = \"folders\";\n                this.renderJstree(options);\n\n                $(\"input[type=radio]\").change(function(event) {\n                    if (event.target.value === \"jstree-disable-folders\") {\n                        options.disabled_jstree_element = \"folders\";\n                        that.renderJstree(options);\n                        $(\".jstree-folders-message\").hide();\n                        $(\".jstree-preserve-structure\").hide();\n                        $(\".jstree-files-message\").show();\n                    } else if (event.target.value === \"jstree-disable-files\") {\n                        $(\".jstree-files-message\").hide();\n                        $(\".jstree-folders-message\").show();\n                        $(\".jstree-preserve-structure\").show();\n                        options.disabled_jstree_element = \"files\";\n                        that.renderJstree(options);\n                    }\n                });\n            },\n\n            /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n            renderJstree: function(options) {\n                var that = this;\n                this.options = _.extend(this.options, options);\n                var target = options.source || \"userdir\";\n                var disabled_jstree_element = this.options\n                    .disabled_jstree_element;\n                this.jstree = new mod_library_model.Jstree();\n                this.jstree.url =\n                    this.jstree.urlRoot +\n                    \"?target=\" +\n                    target +\n                    \"&format=jstree\" +\n                    \"&disable=\" +\n                    disabled_jstree_element;\n                this.jstree.fetch({\n                    success: function(model, response) {\n                        // This is to prevent double jquery load. I think. Carl is magician.\n                        define(\"jquery\", function() {\n                            return jQuery;\n                        });\n                        // Now we need jstree, time to lazy load it.\n                        require([\"libs/jquery/jstree\"], function(jstree) {\n                            $(\"#jstree_browser\").jstree(\"destroy\");\n                            $(\"#jstree_browser\").jstree({\n                                core: {\n                                    data: model\n                                },\n                                plugins: [\"types\", \"checkbox\"],\n                                types: {\n                                    folder: {\n                                        icon: \"jstree-folder\"\n                                    },\n                                    file: {\n                                        icon: \"jstree-file\"\n                                    }\n                                },\n                                checkbox: {\n                                    three_state: false\n                                }\n                            });\n                        });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            if (response.responseJSON.err_code === 404001) {\n                                mod_toastr.warning(\n                                    response.responseJSON.err_msg\n                                );\n                            } else {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            }\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n            importFromPathsClicked: function() {\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var paths = $(\"textarea#import_paths\").val();\n                var valid_paths = [];\n                if (!paths) {\n                    mod_toastr.info(\n                        \"Please enter a path relative to Galaxy root.\"\n                    );\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    paths = paths.split(\"\\n\");\n                    for (var i = paths.length - 1; i >= 0; i--) {\n                        var trimmed = paths[i].trim();\n                        if (trimmed.length !== 0) {\n                            valid_paths.push(trimmed);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: valid_paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallImportingFolders({\n                        paths: valid_paths,\n                        preserve_dirs: preserve_dirs,\n                        link_data: link_data,\n                        space_to_tab: space_to_tab,\n                        to_posix_lines: to_posix_lines,\n                        source: \"admin_path\",\n                        file_type: file_type,\n                        tag_using_filenames: tag_using_filenames,\n                        dbkey: dbkey\n                    });\n                }\n            },\n\n            /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n            initChainCallControl: function(options) {\n                var template;\n                switch (options.action) {\n                    case \"adding_datasets\":\n                        template = this.templateAddingDatasetsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(\n                            template({\n                                folder_name: this.options.folder_name\n                            })\n                        );\n                        break;\n                    case \"deleting_datasets\":\n                        template = this.templateDeletingItemsProgressBar();\n                        this.modal.$el.find(\".modal-body\").html(template());\n                        break;\n                    case \"to_history\":\n                        template = this.templateImportIntoHistoryProgressBar();\n                        this.modal.$el\n                            .find(\".modal-body\")\n                            .html(\n                                template({ history_name: options.history_name })\n                            );\n                        break;\n                    default:\n                        Galaxy.emit.error(\n                            \"Wrong action specified.\",\n                            \"datalibs\"\n                        );\n                        break;\n                }\n\n                // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n                // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n                this.progress = 0;\n                this.progressStep = 100 / options.length;\n                this.options.chain_call_control.total_number = options.length;\n                this.options.chain_call_control.failed_number = 0;\n            },\n\n            /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n            importFromJstreePath: function(that, options) {\n                var all_nodes = $(\"#jstree_browser\")\n                    .jstree()\n                    .get_selected(true);\n                // remove the disabled elements that could have been trigerred with the 'select all'\n                var selected_nodes = _.filter(all_nodes, function(node) {\n                    return node.state.disabled == false;\n                });\n                var preserve_dirs = this.modal.$el\n                    .find(\".preserve-checkbox\")\n                    .is(\":checked\");\n                var link_data = this.modal.$el\n                    .find(\".link-checkbox\")\n                    .is(\":checked\");\n                var space_to_tab = this.modal.$el\n                    .find(\".spacetab-checkbox\")\n                    .is(\":checked\");\n                var to_posix_lines = this.modal.$el\n                    .find(\".posix-checkbox\")\n                    .is(\":checked\");\n                var file_type = this.select_extension.value();\n                var dbkey = this.select_genome.value();\n                var tag_using_filenames = this.modal.$el\n                    .find(\".tag-files\")\n                    .is(\":checked\");\n                var selection_type = selected_nodes[0].type;\n                var paths = [];\n                if (selected_nodes.length < 1) {\n                    mod_toastr.info(\"Please select some items first.\");\n                } else {\n                    this.modal.disableButton(\"Import\");\n                    for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                        if (selected_nodes[i].li_attr.full_path !== undefined) {\n                            paths.push(selected_nodes[i].li_attr.full_path);\n                        }\n                    }\n                    this.initChainCallControl({\n                        length: paths.length,\n                        action: \"adding_datasets\"\n                    });\n                    if (selection_type === \"folder\") {\n                        var full_source = options.source + \"_folder\";\n                        this.chainCallImportingFolders({\n                            paths: paths,\n                            preserve_dirs: preserve_dirs,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    } else if (selection_type === \"file\") {\n                        var full_source = options.source + \"_file\";\n                        this.chainCallImportingUserdirFiles({\n                            paths: paths,\n                            file_type: file_type,\n                            dbkey: dbkey,\n                            link_data: link_data,\n                            space_to_tab: space_to_tab,\n                            to_posix_lines: to_posix_lines,\n                            source: full_source,\n                            tag_using_filenames: tag_using_filenames\n                        });\n                    }\n                }\n            },\n\n            fetchAndDisplayHistoryContents: function(history_id) {\n                var history_contents = new mod_library_model.HistoryContents({\n                    id: history_id\n                });\n                var self = this;\n                history_contents.fetch({\n                    success: function(history_contents) {\n                        var history_contents_template = self.templateHistoryContents();\n                        self.histories\n                            .get(history_id)\n                            .set({ contents: history_contents });\n                        self.modal.$el.find(\"#selected_history_content\").html(\n                            history_contents_template({\n                                history_contents: history_contents.models.reverse()\n                            })\n                        );\n                        self.modal.$el\n                            .find(\".history-import-select-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", true);\n                            });\n                        self.modal.$el\n                            .find(\".history-import-unselect-all\")\n                            .bind(\"click\", function() {\n                                $(\n                                    \"#selected_history_content [type=checkbox]\"\n                                ).prop(\"checked\", false);\n                            });\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            },\n\n            /**\n   * Import all selected datasets from history into the current folder.\n   */\n            addAllDatasetsFromHistory: function() {\n                var checked_hdas = this.modal.$el\n                    .find(\"#selected_history_content\")\n                    .find(\":checked\");\n                var history_item_ids = []; // can be hda or hdca\n                var history_item_types = [];\n                var items_to_add = [];\n                if (checked_hdas.length < 1) {\n                    mod_toastr.info(\"You must select some datasets first.\");\n                } else {\n                    this.modal.disableButton(\"Add\");\n                    checked_hdas.each(function() {\n                        var hid = $(this)\n                            .closest(\"li\")\n                            .data(\"id\");\n                        if (hid) {\n                            var item_type = $(this)\n                                .closest(\"li\")\n                                .data(\"name\");\n                            history_item_ids.push(hid);\n                            history_item_types.push(item_type);\n                        }\n                    });\n                    for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                        var history_item_id = history_item_ids[i];\n                        var folder_item = new mod_library_model.Item();\n                        folder_item.url =\n                            Galaxy.root +\n                            \"api/folders/\" +\n                            this.options.id +\n                            \"/contents\";\n                        if (history_item_types[i] === \"collection\") {\n                            folder_item.set({ from_hdca_id: history_item_id });\n                        } else {\n                            folder_item.set({ from_hda_id: history_item_id });\n                        }\n                        items_to_add.push(folder_item);\n                    }\n                    this.initChainCallControl({\n                        length: items_to_add.length,\n                        action: \"adding_datasets\"\n                    });\n                    this.chainCallAddingHdas(items_to_add);\n                }\n            },\n\n            /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n            chainCallImportingIntoHistory: function(\n                history_item_set,\n                history_name\n            ) {\n                var self = this;\n                var popped_item = history_item_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets imported into history. Click this to start analyzing it.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were imported into history.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                            \"\",\n                            {\n                                onclick: function() {\n                                    window.location = Galaxy.root;\n                                }\n                            }\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return true;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        content: popped_item.content,\n                        source: popped_item.source\n                    })\n                );\n\n                promise\n                    .done(function() {\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallImportingIntoHistory(\n                            history_item_set,\n                            history_name\n                        );\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingUserdirFiles: function(options) {\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected files imported into the current folder\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingUserdirFiles(options);\n                    });\n            },\n\n            /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n            chainCallImportingFolders: function(options) {\n                // TODO need to check which paths to call\n                var that = this;\n                var popped_item = options.paths.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected folders and their contents imported into the current folder.\"\n                        );\n                        Galaxy.modal.hide();\n                    } else {\n                        // TODO better error report\n                        mod_toastr.error(\"An error occured.\");\n                    }\n                    return true;\n                }\n                var promise = $.when(\n                    $.post(\n                        Galaxy.root +\n                            \"api/libraries/datasets?encoded_folder_id=\" +\n                            that.id +\n                            \"&source=\" +\n                            options.source +\n                            \"&path=\" +\n                            popped_item +\n                            \"&preserve_dirs=\" +\n                            options.preserve_dirs +\n                            \"&link_data=\" +\n                            options.link_data +\n                            \"&to_posix_lines=\" +\n                            options.to_posix_lines +\n                            \"&space_to_tab=\" +\n                            options.space_to_tab +\n                            \"&file_type=\" +\n                            options.file_type +\n                            \"&dbkey=\" +\n                            options.dbkey +\n                            \"&tag_using_filenames=\" +\n                            options.tag_using_filenames\n                    )\n                );\n                promise\n                    .done(function(response) {\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    })\n                    .fail(function() {\n                        that.options.chain_call_control.failed_number += 1;\n                        that.updateProgress();\n                        that.chainCallImportingFolders(options);\n                    });\n            },\n\n            /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n            chainCallAddingHdas: function(hdas_set) {\n                var self = this;\n                this.added_hdas = new mod_library_model.Folder();\n                var popped_item = hdas_set.pop();\n                if (typeof popped_item == \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\n                            \"Selected datasets from history added to the folder\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no datasets were added to the folder.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the datasets could not be added to the folder\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.added_hdas;\n                }\n                var promise = $.when(\n                    popped_item.save({\n                        from_hda_id: popped_item.get(\"from_hda_id\")\n                    })\n                );\n\n                promise\n                    .done(function(model) {\n                        Galaxy.libraries.folderListView.collection.add(model);\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallAddingHdas(hdas_set);\n                    });\n            },\n\n            /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n            chainCallDeletingItems: function(items_to_delete) {\n                var self = this;\n                this.deleted_items = new mod_library_model.Folder();\n                var item_to_delete = items_to_delete.pop();\n                if (typeof item_to_delete === \"undefined\") {\n                    if (this.options.chain_call_control.failed_number === 0) {\n                        mod_toastr.success(\"Selected items were deleted.\");\n                    } else if (\n                        this.options.chain_call_control.failed_number ===\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.error(\n                            \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    } else if (\n                        this.options.chain_call_control.failed_number <\n                        this.options.chain_call_control.total_number\n                    ) {\n                        mod_toastr.warning(\n                            \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                        );\n                    }\n                    Galaxy.modal.hide();\n                    return this.deleted_items;\n                }\n                item_to_delete\n                    .destroy()\n                    .done(function(item) {\n                        Galaxy.libraries.folderListView.collection.remove(\n                            item_to_delete.id\n                        );\n                        self.updateProgress();\n                        // add the deleted item to collection, triggers rendering\n                        if (\n                            Galaxy.libraries.folderListView.options\n                                .include_deleted\n                        ) {\n                            var updated_item = null;\n                            if (\n                                item.type === \"folder\" ||\n                                item.model_class === \"LibraryFolder\"\n                            ) {\n                                updated_item = new mod_library_model.FolderAsModel(\n                                    item\n                                );\n                            } else if (\n                                item.type === \"file\" ||\n                                item.model_class === \"LibraryDataset\"\n                            ) {\n                                updated_item = new mod_library_model.Item(item);\n                            } else {\n                                Galaxy.emit.error(\n                                    \"Unknown library item type found.\",\n                                    \"datalibs\"\n                                );\n                                Galaxy.emit.error(\n                                    item.type || item.model_class,\n                                    \"datalibs\"\n                                );\n                            }\n                            Galaxy.libraries.folderListView.collection.add(\n                                updated_item\n                            );\n                        }\n                        self.chainCallDeletingItems(items_to_delete);\n                    })\n                    .fail(function() {\n                        self.options.chain_call_control.failed_number += 1;\n                        self.updateProgress();\n                        self.chainCallDeletingItems(items_to_delete);\n                    });\n            },\n\n            /**\n   * Handles the click on 'show deleted' checkbox\n   */\n            checkIncludeDeleted: function(event) {\n                if (event.target.checked) {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: true\n                    });\n                } else {\n                    Galaxy.libraries.folderListView.fetchFolder({\n                        include_deleted: false\n                    });\n                }\n            },\n\n            /**\n   * Delete the selected items. Atomic. One by one.\n   */\n            deleteSelectedItems: function() {\n                var dataset_ids = [];\n                var folder_ids = [];\n                var $checkedValues = this.findCheckedRows();\n                if ($checkedValues.length === 0) {\n                    mod_toastr.info(\n                        \"You must select at least one item for deletion.\"\n                    );\n                } else {\n                    var template = this.templateDeletingItemsProgressBar();\n                    this.modal = Galaxy.modal;\n                    this.modal.show({\n                        closing_events: true,\n                        title: \"Deleting selected items\",\n                        body: template({}),\n                        buttons: {\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                    // init the control counters\n                    this.options.chain_call_control.total_number = 0;\n                    this.options.chain_call_control.failed_number = 0;\n                    $checkedValues.each(function() {\n                        var row_id = $(this)\n                            .closest(\"tr\")\n                            .data(\"id\");\n                        if (row_id !== undefined) {\n                            if (row_id.substring(0, 1) == \"F\") {\n                                folder_ids.push(row_id);\n                            } else {\n                                dataset_ids.push(row_id);\n                            }\n                        }\n                    });\n                    // init the progress bar\n                    var items_total = dataset_ids.length + folder_ids.length;\n                    this.progressStep = 100 / items_total;\n                    this.progress = 0;\n\n                    // prepare the dataset items to be added\n                    var items_to_delete = [];\n                    for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                        var dataset = new mod_library_model.Item({\n                            id: dataset_ids[i]\n                        });\n                        items_to_delete.push(dataset);\n                    }\n                    for (var i = folder_ids.length - 1; i >= 0; i--) {\n                        var folder = new mod_library_model.FolderAsModel({\n                            id: folder_ids[i]\n                        });\n                        items_to_delete.push(folder);\n                    }\n\n                    this.options.chain_call_control.total_number = items_total;\n                    // call the recursive function to call ajax one after each other (request FIFO queue)\n                    this.chainCallDeletingItems(items_to_delete);\n                }\n            },\n\n            showLocInfo: function() {\n                var library = null;\n                var that = this;\n                if (Galaxy.libraries.libraryListView !== null) {\n                    library = Galaxy.libraries.libraryListView.collection.get(\n                        this.options.parent_library_id\n                    );\n                    this.showLocInfoModal(library);\n                } else {\n                    library = new mod_library_model.Library({\n                        id: this.options.parent_library_id\n                    });\n                    library.fetch({\n                        success: function() {\n                            that.showLocInfoModal(library);\n                        },\n                        error: function(model, response) {\n                            if (typeof response.responseJSON !== \"undefined\") {\n                                mod_toastr.error(response.responseJSON.err_msg);\n                            } else {\n                                mod_toastr.error(\"An error occurred.\");\n                            }\n                        }\n                    });\n                }\n            },\n\n            showLocInfoModal: function(library) {\n                var that = this;\n                var template = this.templateLocInfoInModal();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Location Details\",\n                    body: template({ library: library, options: that.options }),\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            },\n\n            showImportModal: function(options) {\n                switch (options.source) {\n                    case \"history\":\n                        this.addFilesFromHistoryModal();\n                        break;\n                    case \"importdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"importdir\"\n                        });\n                        break;\n                    case \"path\":\n                        this.importFilesFromPathModal();\n                        break;\n                    case \"userdir\":\n                        this.importFilesFromGalaxyFolderModal({\n                            source: \"userdir\"\n                        });\n                        break;\n                    default:\n                        Galaxy.libraries.library_router.back();\n                        mod_toastr.error(\"Invalid import source.\");\n                        break;\n                }\n            },\n\n            /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n            showPageSizePrompt: function(e) {\n                e.preventDefault();\n                var folder_page_size = prompt(\n                    \"How many items per page do you want to see?\",\n                    Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                if (\n                    folder_page_size != null &&\n                    folder_page_size == parseInt(folder_page_size)\n                ) {\n                    Galaxy.libraries.preferences.set({\n                        folder_page_size: parseInt(folder_page_size)\n                    });\n                    Galaxy.libraries.folderListView.render({\n                        id: this.options.id,\n                        show_page: 1\n                    });\n                }\n            },\n\n            findCheckedRows: function() {\n                return $(\"#folder_list_body\").find(\":checked\");\n            },\n\n            templateToolBar: function() {\n                return _.template(\n                    [\n                        // container start\n                        '<div class=\"library_style_container\">',\n                        // toolbar start\n                        '<div id=\"library_toolbar\">',\n                        '<form class=\"form-inline\" role=\"form\">',\n                        \"<span><strong>DATA LIBRARIES</strong></span>\",\n                        // paginator will append here\n                        '<span class=\"library-paginator folder-paginator\"></span>',\n                        '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                        \"<label>\",\n                        '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                        \"</label>\",\n                        \"</div>\",\n                        '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                        \"</button>\",\n                        \"<% if(mutiple_add_dataset_options) { %>\",\n                        '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                        '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                        \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li class=\"divider\"></li>',\n                        '<li class=\"dropdown-header\">Admins only</li>',\n                        \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                        \"<% } %>\",\n                        \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"</div>\",\n                        \"<% } else { %>\",\n                        '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                        '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                        \"</a>\",\n                        \"<% } %>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                        '<span class=\"fa fa-book\"></span>',\n                        \"&nbsp;to History\",\n                        \"</button>\",\n                        '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                        '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                        '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                        \"</button>\",\n                        '<ul class=\"dropdown-menu\" role=\"menu\">',\n                        '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                        '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                        \"</ul>\",\n                        \"</div>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                        '<span class=\"fa fa-times\"></span> Delete</button>',\n                        '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                        '<span class=\"fa fa-info-circle\"></span>',\n                        \"&nbsp;Details\",\n                        \"</button>\",\n                        '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                        '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                        '<button class=\"primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-question-circle\"></span>',\n                        \"&nbsp;Help\",\n                        \"</button>\",\n                        \"</a>\",\n                        \"</span>\",\n                        \"</div>\",\n                        \"</form>\",\n                        // toolbar end\n                        '<div id=\"folder_items_element\">',\n                        \"</div>\",\n                        // paginator will append here\n                        '<div class=\"folder-paginator paginator-bottom\"></div>',\n                        // container end\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateLocInfoInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">library</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        '<td><%- library.get(\"name\") %></td>',\n                        \"</tr>\",\n                        '<% if(library.get(\"description\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        '<td><%- library.get(\"description\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>synopsis</td>\",\n                        '<td><%- library.get(\"synopsis\") %></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>created</td>\",\n                        '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        '<td><%- library.get(\"id\") %></td>',\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<table class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th style=\"width: 25%;\">folder</th>',\n                        \"<th></th>\",\n                        \"</thead>\",\n                        \"<tbody>\",\n                        \"<tr>\",\n                        \"<td>name</td>\",\n                        \"<td><%- options.folder_name %></td>\",\n                        \"</tr>\",\n                        '<% if(options.folder_description !== \"\") { %>',\n                        \"<tr>\",\n                        \"<td>description</td>\",\n                        \"<td><%- options.folder_description %></td>\",\n                        \"</tr>\",\n                        \"<% } %>\",\n                        \"<tr>\",\n                        \"<td>id</td>\",\n                        \"<td><%- options.id %></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateNewFolderInModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"new_folder_modal\">',\n                        \"<form>\",\n                        '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                        '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                        \"</form>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBulkImportInModal: function() {\n                return _.template(\n                    [\n                        \"<div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"Select history: \",\n                        '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                        \"<% _.each(histories, function(history) { %>\",\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        '<div class=\"library-modal-item\">',\n                        \"or create new: \",\n                        '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                        \"</input>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportIntoHistoryProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddingDatasetsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateDeletingItemsProgressBar: function() {\n                return _.template(\n                    [\n                        '<div class=\"import_text\">',\n                        \"</div>\",\n                        '<div class=\"progress\">',\n                        '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                        '<span class=\"completion_span\">0% Complete</span>',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateBrowserModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                        '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                        \"</label>\",\n                        '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                        '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                        \"</label>\",\n                        \"</div>\",\n                        '<div style=\"margin-bottom:1em;\">',\n                        '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"<hr />\",\n                        // append jstree object here\n                        '<div id=\"jstree_browser\">',\n                        \"</div>\",\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<br>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateImportPathModal: function() {\n                return _.template(\n                    [\n                        '<div id=\"file_browser_modal\">',\n                        '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                        '<div style=\"margin-bottom: 0.5em;\">',\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                        \"Preserve directory structure\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                        \"Link files instead of copying\",\n                        \"</label>\",\n                        \"<br>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                        \"Convert line endings to POSIX\",\n                        \"</label>\",\n                        '<label class=\"checkbox-inline\">',\n                        '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                        \"Convert spaces to tabs\",\n                        \"</label>\",\n                        \"</div>\",\n                        '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                        \"<hr />\",\n                        \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                        \"<div>\",\n                        'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                        'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                        \"</div>\",\n                        \"<div>\",\n                        '<label class=\"checkbox-inline tag-files\">',\n                        \"Tag datasets based on file names.\",\n                        '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                        \"</label>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateAddFilesFromHistory: function() {\n                return _.template(\n                    [\n                        '<div id=\"add_files_modal\">',\n                        \"<div>\",\n                        \"1.&nbsp;Select history:&nbsp;\",\n                        '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                        \"<% _.each(histories, function(history) { %>\", //history select box\n                        '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                        \"<% }); %>\",\n                        \"</select>\",\n                        \"</div>\",\n                        \"<br/>\",\n                        '<div id=\"selected_history_content\">',\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            templateHistoryContents: function() {\n                return _.template(\n                    [\n                        \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                        \"<div>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                        \"Select all\",\n                        \"</button>\",\n                        '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                        \"Unselect all\",\n                        \"</button>\",\n                        \"</div>\",\n                        \"<br>\",\n                        \"<ul>\",\n                        \"<% _.each(history_contents, function(history_item) { %>\",\n                        '<% if (history_item.get(\"deleted\") != true ) { %>',\n                        '<% var item_name = history_item.get(\"name\") %>',\n                        '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                        '<% var collection_type = history_item.get(\"collection_type\") %>',\n                        '<% if (collection_type === \"list\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        \"<label>\",\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } else { %>\",\n                        '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                        '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                        '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                        \"</span>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                        '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                        '<label title=\"<%= _.escape(item_name) %>\">',\n                        '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                        '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                        \"</label>\",\n                        \"</li>\",\n                        \"<% } %>\",\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ul>\"\n                    ].join(\"\")\n                );\n            },\n\n            templatePaginator: function() {\n                return _.template(\n                    [\n                        '<ul class=\"pagination pagination-sm\">',\n                        \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                        \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } else { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        \"<% } else { %>\", // we are on the first page\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                        \"<% } %>\",\n                        '<li class=\"active\">',\n                        '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                        \"</li>\",\n                        \"<% if ( ( show_page ) < page_count ) { %>\",\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } else { %>\",\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                        '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                        \"<% } %>\",\n                        \"</ul>\",\n                        \"<span>\",\n                        ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                        \"</span>\",\n                        \"<span>\",\n                        \" <%- total_items_count %> total\",\n                        \"</span>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderToolbarView: FolderToolbarView\n        };\n    }\n);\n"]}