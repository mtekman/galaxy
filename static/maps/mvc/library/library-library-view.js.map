{"version":3,"sources":["mvc/library/library-library-view.js"],"names":["define","mod_toastr","mod_library_model","mod_select","LibraryView","Backbone","View","extend","el","model","options","events","click .toolbtn_save_permissions","initialize","this","id","fetchLibrary","Library","that","fetch","success","show_permissions","showPermissions","error","response","responseJSON","onclick","err_msg","Galaxy","libraries","library_router","back","_","is_admin","remove","undefined","template","templateLibraryPermissions","set","is_unrestricted","prepareSelectBoxes","fail","user","isAdmin","$el","html","library","_serializeRoles","selected_roles","root","self","done","fetched_permissions","selected_access_library_roles","selected_add_item_roles","accessSelectObject","manageSelectObject","role_list","is_library_access","_createSelectOptions","i","select_options","push","minimumInputLength","placeholder","url","dataType","quietMillis","data","q","access_library_role_list","page","add_library_item_role_list","results","selected_modify_library_roles","more","modify_library_role_list","type","formatSelection","addSelectObject","element","callback","selected_manage_library_roles","initialData","modifySelectObject","makeDatasetPrivate","removeDatasetRestrictions","container","find","ids_list","length","roles_list","term","page_limit","add_ids","_extractIds","manage_ids","roles","formatResult","role","name","initSelection","$","val","split","each","item","init_data","dropdownCssClass","post","savePermissions","event","access_ids","select2","modify_ids","access_ids[]","add_ids[]","manage_ids[]","modify_ids[]","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-library-view.js","sourcesContent":["define(\n    [\"libs/toastr\", \"mvc/library/library-model\", \"mvc/ui/ui-select\"],\n    function(mod_toastr, mod_library_model, mod_select) {\n        var LibraryView = Backbone.View.extend({\n            el: \"#center\",\n\n            model: null,\n\n            options: {},\n\n            events: {\n                \"click .toolbtn_save_permissions\": \"savePermissions\"\n            },\n\n            initialize: function(options) {\n                this.options = _.extend(this.options, options);\n                if (this.options.id) {\n                    this.fetchLibrary();\n                }\n            },\n\n            fetchLibrary: function(options) {\n                this.options = _.extend(this.options, options);\n                this.model = new mod_library_model.Library({\n                    id: this.options.id\n                });\n                var that = this;\n                this.model.fetch({\n                    success: function() {\n                        if (that.options.show_permissions) {\n                            that.showPermissions();\n                        }\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(\n                                response.responseJSON.err_msg +\n                                    \" Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        } else {\n                            mod_toastr.error(\n                                \"An error occurred. Click this to go back.\",\n                                \"\",\n                                {\n                                    onclick: function() {\n                                        Galaxy.libraries.library_router.back();\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            },\n\n            showPermissions: function(options) {\n                this.options = _.extend(this.options, options);\n                $(\".tooltip\").remove();\n\n                if (this.options.fetched_permissions !== undefined) {\n                    if (\n                        this.options.fetched_permissions\n                            .access_library_role_list.length === 0\n                    ) {\n                        this.model.set({ is_unrestricted: true });\n                    } else {\n                        this.model.set({ is_unrestricted: false });\n                    }\n                }\n                var is_admin = false;\n                if (Galaxy.user) {\n                    is_admin = Galaxy.user.isAdmin();\n                }\n                var template = this.templateLibraryPermissions();\n                this.$el.html(\n                    template({ library: this.model, is_admin: is_admin })\n                );\n\n                var self = this;\n                $.get(\n                    Galaxy.root +\n                        \"api/libraries/\" +\n                        self.id +\n                        \"/permissions?scope=current\"\n                )\n                    .done(function(fetched_permissions) {\n                        self.prepareSelectBoxes({\n                            fetched_permissions: fetched_permissions\n                        });\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to fetch library permissions.\"\n                        );\n                    });\n\n                $(\"#center [data-toggle]\").tooltip();\n                //hack to show scrollbars\n                $(\"#center\").css(\"overflow\", \"auto\");\n            },\n\n            _serializeRoles: function(role_list) {\n                var selected_roles = [];\n                for (var i = 0; i < role_list.length; i++) {\n                    selected_roles.push(\n                        role_list[i][1] + \":\" + role_list[i][0]\n                    );\n                }\n                return selected_roles;\n            },\n\n            prepareSelectBoxes: function(options) {\n                this.options = _.extend(this.options, options);\n                var fetched_permissions = this.options.fetched_permissions;\n                var self = this;\n\n                var selected_access_library_roles = this._serializeRoles(\n                    fetched_permissions.access_library_role_list\n                );\n                var selected_add_item_roles = this._serializeRoles(\n                    fetched_permissions.add_library_item_role_list\n                );\n                var selected_manage_library_roles = this._serializeRoles(\n                    fetched_permissions.manage_library_role_list\n                );\n                var selected_modify_library_roles = this._serializeRoles(\n                    fetched_permissions.modify_library_role_list\n                );\n\n                self.accessSelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"access_perm\",\n                        selected_access_library_roles,\n                        true\n                    )\n                );\n                self.addSelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"add_perm\",\n                        selected_add_item_roles,\n                        false\n                    )\n                );\n                self.manageSelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"manage_perm\",\n                        selected_manage_library_roles,\n                        false\n                    )\n                );\n                self.modifySelectObject = new mod_select.View(\n                    this._createSelectOptions(\n                        this,\n                        \"modify_perm\",\n                        selected_modify_library_roles,\n                        false\n                    )\n                );\n            },\n\n            _createSelectOptions: function(\n                self,\n                id,\n                init_data,\n                is_library_access\n            ) {\n                is_library_access =\n                    is_library_access === true ? is_library_access : false;\n                var select_options = {\n                    minimumInputLength: 0,\n                    css: id,\n                    multiple: true,\n                    placeholder: \"Click to select a role\",\n                    container: self.$el.find(\"#\" + id),\n                    ajax: {\n                        url:\n                            Galaxy.root +\n                            \"api/libraries/\" +\n                            self.id +\n                            \"/permissions?scope=available&is_library_access=\" +\n                            is_library_access,\n                        dataType: \"json\",\n                        quietMillis: 100,\n                        data: function(term, page) {\n                            // page is the one-based page number tracked by Select2\n                            return {\n                                q: term, //search term\n                                page_limit: 10, // page size\n                                page: page // page number\n                            };\n                        },\n                        results: function(data, page) {\n                            var more = page * 10 < data.total; // whether or not there are more results available\n                            // notice we return the value of more so Select2 knows if more results can be loaded\n                            return { results: data.roles, more: more };\n                        }\n                    },\n                    formatResult: function roleFormatResult(role) {\n                        return role.name + \" type: \" + role.type;\n                    },\n\n                    formatSelection: function roleFormatSelection(role) {\n                        return role.name;\n                    },\n                    initSelection: function(element, callback) {\n                        // the input tag has a value attribute preloaded that points to a preselected role's id\n                        // this function resolves that id attribute to an object that select2 can render\n                        // using its formatResult renderer - that way the role name is shown preselected\n                        var data = [];\n                        $(element.val().split(\",\")).each(function() {\n                            var item = this.split(\":\");\n                            data.push({\n                                id: item[0],\n                                name: item[1]\n                            });\n                        });\n                        callback(data);\n                    },\n                    // initialData: init_data.join(','),\n                    initialData: init_data,\n                    dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n                };\n\n                return select_options;\n            },\n\n            makeDatasetPrivate: function() {\n                var self = this;\n                $.post(\n                    Galaxy.root +\n                        \"api/libraries/datasets/\" +\n                        self.id +\n                        \"/permissions?action=make_private\"\n                )\n                    .done(function(fetched_permissions) {\n                        self.model.set({ is_unrestricted: false });\n                        self.showPermissions({\n                            fetched_permissions: fetched_permissions\n                        });\n                        mod_toastr.success(\n                            \"The dataset is now private to you.\"\n                        );\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to make dataset private.\"\n                        );\n                    });\n            },\n\n            removeDatasetRestrictions: function() {\n                var self = this;\n                $.post(\n                    Galaxy.root +\n                        \"api/libraries/datasets/\" +\n                        self.id +\n                        \"/permissions?action=remove_restrictions\"\n                )\n                    .done(function(fetched_permissions) {\n                        self.model.set({ is_unrestricted: true });\n                        self.showPermissions({\n                            fetched_permissions: fetched_permissions\n                        });\n                        mod_toastr.success(\n                            \"Access to this dataset is now unrestricted.\"\n                        );\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to make dataset unrestricted.\"\n                        );\n                    });\n            },\n\n            _extractIds: function(roles_list) {\n                var ids_list = [];\n                for (var i = roles_list.length - 1; i >= 0; i--) {\n                    ids_list.push(roles_list[i].id);\n                }\n                return ids_list;\n            },\n            savePermissions: function(event) {\n                var self = this;\n\n                var access_ids = this._extractIds(\n                    this.accessSelectObject.$el.select2(\"data\")\n                );\n                var add_ids = this._extractIds(\n                    this.addSelectObject.$el.select2(\"data\")\n                );\n                var manage_ids = this._extractIds(\n                    this.manageSelectObject.$el.select2(\"data\")\n                );\n                var modify_ids = this._extractIds(\n                    this.modifySelectObject.$el.select2(\"data\")\n                );\n\n                $.post(\n                    Galaxy.root +\n                        \"api/libraries/\" +\n                        self.id +\n                        \"/permissions?action=set_permissions\",\n                    {\n                        \"access_ids[]\": access_ids,\n                        \"add_ids[]\": add_ids,\n                        \"manage_ids[]\": manage_ids,\n                        \"modify_ids[]\": modify_ids\n                    }\n                )\n                    .done(function(fetched_permissions) {\n                        //fetch dataset again\n                        self.showPermissions({\n                            fetched_permissions: fetched_permissions\n                        });\n                        mod_toastr.success(\"Permissions saved.\");\n                    })\n                    .fail(function() {\n                        mod_toastr.error(\n                            \"An error occurred while attempting to set library permissions.\"\n                        );\n                    });\n            },\n\n            templateLibraryPermissions: function() {\n                return _.template(\n                    [\n                        '<div class=\"library_style_container\">',\n                        '<div id=\"library_toolbar\">',\n                        '<a href=\"#\">',\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the list of Libraries\" class=\"btn btn-default primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-list\"/>',\n                        \"&nbsp;Libraries\",\n                        \"</button>\",\n                        \"</a>\",\n                        \"</div>\",\n                        \"<h1>\",\n                        'Library: <%= _.escape(library.get(\"name\")) %>',\n                        \"</h1>\",\n                        '<div class=\"alert alert-warning\">',\n                        \"<% if (is_admin) { %>\",\n                        \"You are logged in as an <strong>administrator</strong> therefore you can manage any library on this Galaxy instance. Please make sure you understand the consequences.\",\n                        \"<% } else { %>\",\n                        \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                        \"<% }%>\",\n                        \"</div>\",\n                        '<div class=\"dataset_table\">',\n                        \"<h2>Library permissions</h2>\",\n                        \"<h4>Roles that can access the library</h4>\",\n                        '<div id=\"access_perm\" class=\"access_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can access this library. If there are no access roles set on the library it is considered <strong>unrestricted</strong>.\",\n                        \"</div>\",\n                        \"<h4>Roles that can manage permissions on this library</h4>\",\n                        '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can manage permissions on this library (includes giving access).\",\n                        \"</div>\",\n                        \"<h4>Roles that can add items to this library</h4>\",\n                        '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can add items to this library (folders and datasets).\",\n                        \"</div>\",\n                        \"<h4>Roles that can modify this library</h4>\",\n                        '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                        '<div class=\"alert alert-info roles-selection\">',\n                        \"User with <strong>any</strong> of these roles can modify this library (name, synopsis, etc.).\",\n                        \"</div>\",\n                        '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications made on this page\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                        '<span class=\"fa fa-floppy-o\"/>',\n                        \"&nbsp;Save\",\n                        \"</button>\",\n                        \"</div>\",\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            LibraryView: LibraryView\n        };\n    }\n);\n"]}