{"version":3,"sources":["mvc/upload/upload-view.js"],"names":["define","options","nginx_upload_path","ftp_upload_site","default_genome","default_extension","width","auto","id","text","description","UploadViewDefault","UploadViewComposite","UploadViewCollection","list_extensions","extend","list_genomes","initialize","self","ui_button","onclick","preventDefault","this","setElement","Utils","$el","UploadButton","View","get","e","Galaxy","success","show","datatypes","model","composite_files","url","root","key","push","extension","genomes","description_url","sort","a","b","toLowerCase","b_text","a_text","datatypes_disable_auto","unshift","currHistoryPanel","setTimeout","current_user","user","default_view","composite_view","title_separator","modal","tabs","Tabs","add","title","collection_view","Modal","payload","tool_id","height","history_id","inputs","body","file_count","dbkey","file_type","currentFtp","it","prefix","index","toData","items","data","currentHistory","name","file","length","error_message","JSON","set","files","stringify"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-view.js","sourcesContent":["/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-modal\",\n        \"mvc/ui/ui-tabs\",\n        \"mvc/upload/upload-button\",\n        \"mvc/upload/default/default-view\",\n        \"mvc/upload/composite/composite-view\",\n        \"mvc/upload/collection/collection-view\"\n    ],\n    function(\n        Utils,\n        Modal,\n        Tabs,\n        UploadButton,\n        UploadViewDefault,\n        UploadViewComposite,\n        UploadViewCollection\n    ) {\n        return Backbone.View.extend({\n            options: {\n                nginx_upload_path: \"\",\n                ftp_upload_site: \"n/a\",\n                default_genome: \"?\",\n                default_extension: \"auto\",\n                height: 500,\n                width: 900,\n                auto: {\n                    id: \"auto\",\n                    text: \"Auto-detect\",\n                    description:\n                        \"This system will try to detect the file type automatically. If your file is not detected properly as one of the known formats, it most likely means that it has some format problems (e.g., different number of columns on different rows). You can still coerce the system to set your data to the format you think it should be.  You can also upload compressed files, which will automatically be decompressed.\"\n                }\n            },\n\n            // contains all available dataset extensions/types\n            list_extensions: [],\n\n            // contains all available genomes\n            list_genomes: [],\n\n            initialize: function(options) {\n                var self = this;\n                this.options = Utils.merge(options, this.options);\n\n                // create view for upload/progress button\n                this.ui_button = new UploadButton.View({\n                    onclick: function(e) {\n                        e.preventDefault();\n                        self.show();\n                    },\n                    onunload: function() {\n                        var percentage = self.ui_button.model.get(\n                            \"percentage\",\n                            0\n                        );\n                        if (percentage > 0 && percentage < 100) {\n                            return \"Several uploads are queued.\";\n                        }\n                    }\n                });\n\n                // set element to button view\n                this.setElement(this.ui_button.$el);\n\n                // load extensions\n                var self = this;\n                Utils.get({\n                    url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                    success: function(datatypes) {\n                        for (var key in datatypes) {\n                            self.list_extensions.push({\n                                id: datatypes[key].extension,\n                                text: datatypes[key].extension,\n                                description: datatypes[key].description,\n                                description_url: datatypes[key].description_url,\n                                composite_files: datatypes[key].composite_files\n                            });\n                        }\n                        self.list_extensions.sort(function(a, b) {\n                            var a_text = a.text && a.text.toLowerCase();\n                            var b_text = b.text && b.text.toLowerCase();\n                            return a_text > b_text\n                                ? 1\n                                : a_text < b_text ? -1 : 0;\n                        });\n                        if (!self.options.datatypes_disable_auto) {\n                            self.list_extensions.unshift(self.options.auto);\n                        }\n                    }\n                });\n\n                // load genomes\n                Utils.get({\n                    url: Galaxy.root + \"api/genomes\",\n                    success: function(genomes) {\n                        for (var key in genomes) {\n                            self.list_genomes.push({\n                                id: genomes[key][1],\n                                text: genomes[key][0]\n                            });\n                        }\n                        self.list_genomes.sort(function(a, b) {\n                            if (a.id == self.options.default_genome) {\n                                return -1;\n                            }\n                            if (b.id == self.options.default_genome) {\n                                return 1;\n                            }\n                            return a.text > b.text\n                                ? 1\n                                : a.text < b.text ? -1 : 0;\n                        });\n                    }\n                });\n            },\n\n            /** Show/hide upload dialog */\n            show: function() {\n                var self = this;\n                if (\n                    !Galaxy.currHistoryPanel ||\n                    !Galaxy.currHistoryPanel.model\n                ) {\n                    window.setTimeout(function() {\n                        self.show();\n                    }, 500);\n                    return;\n                }\n                this.current_user = Galaxy.user.id;\n                if (!this.modal) {\n                    this.tabs = new Tabs.View();\n                    this.default_view = new UploadViewDefault(this);\n                    this.tabs.add({\n                        id: \"regular\",\n                        title: \"Regular\",\n                        $el: this.default_view.$el\n                    });\n                    this.composite_view = new UploadViewComposite(this);\n                    this.tabs.add({\n                        id: \"composite\",\n                        title: \"Composite\",\n                        $el: this.composite_view.$el\n                    });\n                    this.collection_view = new UploadViewCollection(this);\n                    this.tabs.add({\n                        id: \"collection\",\n                        title: \"Collection\",\n                        $el: this.collection_view.$el\n                    });\n                    this.modal = new Modal.View({\n                        title: \"Download from web or upload from disk\",\n                        body: this.tabs.$el,\n                        height: this.options.height,\n                        width: this.options.width,\n                        closing_events: true,\n                        title_separator: false\n                    });\n                }\n                this.modal.show();\n            },\n\n            /** Refresh user and current history */\n            currentHistory: function() {\n                return (\n                    this.current_user && Galaxy.currHistoryPanel.model.get(\"id\")\n                );\n            },\n\n            /** Get ftp configuration */\n            currentFtp: function() {\n                return this.current_user && this.options.ftp_upload_site;\n            },\n\n            /**\n          * Package API data from array of models\n          * @param{Array} items - Upload items/rows filtered from a collection\n        */\n            toData: function(items, history_id) {\n                // create dictionary for data submission\n                var data = {\n                    payload: {\n                        tool_id: \"upload1\",\n                        history_id: history_id || this.currentHistory(),\n                        inputs: {}\n                    },\n                    files: [],\n                    error_message: null\n                };\n                // add upload tools input data\n                if (items && items.length > 0) {\n                    var inputs = {\n                        file_count: items.length,\n                        dbkey: items[0].get(\"genome\", \"?\"),\n                        file_type: items[0].get(\"extension\", \"auto\")\n                    };\n                    for (var index in items) {\n                        var it = items[index];\n                        it.set(\"status\", \"running\");\n                        if (it.get(\"file_size\") > 0) {\n                            var prefix = \"files_\" + index + \"|\";\n                            inputs[prefix + \"type\"] = \"upload_dataset\";\n                            inputs[prefix + \"space_to_tab\"] =\n                                (it.get(\"space_to_tab\") && \"Yes\") || null;\n                            inputs[prefix + \"to_posix_lines\"] =\n                                (it.get(\"to_posix_lines\") && \"Yes\") || null;\n                            inputs[prefix + \"dbkey\"] = it.get(\"genome\", null);\n                            inputs[prefix + \"file_type\"] = it.get(\n                                \"extension\",\n                                null\n                            );\n                            switch (it.get(\"file_mode\")) {\n                                case \"new\":\n                                    inputs[prefix + \"url_paste\"] = it.get(\n                                        \"url_paste\"\n                                    );\n                                    break;\n                                case \"ftp\":\n                                    inputs[prefix + \"ftp_files\"] = it.get(\n                                        \"file_path\"\n                                    );\n                                    break;\n                                case \"local\":\n                                    data.files.push({\n                                        name: prefix + \"file_data\",\n                                        file: it.get(\"file_data\")\n                                    });\n                            }\n                        } else {\n                            data.error_message = \"Upload content incomplete.\";\n                            it.set(\"status\", \"error\");\n                            it.set(\"info\", data.error_message);\n                            break;\n                        }\n                    }\n                    data.payload.inputs = JSON.stringify(inputs);\n                }\n                return data;\n            }\n        });\n    }\n);\n"]}