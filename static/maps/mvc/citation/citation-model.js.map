{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["define","parseBibtex","_l","_","ENTRY_TYPES_","BibtexParser","data","online","Citation","Backbone","Model","extend","baseMVC","LoggableMixin","defaults","content","initialize","parsed","this","attributes","err","errors","reduce","all","current","log","_fields","entry","rawFields","key","lowerKey","toLowerCase","value","entryType","fields","EntryType","undefined","BaseCitationCollection","Collection","urlRoot","partial","Galaxy","root","HistoryCitationCollection","model","url","ToolCitationCollection","history_id","tool_id"],"mappings":"aAAAA,QAAQ,cAAe,eAAgB,sBAAuB,SAC1DC,EADJD,EAKIE,GAKAC,EAASF,GAAYG,OAAcC,aAE/BC,EAAAA,OAAAA,EAAUF,cAFdG,OAAA,IAEID,KAAM,MAKV,IAIIE,EAAWC,SAASC,MAAMC,OAAOC,EAAQC,eAAeF,QAGxDG,cAPJ,WAOcA,UACNC,QAAS,IAKTC,WAAI,WACA,IAAAC,EACAA,IAEAA,EAAAhB,EAAAiB,KAAAC,WAAAJ,SACH,MAAAK,GACD,OAGI,GAAAH,EAAII,OAASJ,OAAOI,CAEnB,IAFDA,EAAAJ,EAAAI,OAAAC,OAAA,SAAAC,EAAAC,GAGA,OAAAD,EAAA,KAAAC,IACAN,KAAKO,IAAI,yBAA2BJ,GAOpC,GAFJH,KAAIQ,WACAR,KAAAS,MAAIC,EAAAA,MAAYX,EAAKU,SACrBT,KAAKS,MAAL,CACI,IAAAC,EAAYA,KAAAA,MAAUC,OACtB,IAAA,IAAIC,KAAAA,EAAeC,CACnB,IAAAC,EAAAJ,EAAAC,GACHC,EAAAD,EAAAE,cACJb,KAAAQ,QAAAI,GAAAE,KAIJC,UAtC8D,WAuC/DC,OAAQhB,KAAAS,MAAAT,KAAWS,MAAAQ,eAAAC,GAElBF,OAAA,WAzCL,OAAAhB,KAAAQ,WA+CIW,EAAyB5B,SAAS6B,WAK9B3B,OAAAC,EAAAC,eACA0B,QACAC,cA1DR,WAyDQD,QAASE,OAAOC,KAAO,MAK3BC,SAAAA,EACAC,MAAApC,IAkBJ,OACIA,SAAUA,EACVmC,0BAfCN,EAAA1B,QAJDkC,IAAK,WAOLC,OACA5B,KAAAqB,QAAA,cAAArB,KAAA6B,WAAA,gBAYAD,uBAbJT,EAAA1B,QAQAkC,IAAA,WALQ,OAAO3B,KAAKqB,QAAU,UAAYrB,KAAK8B,QAAU,cAQrDxC,SAAAA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["define([\"libs/bibtex\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    parseBibtex,\n    baseMVC,\n    _l\n) {\n    /* global Backbone */\n    // we use amd here to require, but bibtex uses a global or commonjs pattern.\n    // webpack will load via commonjs and plain requirejs will load as global. Check both\n    parseBibtex = parseBibtex || window.BibtexParser;\n\n    _.extend(parseBibtex.ENTRY_TYPES_, {\n        online: 998, // Galaxy MOD: Handle @online entries for preprints.\n        data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n    });\n\n    var logNamespace = \"citation\";\n    //==============================================================================\n    /** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\n    var Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        defaults: {\n            content: \"\"\n        },\n\n        initialize: function() {\n            var parsed;\n            try {\n                // TODO: to model.parse/.validate\n                parsed = parseBibtex(this.attributes.content);\n            } catch (err) {\n                return;\n            }\n            // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n            if (parsed.errors.length) {\n                // the gen. form of these errors seems to be [ line, col, char, error message ]\n                var errors = parsed.errors.reduce(function(all, current) {\n                    return all + \"; \" + current;\n                });\n                // throw new Error( 'Error parsing bibtex: ' + errors );\n                this.log(\"Error parsing bibtex: \" + errors);\n            }\n\n            this._fields = {};\n            this.entry = _.first(parsed.entries);\n            if (this.entry) {\n                var rawFields = this.entry.Fields;\n                for (var key in rawFields) {\n                    var value = rawFields[key];\n                    var lowerKey = key.toLowerCase();\n                    this._fields[lowerKey] = value;\n                }\n            }\n        },\n        entryType: function() {\n            return this.entry ? this.entry.EntryType : undefined;\n        },\n        fields: function() {\n            return this._fields;\n        }\n    });\n\n    //==============================================================================\n    /** @class Backbone collection of citations.\n */\n    var BaseCitationCollection = Backbone.Collection\n        .extend(baseMVC.LoggableMixin)\n        .extend({\n            _logNamespace: logNamespace,\n\n            /** root api url */\n            urlRoot: Galaxy.root + \"api\",\n            partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n            model: Citation\n        });\n\n    var HistoryCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return (\n                this.urlRoot + \"/histories/\" + this.history_id + \"/citations\"\n            );\n        }\n    });\n\n    var ToolCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return this.urlRoot + \"/tools/\" + this.tool_id + \"/citations\";\n        },\n        partial: false // If a tool has citations, assume they are complete.\n    });\n\n    //==============================================================================\n\n    return {\n        Citation: Citation,\n        HistoryCitationCollection: HistoryCitationCollection,\n        ToolCitationCollection: ToolCitationCollection\n    };\n});\n"]}