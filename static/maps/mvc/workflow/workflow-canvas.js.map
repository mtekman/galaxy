{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["define","CanvasManager","app","canvas_viewport","overview","this","cv","find","cc","ov","ScrollPanel","min_x","panel","max_y","$","extend","init_drag","prototype","x","y","self","min","width","move","max","Math","css","top","background-position-x","update_viewport_overlay","each","scroll_panel","x_adjust","bind","o","offset","p","position","y_adjust","left","e","d","offsetX","offsetY","draw_overview","fit_canvas_to_nodes","hasClass","removeClass","in_h","height","o_w","oc","o_h","new_x_offset","new_y_offset","workflow","pageY","in_w","op","offsetParent","opo","new_size","addClass","cc_pos","canvas_el","size","c","shift_h","cv_w","cv_h","shift_w","parent","get","getContext","attr","fillStyle","strokeStyle","node_element","lineWidth","ceil","node","errors","h","strokeRect","nodes","id","element","w","clearTimeout","pageX","undefined","workflow_outputs","panel_pos","length","panel_h","viewport","viewport_w","viewport_offset","p_min_x","panel_w","p_min_y","p_max_x","p_max_y","moved","nudge","close_dist","viewport_h","min_y","max_x","t","onmove","timeout","setTimeout","test","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["define([], function() {\n    function CanvasManager(app, canvas_viewport, overview) {\n        this.app = app;\n        this.cv = canvas_viewport;\n        this.cc = this.cv.find(\"#canvas-container\");\n        this.overview = overview;\n        this.oc = overview.find(\"#overview-canvas\");\n        this.ov = overview.find(\"#overview-viewport\");\n        // Make overview box draggable\n        this.init_drag();\n    }\n    $.extend(CanvasManager.prototype, {\n        init_drag: function() {\n            var self = this;\n            var move = function(x, y) {\n                x = Math.min(x, self.cv.width() / 2);\n                x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n                y = Math.min(y, self.cv.height() / 2);\n                y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n                self.cc.css({\n                    left: x,\n                    top: y\n                });\n                self.cv.css({\n                    \"background-position-x\": x,\n                    \"background-position-y\": y\n                });\n                self.update_viewport_overlay();\n            };\n            // Dragging within canvas background\n            this.cc.each(function() {\n                this.scroll_panel = new ScrollPanel(this);\n            });\n            var x_adjust, y_adjust;\n            this.cv\n                .bind(\"dragstart\", function() {\n                    var o = $(this).offset();\n                    var p = self.cc.position();\n                    y_adjust = p.top - o.top;\n                    x_adjust = p.left - o.left;\n                })\n                .bind(\"drag\", function(e, d) {\n                    move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n                })\n                .bind(\"dragend\", function() {\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            this.overview.click(function(e) {\n                if (self.overview.hasClass(\"blockaclick\")) {\n                    self.overview.removeClass(\"blockaclick\");\n                } else {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset =\n                            e.pageX -\n                            self.oc.offset().left -\n                            self.ov.width() / 2,\n                        new_y_offset =\n                            e.pageY -\n                            self.oc.offset().top -\n                            self.ov.height() / 2;\n                    move(\n                        -(new_x_offset / o_w * in_w),\n                        -(new_y_offset / o_h * in_h)\n                    );\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                }\n            });\n            // Dragging for overview pane\n            this.ov\n                .bind(\"drag\", function(e, d) {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = d.offsetX - self.overview.offset().left,\n                        new_y_offset = d.offsetY - self.overview.offset().top;\n                    move(\n                        -(new_x_offset / o_w * in_w),\n                        -(new_y_offset / o_h * in_h)\n                    );\n                })\n                .bind(\"dragend\", function() {\n                    self.overview.addClass(\"blockaclick\");\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            // Dragging for overview border (resize)\n            $(\"#overview-border\").bind(\"drag\", function(e, d) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max(\n                    op.width() - (d.offsetX - opo.left),\n                    op.height() - (d.offsetY - opo.top)\n                );\n                $(this).css({\n                    width: new_size,\n                    height: new_size\n                });\n                self.draw_overview();\n            });\n\n            /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n            $(\"#overview-border div\").bind(\"drag\", function() {});\n        },\n        update_viewport_overlay: function() {\n            var cc = this.cc,\n                cv = this.cv,\n                oc = this.oc,\n                ov = this.ov,\n                in_w = cc.width(),\n                in_h = cc.height(),\n                o_w = oc.width(),\n                o_h = oc.height(),\n                cc_pos = cc.position();\n            ov.css({\n                left: -(cc_pos.left / in_w * o_w),\n                top: -(cc_pos.top / in_h * o_h),\n                // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n                width: cv.width() / in_w * o_w - 2,\n                height: cv.height() / in_h * o_h - 2\n            });\n        },\n        draw_overview: function() {\n            var canvas_el = $(\"#overview-canvas\"),\n                size = canvas_el\n                    .parent()\n                    .parent()\n                    .width(),\n                c = canvas_el.get(0).getContext(\"2d\"),\n                in_w = $(\"#canvas-container\").width(),\n                in_h = $(\"#canvas-container\").height();\n            var o_h, shift_h, o_w, shift_w;\n            // Fit canvas into overview area\n            var cv_w = this.cv.width();\n            var cv_h = this.cv.height();\n            if (in_w < cv_w && in_h < cv_h) {\n                // Canvas is smaller than viewport\n                o_w = in_w / cv_w * size;\n                shift_w = (size - o_w) / 2;\n                o_h = in_h / cv_h * size;\n                shift_h = (size - o_h) / 2;\n            } else if (in_w < in_h) {\n                // Taller than wide\n                shift_h = 0;\n                o_h = size;\n                o_w = Math.ceil(o_h * in_w / in_h);\n                shift_w = (size - o_w) / 2;\n            } else {\n                // Wider than tall\n                o_w = size;\n                shift_w = 0;\n                o_h = Math.ceil(o_w * in_h / in_w);\n                shift_h = (size - o_h) / 2;\n            }\n            canvas_el.parent().css({\n                left: shift_w,\n                top: shift_h,\n                width: o_w,\n                height: o_h\n            });\n            canvas_el.attr(\"width\", o_w);\n            canvas_el.attr(\"height\", o_h);\n            // Draw overview\n            $.each(this.app.workflow.nodes, function(id, node) {\n                c.fillStyle = \"#D2C099\";\n                c.strokeStyle = \"#D8B365\";\n                c.lineWidth = 1;\n                var node_element = $(node.element),\n                    position = node_element.position(),\n                    x = position.left / in_w * o_w,\n                    y = position.top / in_h * o_h,\n                    w = node_element.width() / in_w * o_w,\n                    h = node_element.height() / in_h * o_h;\n                if (node.errors) {\n                    c.fillStyle = \"#FFCCCC\";\n                    c.strokeStyle = \"#AA6666\";\n                } else if (\n                    node.workflow_outputs !== undefined &&\n                    node.workflow_outputs.length > 0\n                ) {\n                    c.fillStyle = \"#E8A92D\";\n                    c.strokeStyle = \"#E8A92D\";\n                }\n                c.fillRect(x, y, w, h);\n                c.strokeRect(x, y, w, h);\n            });\n            this.update_viewport_overlay();\n        }\n    });\n\n    // FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\n    function ScrollPanel(panel) {\n        this.panel = panel;\n    }\n    $.extend(ScrollPanel.prototype, {\n        test: function(e, onmove) {\n            clearTimeout(this.timeout);\n            var x = e.pageX,\n                y = e.pageY,\n                // Panel size and position\n                panel = $(this.panel),\n                panel_pos = panel.position(),\n                panel_w = panel.width(),\n                panel_h = panel.height(),\n                // Viewport size and offset\n                viewport = panel.parent(),\n                viewport_w = viewport.width(),\n                viewport_h = viewport.height(),\n                viewport_offset = viewport.offset(),\n                // Edges of viewport (in page coordinates)\n                min_x = viewport_offset.left,\n                min_y = viewport_offset.top,\n                max_x = min_x + viewport.width(),\n                max_y = min_y + viewport.height(),\n                // Legal panel range\n                p_min_x = -(panel_w - viewport_w / 2),\n                p_min_y = -(panel_h - viewport_h / 2),\n                p_max_x = viewport_w / 2,\n                p_max_y = viewport_h / 2,\n                // Did the panel move?\n                moved = false,\n                // Constants\n                close_dist = 5,\n                nudge = 23;\n            if (x - close_dist < min_x) {\n                if (panel_pos.left < p_max_x) {\n                    var t = Math.min(nudge, p_max_x - panel_pos.left);\n                    panel.css(\"left\", panel_pos.left + t);\n                    moved = true;\n                }\n            } else if (x + close_dist > max_x) {\n                if (panel_pos.left > p_min_x) {\n                    var t = Math.min(nudge, panel_pos.left - p_min_x);\n                    panel.css(\"left\", panel_pos.left - t);\n                    moved = true;\n                }\n            } else if (y - close_dist < min_y) {\n                if (panel_pos.top < p_max_y) {\n                    var t = Math.min(nudge, p_max_y - panel_pos.top);\n                    panel.css(\"top\", panel_pos.top + t);\n                    moved = true;\n                }\n            } else if (y + close_dist > max_y) {\n                if (panel_pos.top > p_min_y) {\n                    var t = Math.min(nudge, panel_pos.top - p_min_x);\n                    panel.css(\"top\", panel_pos.top - t + \"px\");\n                    moved = true;\n                }\n            }\n            if (moved) {\n                // Keep moving even if mouse doesn't move\n                onmove();\n                var panel = this;\n                this.timeout = setTimeout(function() {\n                    panel.test(e, onmove);\n                }, 50);\n            }\n        },\n        stop: function(e, ui) {\n            clearTimeout(this.timeout);\n        }\n    });\n    return CanvasManager;\n});\n"]}