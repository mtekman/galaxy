{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","_addLabelAnnotation","form","options","model","attributes","workflow","input_id","node","input_element","trigger","name","label","fixed","value","annotation","area","_addSections","datatypes","post_job_actions","output_id","help","onchange","head","head_list","push","nodes","inputs","i","input","action","n","new_label","id","payload","set","d","key","extensions","input_terminals","input_terminal_names","a","pja_arg","unshift","p_id","j","expanded","action_arguments","output","getWorkflowOutput","visit","slice","_makeSection","output_terminals","type","String","Boolean","ignore","host","window","location","0","1","b","new_value","attemptUpdateOutputLabel","join","input_config","title","Tool","Default","Backbone","View","extend","initialize","self","this","merge","request","Galaxy","root","url","content_id","data","create","update_field_data","render","text_enable","text_disable","narrow","initial_errors","initialmodel","process","resolve","_customize","postchange","tool_id","tool_version","version","current_state","$","debug","success","update","errors","config_form","emit","response","reject","deepeach","indexOf","textify","__class__","collapsible_value","is_workflow","length","test_param","undefined","duplicate"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define(\n    [\"utils/utils\", \"mvc/form/form-view\", \"mvc/tool/tool-form-base\"],\n    function(Utils, Form, ToolFormBase) {\n        /** Default form wrapper for non-tool modules in the workflow editor. */\n        var Default = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                var node = options.node;\n                this.form = new Form(\n                    Utils.merge(options, {\n                        onchange: function() {\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/workflows/build_module\",\n                                data: {\n                                    id: node.id,\n                                    type: node.type,\n                                    content_id: node.content_id,\n                                    inputs: self.form.data.create()\n                                },\n                                success: function(data) {\n                                    node.update_field_data(data);\n                                }\n                            });\n                        }\n                    })\n                );\n                _addLabelAnnotation(this.form);\n                this.form.render();\n            }\n        });\n\n        /** Tool form wrapper for the workflow editor. */\n        var Tool = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                var node = options.node;\n                this.form = new ToolFormBase(\n                    Utils.merge(options, {\n                        text_enable: \"Set in Advance\",\n                        text_disable: \"Set at Runtime\",\n                        narrow: true,\n                        initial_errors: true,\n                        cls: \"ui-portlet-narrow\",\n                        initialmodel: function(process, form) {\n                            self._customize(form);\n                            process.resolve();\n                        },\n                        buildmodel: function(process, form) {\n                            form.model.get(\"postchange\")(process, form);\n                        },\n                        postchange: function(process, form) {\n                            var options = form.model.attributes;\n                            var current_state = {\n                                tool_id: options.id,\n                                tool_version: options.version,\n                                type: \"tool\",\n                                inputs: $.extend(true, {}, form.data.create())\n                            };\n                            Galaxy.emit.debug(\n                                \"tool-form-workflow::postchange()\",\n                                \"Sending current state.\",\n                                current_state\n                            );\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/workflows/build_module\",\n                                data: current_state,\n                                success: function(data) {\n                                    form.model.set(data.config_form);\n                                    self._customize(form);\n                                    form.update(data.config_form);\n                                    form.errors(data.config_form);\n                                    // This hasn't modified the workflow, just returned\n                                    // module information for the tool to update the workflow\n                                    // state stored on the client with. User needs to save\n                                    // for this to take effect.\n                                    node.update_field_data(data);\n                                    Galaxy.emit.debug(\n                                        \"tool-form-workflow::postchange()\",\n                                        \"Received new model.\",\n                                        data\n                                    );\n                                    process.resolve();\n                                },\n                                error: function(response) {\n                                    Galaxy.emit.debug(\n                                        \"tool-form-workflow::postchange()\",\n                                        \"Refresh request failed.\",\n                                        response\n                                    );\n                                    process.reject();\n                                }\n                            });\n                        }\n                    })\n                );\n            },\n\n            _customize: function(form) {\n                var options = form.model.attributes;\n                Utils.deepeach(options.inputs, function(input) {\n                    if (input.type) {\n                        if (\n                            [\"data\", \"data_collection\"].indexOf(input.type) !=\n                            -1\n                        ) {\n                            input.type = \"hidden\";\n                            input.info =\n                                \"Data input '\" +\n                                input.name +\n                                \"' (\" +\n                                Utils.textify(input.extensions) +\n                                \")\";\n                            input.value = { __class__: \"RuntimeValue\" };\n                        } else if (!input.fixed) {\n                            input.collapsible_value = {\n                                __class__: \"RuntimeValue\"\n                            };\n                            input.is_workflow =\n                                (input.options && input.options.length == 0) ||\n                                [\"integer\", \"float\"].indexOf(input.type) != -1;\n                        }\n                    }\n                });\n                Utils.deepeach(options.inputs, function(input) {\n                    input.type == \"conditional\" &&\n                        (input.test_param.collapsible_value = undefined);\n                });\n                _addSections(form);\n                _addLabelAnnotation(form);\n            }\n        });\n\n        /** Augments the module form definition by adding label and annotation fields */\n        function _addLabelAnnotation(form) {\n            var options = form.model.attributes;\n            var workflow = options.workflow;\n            var node = options.node;\n            options.inputs.unshift({\n                type: \"text\",\n                name: \"__annotation\",\n                label: \"Annotation\",\n                fixed: true,\n                value: node.annotation,\n                area: true,\n                help:\n                    \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n            });\n            options.inputs.unshift({\n                type: \"text\",\n                name: \"__label\",\n                label: \"Label\",\n                value: node.label,\n                help: \"Add a step label.\",\n                fixed: true,\n                onchange: function(new_label) {\n                    var duplicate = false;\n                    for (var i in workflow.nodes) {\n                        var n = workflow.nodes[i];\n                        if (\n                            n.label &&\n                            n.label == new_label &&\n                            n.id != node.id\n                        ) {\n                            duplicate = true;\n                            break;\n                        }\n                    }\n                    var input_id = form.data.match(\"__label\");\n                    var input_element = form.element_list[input_id];\n                    input_element.model.set(\n                        \"error_text\",\n                        duplicate &&\n                            \"Duplicate label. Please fix this before saving the workflow.\"\n                    );\n                    form.trigger(\"change\");\n                }\n            });\n        }\n\n        /** Builds all sub sections */\n        function _addSections(form) {\n            var options = form.model.attributes;\n            var inputs = options.inputs;\n            var datatypes = options.datatypes;\n            var node = options.node;\n            var workflow = options.workflow;\n            var post_job_actions = node.post_job_actions;\n            var output_id =\n                node.output_terminals && Object.keys(node.output_terminals)[0];\n\n            /** Visit input nodes and enrich by name/value pairs from server data */\n            function visit(head, head_list) {\n                head_list = head_list || [];\n                head_list.push(head);\n                for (var i in head.inputs) {\n                    var input = head.inputs[i];\n                    var action = input.action;\n                    if (action) {\n                        input.name = \"pja__\" + output_id + \"__\" + input.action;\n                        if (input.pja_arg) {\n                            input.name += \"__\" + input.pja_arg;\n                        }\n                        if (input.payload) {\n                            for (var p_id in input.payload) {\n                                input.payload[input.name + \"__\" + p_id] =\n                                    input.payload[p_id];\n                                delete input.payload[p_id];\n                            }\n                        }\n                        var d = post_job_actions[input.action + output_id];\n                        if (d) {\n                            for (var j in head_list) {\n                                head_list[j].expanded = true;\n                            }\n                            if (input.pja_arg) {\n                                input.value =\n                                    (d.action_arguments &&\n                                        d.action_arguments[input.pja_arg]) ||\n                                    input.value;\n                            } else {\n                                input.value = \"true\";\n                            }\n                        }\n                    }\n                    input.inputs && visit(input, head_list.slice(0));\n                }\n            }\n\n            /** Builds sub section with step actions/annotation */\n            function _makeSection(output_id, datatypes) {\n                var extensions = [];\n                var input_terminal_names = [];\n                for (var key in datatypes) {\n                    extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n                }\n                for (key in node.input_terminals) {\n                    input_terminal_names.push(node.input_terminals[key].name);\n                }\n                extensions.sort(function(a, b) {\n                    return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n                });\n                extensions.unshift({\n                    0: \"Sequences\",\n                    1: \"Sequences\"\n                });\n                extensions.unshift({\n                    0: \"Roadmaps\",\n                    1: \"Roadmaps\"\n                });\n                extensions.unshift({\n                    0: \"Leave unchanged\",\n                    1: \"__empty__\"\n                });\n                var output;\n                var input_config = {\n                    title: \"Configure Output: '\" + output_id + \"'\",\n                    type: \"section\",\n                    flat: true,\n                    inputs: [\n                        {\n                            label: \"Label\",\n                            type: \"text\",\n                            value:\n                                ((output = node.getWorkflowOutput(output_id)) &&\n                                    output.label) ||\n                                \"\",\n                            help:\n                                \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                            onchange: function(new_value) {\n                                workflow.attemptUpdateOutputLabel(\n                                    node,\n                                    output_id,\n                                    new_value\n                                );\n                            }\n                        },\n                        {\n                            action: \"RenameDatasetAction\",\n                            pja_arg: \"newname\",\n                            label: \"Rename dataset\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help:\n                                'This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>' +\n                                input_terminal_names.join(\", \") +\n                                \"</strong>.\"\n                        },\n                        {\n                            action: \"ChangeDatatypeAction\",\n                            pja_arg: \"newtype\",\n                            label: \"Change datatype\",\n                            type: \"select\",\n                            ignore: \"__empty__\",\n                            value: \"__empty__\",\n                            options: extensions,\n                            help:\n                                \"This action will change the datatype of the output to the indicated value.\"\n                        },\n                        {\n                            action: \"TagDatasetAction\",\n                            pja_arg: \"tags\",\n                            label: \"Add Tags\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help: \"This action will set tags for the dataset.\"\n                        },\n                        {\n                            action: \"RemoveTagDatasetAction\",\n                            pja_arg: \"tags\",\n                            label: \"Remove Tags\",\n                            type: \"text\",\n                            value: \"\",\n                            ignore: \"\",\n                            help:\n                                \"This action will remove tags for the dataset.\"\n                        },\n                        {\n                            title: \"Assign columns\",\n                            type: \"section\",\n                            flat: true,\n                            inputs: [\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"chromCol\",\n                                    label: \"Chrom column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"startCol\",\n                                    label: \"Start column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"endCol\",\n                                    label: \"End column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"strandCol\",\n                                    label: \"Strand column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                },\n                                {\n                                    action: \"ColumnSetAction\",\n                                    pja_arg: \"nameCol\",\n                                    label: \"Name column\",\n                                    type: \"integer\",\n                                    value: \"\",\n                                    ignore: \"\"\n                                }\n                            ],\n                            help:\n                                \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                        }\n                    ]\n                };\n                visit(input_config);\n                return input_config;\n            }\n\n            if (output_id) {\n                inputs.push({\n                    name: \"pja__\" + output_id + \"__EmailAction\",\n                    label: \"Email notification\",\n                    type: \"boolean\",\n                    value: String(\n                        Boolean(post_job_actions[\"EmailAction\" + output_id])\n                    ),\n                    ignore: \"false\",\n                    help:\n                        \"An email notification will be sent when the job has completed.\",\n                    payload: {\n                        host: window.location.host\n                    }\n                });\n                inputs.push({\n                    name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n                    label: \"Output cleanup\",\n                    type: \"boolean\",\n                    value: String(\n                        Boolean(\n                            post_job_actions[\n                                \"DeleteIntermediatesAction\" + output_id\n                            ]\n                        )\n                    ),\n                    ignore: \"false\",\n                    help:\n                        \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n                });\n                for (var i in node.output_terminals) {\n                    inputs.push(_makeSection(i, datatypes));\n                }\n            }\n        }\n\n        return {\n            Default: Default,\n            Tool: Tool\n        };\n    }\n);\n"]}