{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["define","TerminalMappingView","tagName","initialize","Terminals","Connector","Backbone","View","extend","tooltip","className","bind","options","this","model","isCollection","title","$el","show","_","render","mapOver","hide","mouseleave","events","onMouseEnter","terminal","e","onMouseLeave","connected","css","resetMapping","TerminalView","setupMappingView","terminalMappingView","terminalMapping","terminalElements","el","BaseInputTerminalView","input","terminalForInput","multiple","node","name","dropinit","dropstart","drop","hover","onDropInit","drag","hasClass","d","$","canAccept","connectors","proxy","inner_color","onDropEnd","onDrop","length","redraw","element","x","destroy","remove","appendTo","append","offset","left","each","t","InputCollectionTerminalView","terminalMappingClass","terminalMappingViewClass","InputTerminalMappingView","width","InputCollectionTerminal","BaseOutputTerminalView","TerminalMapping","output","dragstart","dragend","po","Globals","canvas_manager","onmove","onDragStart","available","addClass","output_terminals","h","c","dragging","connect","offsetParent","connector","y","offsetY","top","update_viewport_overlay","scroll_panel","test","terminalForOutput","type","datatypes","OutputTerminal","OutputCollectionTerminalView","collection_type","collection_type_source","removeClass","get","stop","InputTerminalView","OutputTerminalView","extensions","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["define(\n    [\n        \"mvc/workflow/workflow-globals\",\n        \"mvc/workflow/workflow-terminals\",\n        \"mvc/workflow/workflow-connector\"\n    ],\n    function(Globals, Terminals, Connector) {\n        var TerminalMappingView = Backbone.View.extend({\n            tagName: \"div\",\n            className: \"fa-icon-button fa fa-folder-o\",\n            initialize: function(options) {\n                var mapText = \"Run tool in parallel over collection\";\n                this.$el.tooltip({ delay: 500, title: mapText });\n                this.model.bind(\"change\", _.bind(this.render, this));\n            },\n            render: function() {\n                if (this.model.mapOver.isCollection) {\n                    this.$el.show();\n                } else {\n                    this.$el.hide();\n                }\n            }\n        });\n\n        var InputTerminalMappingView = TerminalMappingView.extend({\n            events: {\n                click: \"onClick\",\n                mouseenter: \"onMouseEnter\",\n                mouseleave: \"onMouseLeave\"\n            },\n            onMouseEnter: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    this.$el.css(\"color\", \"red\");\n                }\n            },\n            onMouseLeave: function(e) {\n                this.$el.css(\"color\", \"black\");\n            },\n            onClick: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    // TODO: Consider prompting...\n                    model.terminal.resetMapping();\n                }\n            }\n        });\n\n        var TerminalView = Backbone.View.extend({\n            setupMappingView: function(terminal) {\n                var terminalMapping = new this.terminalMappingClass({\n                    terminal: terminal\n                });\n                var terminalMappingView = new this.terminalMappingViewClass({\n                    model: terminalMapping\n                });\n                terminalMappingView.render();\n                terminal.terminalMappingView = terminalMappingView;\n                this.terminalMappingView = terminalMappingView;\n            },\n            terminalElements: function() {\n                if (this.terminalMappingView) {\n                    return [this.terminalMappingView.el, this.el];\n                } else {\n                    return [this.el];\n                }\n            }\n        });\n\n        var BaseInputTerminalView = TerminalView.extend({\n            className: \"terminal input-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var input = options.input;\n                var name = input.name;\n                var terminal = this.terminalForInput(input);\n                if (!terminal.multiple) {\n                    this.setupMappingView(terminal);\n                }\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.input_terminals[name] = terminal;\n            },\n            events: {\n                dropinit: \"onDropInit\",\n                dropstart: \"onDropStart\",\n                dropend: \"onDropEnd\",\n                drop: \"onDrop\",\n                hover: \"onHover\"\n            },\n            onDropInit: function(e, d) {\n                var terminal = this.el.terminal;\n                // Accept a dragable if it is an output terminal and has a\n                // compatible type\n                return (\n                    $(d.drag).hasClass(\"output-terminal\") &&\n                    terminal.canAccept(d.drag.terminal)\n                );\n            },\n            onDropStart: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n                }\n            },\n            onDropEnd: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n                }\n            },\n            onDrop: function(e, d) {\n                var terminal = this.el.terminal;\n                new Connector(d.drag.terminal, terminal).redraw();\n            },\n            onHover: function() {\n                var element = this.el;\n                var terminal = element.terminal;\n                // If connected, create a popup to allow disconnection\n                if (terminal.connectors.length > 0) {\n                    // Create callout\n                    var t = $(\"<div class='callout'></div>\")\n                        .css({ display: \"none\" })\n                        .appendTo(\"body\")\n                        .append(\n                            $(\"<div class='button'></div>\").append(\n                                $(\"<div/>\")\n                                    .addClass(\"fa-icon-button fa fa-times\")\n                                    .click(function() {\n                                        $.each(terminal.connectors, function(\n                                            _,\n                                            x\n                                        ) {\n                                            if (x) {\n                                                x.destroy();\n                                            }\n                                        });\n                                        t.remove();\n                                    })\n                            )\n                        )\n                        .bind(\"mouseleave\", function() {\n                            $(this).remove();\n                        });\n                    // Position it and show\n                    t\n                        .css({\n                            top: $(element).offset().top - 2,\n                            left: $(element).offset().left - t.width(),\n                            \"padding-right\": $(element).width()\n                        })\n                        .show();\n                }\n            }\n        });\n\n        var InputTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var InputCollectionTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputCollectionTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var BaseOutputTerminalView = TerminalView.extend({\n            className: \"terminal output-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var output = options.output;\n                var name = output.name;\n                var terminal = this.terminalForOutput(output);\n                this.setupMappingView(terminal);\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.output_terminals[name] = terminal;\n            },\n            events: {\n                drag: \"onDrag\",\n                dragstart: \"onDragStart\",\n                dragend: \"onDragEnd\"\n            },\n            onDrag: function(e, d) {\n                var onmove = function() {\n                    var po = $(d.proxy)\n                            .offsetParent()\n                            .offset(),\n                        x = d.offsetX - po.left,\n                        y = d.offsetY - po.top;\n                    $(d.proxy).css({ left: x, top: y });\n                    d.proxy.terminal.redraw();\n                    // FIXME: global\n                    Globals.canvas_manager.update_viewport_overlay();\n                };\n                onmove();\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.test(e, onmove);\n            },\n            onDragStart: function(e, d) {\n                $(d.available).addClass(\"input-terminal-active\");\n                // Save PJAs in the case of change datatype actions.\n                Globals.workflow.check_changes_in_active_form();\n                // Drag proxy div\n                var h = $(\n                    '<div class=\"drag-terminal\" style=\"position: absolute;\"></div>'\n                )\n                    .appendTo(\"#canvas-container\")\n                    .get(0);\n                // Terminal and connection to display noodle while dragging\n                h.terminal = new Terminals.OutputTerminal({ element: h });\n                var c = new Connector();\n                c.dragging = true;\n                c.connect(this.el.terminal, h.terminal);\n                return h;\n            },\n            onDragEnd: function(e, d) {\n                var connector = d.proxy.terminal.connectors[0];\n                // check_changes_in_active_form may change the state and cause a\n                // the connection to have already been destroyed. There must be better\n                // ways to handle this but the following check fixes some serious GUI\n                // bugs for now.\n                if (connector) {\n                    connector.destroy();\n                }\n                $(d.proxy).remove();\n                $(d.available).removeClass(\"input-terminal-active\");\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.stop();\n            }\n        });\n\n        var OutputTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var type = output.extensions;\n                var terminal = new Terminals.OutputTerminal({\n                    element: this.el,\n                    datatypes: type\n                });\n                return terminal;\n            }\n        });\n\n        var OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var collection_type = output.collection_type;\n                var collection_type_source = output.collection_type_source;\n                var terminal = new Terminals.OutputCollectionTerminal({\n                    element: this.el,\n                    collection_type: collection_type,\n                    collection_type_source: collection_type_source,\n                    datatypes: output.extensions\n                });\n                return terminal;\n            }\n        });\n\n        return {\n            InputTerminalView: InputTerminalView,\n            OutputTerminalView: OutputTerminalView,\n            InputCollectionTerminalView: InputCollectionTerminalView,\n            OutputCollectionTerminalView: OutputCollectionTerminalView\n        };\n    }\n);\n"]}