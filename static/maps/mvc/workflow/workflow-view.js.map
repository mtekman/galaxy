{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["define","tool_menu_frame","$","Node","WorkflowIcons","Ui","Toastr","reset_tool_search","initValue","contents","search_input","document","this","removeClass","find","iconStyle","hide","show","$icon","$to_el","each","attr","hasClass","extend","options","self","check_changes_in_active_form","workflow","window","val","add_node_icon","nodeType","addClass","before","Backbone","hide_modal","show_overview","jStorage","set","css","scroll_to_nodes","top","hide_overview","width","cv","left","success_callback","urls","show_modal","Ok","has_changes","rectify_workflow_outputs","Utils","request","url","Galaxy","click","id","focus","select","to_simple","success","data","body","text","message","errors","length","i","v","value","appendTo","errlist","append","clearTimeout","timer","name","stored","showWorkflowParameters","setTimeout","tool_search","error","response","err_msg","keyup","is","next","q","get","ajax","s","map","n","index","parent","ext_to_class_name","datatypes_mapping","class_to_classes","draw_overview","step","this_label","no_visible_tools","step_id","workflow_save_as","location","root","canvas_manager","Globals","WorkflowCanvas","Close","datatypes","rename_name","type","workflow_data","async","responseText","ext_to_type","_workflowLoadAjax","Cancel","reset","from_simple","edit_workflow_outputs","node_key","node","details","new_content","output_terminals","_","isWorkflowOutput","output","m","upgrade_message","nodes","workflowNode","Continue","overview_size","undefined","Save","save_current_workflow","new_size","Math","workflow_name","onbeforeunload","fail","alert","last_expanded","height","clear_active_node","Auto Re-layout","$section","layout","fit_canvas_to_nodes","copy_into_workflow","workflow_index","do_close","upgrade_messages","bind","e","d","beforeSubmit","offsetParent","show_message","offset","max","op","offsetX","opo","offsetY","cc","load_workflow","workflowId","dataType","workflows","_moduleInitAjax","_buildToolPanelWorkflows","wrap","init_field_data","activate_node","slideUp","slideDown","create_node","async_save_text","add_node_for_subworkflow","annotate_async","display_pja","active_node","addlist","out_terminal","copy","ButtonIcon","icon","cls","tooltip","onclick","action_type","post_job_actions","target","active_form_has_changes","step_count","buttons","modal","Copy","$add","form_matches","matches","on","latest_id","action_arguments","arg_matches","workflow_parameters","k","element","new_parameter_content","wf_parm_container","vv","content","$container","remove_all","debug","Workflow","scrollTop","prebuildNode","$title","$f","content_id","cache","request_data","update_field_data","o","title","x","y","po","add_node_for_module","pja","get_pja_form","action_to_rem","closest","children","remove","display_pja_list","pja_list","display_file_list","new_pja","output_name","parameter_re","wf_parm_box","config_form","inputs","deepeach","match","concat","action_argument","inArray","push","substring","html","showAttributes","showForm","$el","form_type","FormWrappers","form","emit","isSubType","child","type_to_type","title_text","scrollLeft","tmp","destroy","position","p","prependTo","node_changed","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["define(\"mvc/workflow/workflow-globals\", {});\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/workflow/workflow-globals\",\n        \"mvc/workflow/workflow-manager\",\n        \"mvc/workflow/workflow-canvas\",\n        \"mvc/workflow/workflow-node\",\n        \"mvc/workflow/workflow-icons\",\n        \"mvc/workflow/workflow-forms\",\n        \"mvc/ui/ui-misc\",\n        \"utils/async-save-text\",\n        \"libs/toastr\",\n        \"ui/editable-text\"\n    ],\n    function(\n        Utils,\n        Globals,\n        Workflow,\n        WorkflowCanvas,\n        Node,\n        WorkflowIcons,\n        FormWrappers,\n        Ui,\n        async_save_text,\n        Toastr\n    ) {\n        // Reset tool search to start state.\n        function reset_tool_search(initValue) {\n            // Function may be called in top frame or in tool_menu_frame;\n            // in either case, get the tool menu frame.\n            var tool_menu_frame = $(\"#galaxy_tools\").contents();\n            if (tool_menu_frame.length === 0) {\n                tool_menu_frame = $(document);\n                // Remove classes that indicate searching is active.\n                $(this).removeClass(\"search_active\");\n                tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n                // Reset visibility of tools and labels.\n                tool_menu_frame.find(\".toolSectionBody\").hide();\n                tool_menu_frame.find(\".toolTitle\").show();\n                tool_menu_frame.find(\".toolPanelLabel\").show();\n                tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n                    if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                        // Default action.\n                        $(this).show();\n                    } else if ($(this).hasClass(\"user_pref_visible\")) {\n                        $(this).show();\n                    }\n                });\n                tool_menu_frame.find(\"#search-no-results\").hide();\n\n                // Reset search input.\n                tool_menu_frame.find(\"#search-spinner\").hide();\n                if (initValue) {\n                    var search_input = tool_menu_frame.find(\n                        \"#tool-search-query\"\n                    );\n                    search_input.val(\"search tools\");\n                }\n            }\n        }\n\n        function add_node_icon($to_el, nodeType) {\n            var iconStyle = WorkflowIcons[nodeType];\n            if (iconStyle) {\n                var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(\n                    iconStyle\n                );\n                $to_el.before($icon);\n            }\n        }\n\n        // create form view\n        return Backbone.View.extend({\n            initialize: function(options) {\n                var self = (Globals.app = this);\n                this.options = options;\n                this.urls = (options && options.urls) || {};\n                var close_editor = function() {\n                    self.workflow.check_changes_in_active_form();\n                    if (workflow && self.workflow.has_changes) {\n                        var do_close = function() {\n                            window.onbeforeunload = undefined;\n                            window.document.location = self.urls.workflow_index;\n                        };\n                        window.show_modal(\n                            \"Close workflow editor\",\n                            \"There are unsaved changes to your workflow which will be lost.\",\n                            {\n                                Cancel: hide_modal,\n                                \"Save Changes\": function() {\n                                    save_current_workflow(null, do_close);\n                                }\n                            },\n                            {\n                                \"Don't Save\": do_close\n                            }\n                        );\n                    } else {\n                        window.document.location = self.urls.workflow_index;\n                    }\n                };\n                var save_current_workflow = function(\n                    eventObj,\n                    success_callback\n                ) {\n                    show_message(\"Saving workflow\", \"progress\");\n                    self.workflow.check_changes_in_active_form();\n                    if (!self.workflow.has_changes) {\n                        hide_modal();\n                        if (success_callback) {\n                            success_callback();\n                        }\n                        return;\n                    }\n                    self.workflow.rectify_workflow_outputs();\n                    Utils.request({\n                        url: Galaxy.root + \"api/workflows/\" + self.options.id,\n                        type: \"PUT\",\n                        data: { workflow: self.workflow.to_simple() },\n                        success: function(data) {\n                            var body = $(\"<div/>\").text(data.message);\n                            if (data.errors) {\n                                body.addClass(\"warningmark\");\n                                var errlist = $(\"<ul/>\");\n                                $.each(data.errors, function(i, v) {\n                                    $(\"<li/>\")\n                                        .text(v)\n                                        .appendTo(errlist);\n                                });\n                                body.append(errlist);\n                            } else {\n                                body.addClass(\"donemark\");\n                            }\n                            self.workflow.name = data.name;\n                            self.workflow.has_changes = false;\n                            self.workflow.stored = true;\n                            self.showWorkflowParameters();\n                            if (data.errors) {\n                                window.show_modal(\"Saving workflow\", body, {\n                                    Ok: hide_modal\n                                });\n                            } else {\n                                success_callback && success_callback();\n                                hide_modal();\n                            }\n                        },\n                        error: function(response) {\n                            window.show_modal(\n                                \"Saving workflow failed.\",\n                                response.err_msg,\n                                { Ok: hide_modal }\n                            );\n                        }\n                    });\n                };\n\n                // Init searching.\n                $(\"#tool-search-query\")\n                    .click(function() {\n                        $(this).focus();\n                        $(this).select();\n                    })\n                    .keyup(function() {\n                        // Remove italics.\n                        $(this).css(\"font-style\", \"normal\");\n                        // Don't update if same value as last time\n                        if (this.value.length < 3) {\n                            reset_tool_search(false);\n                        } else if (this.value != this.lastValue) {\n                            // Add class to denote that searching is active.\n                            $(this).addClass(\"search_active\");\n                            // input.addClass(config.loadingClass);\n                            // Add '*' to facilitate partial matching.\n                            var q = this.value;\n                            // Stop previous ajax-request\n                            if (this.timer) {\n                                clearTimeout(this.timer);\n                            }\n                            // Start a new ajax-request in X ms\n                            $(\"#search-spinner\").show();\n                            this.timer = setTimeout(function() {\n                                $.get(\n                                    self.urls.tool_search,\n                                    { q: q },\n                                    function(data) {\n                                        // input.removeClass(config.loadingClass);\n                                        // Show live-search if results and search-term aren't empty\n                                        $(\"#search-no-results\").hide();\n                                        // Hide all tool sections.\n                                        $(\".toolSectionWrapper\").hide();\n                                        // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                        $(\".toolSectionWrapper\")\n                                            .find(\".toolTitle\")\n                                            .hide();\n                                        if (data.length != 0) {\n                                            // Map tool ids to element ids and join them.\n                                            var s = $.map(data, function(n, i) {\n                                                return \"link-\" + n;\n                                            });\n                                            // First pass to show matching tools and their parents.\n                                            $(s).each(function(index, id) {\n                                                // Add class to denote match.\n                                                $(\"[id='\" + id + \"']\")\n                                                    .parent()\n                                                    .addClass(\"search_match\");\n                                                $(\"[id='\" + id + \"']\")\n                                                    .parent()\n                                                    .show()\n                                                    .parent()\n                                                    .parent()\n                                                    .show()\n                                                    .parent()\n                                                    .show();\n                                            });\n                                            // Hide labels that have no visible children.\n                                            $(\n                                                \".toolPanelLabel\"\n                                            ).each(function() {\n                                                var this_label = $(this);\n                                                var next = this_label.next();\n                                                var no_visible_tools = true;\n                                                // Look through tools following label and, if none are visible, hide label.\n                                                while (\n                                                    next.length !== 0 &&\n                                                    next.hasClass(\"toolTitle\")\n                                                ) {\n                                                    if (next.is(\":visible\")) {\n                                                        no_visible_tools = false;\n                                                        break;\n                                                    } else {\n                                                        next = next.next();\n                                                    }\n                                                }\n                                                if (no_visible_tools) {\n                                                    this_label.hide();\n                                                }\n                                            });\n                                        } else {\n                                            $(\"#search-no-results\").show();\n                                        }\n                                        $(\"#search-spinner\").hide();\n                                    },\n                                    \"json\"\n                                );\n                            }, 400);\n                        }\n                        this.lastValue = this.value;\n                    });\n\n                // Canvas overview management\n                this.canvas_manager = Globals.canvas_manager = new WorkflowCanvas(\n                    this,\n                    $(\"#canvas-viewport\"),\n                    $(\"#overview\")\n                );\n\n                // Initialize workflow state\n                this.reset();\n\n                // get available datatypes for post job action options\n                this.datatypes = JSON.parse(\n                    $.ajax({\n                        url: Galaxy.root + \"api/datatypes\",\n                        async: false\n                    }).responseText\n                );\n\n                // get datatype mapping options\n                this.datatypes_mapping = JSON.parse(\n                    $.ajax({\n                        url: Galaxy.root + \"api/datatypes/mapping\",\n                        async: false\n                    }).responseText\n                );\n\n                // set mapping sub lists\n                this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n                this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n                // Load workflow definition\n                this._workflowLoadAjax(self.options.id, {\n                    success: function(data) {\n                        self.reset();\n                        self.workflow.from_simple(data, true);\n                        self.workflow.has_changes = false;\n                        self.workflow.fit_canvas_to_nodes();\n                        self.scroll_to_nodes();\n                        self.canvas_manager.draw_overview();\n                        // Determine if any parameters were 'upgraded' and provide message\n                        var upgrade_message = \"\";\n                        _.each(data.steps, function(step, step_id) {\n                            var details = \"\";\n                            if (step.errors) {\n                                details += \"<li>\" + step.errors + \"</li>\";\n                            }\n                            _.each(data.upgrade_messages[step_id], function(m) {\n                                details += \"<li>\" + m + \"</li>\";\n                            });\n                            if (details) {\n                                upgrade_message +=\n                                    \"<li>Step \" +\n                                    (parseInt(step_id, 10) + 1) +\n                                    \": \" +\n                                    self.workflow.nodes[step_id].name +\n                                    \"<ul>\" +\n                                    details +\n                                    \"</ul></li>\";\n                            }\n                        });\n                        if (upgrade_message) {\n                            window.show_modal(\n                                \"Issues loading this workflow\",\n                                \"Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>\" +\n                                    upgrade_message +\n                                    \"</ul></p>\",\n                                { Continue: hide_modal }\n                            );\n                        } else {\n                            hide_modal();\n                        }\n                        self.showWorkflowParameters();\n                    },\n                    beforeSubmit: function(data) {\n                        show_message(\"Loading workflow\", \"progress\");\n                    }\n                });\n\n                window.make_popupmenu &&\n                    make_popupmenu($(\"#workflow-options-button\"), {\n                        Save: save_current_workflow,\n                        \"Save As\": workflow_save_as,\n                        Run: function() {\n                            window.location =\n                                Galaxy.root +\n                                \"workflow/run?id=\" +\n                                self.options.id;\n                        },\n                        \"Edit Attributes\": function() {\n                            self.workflow.clear_active_node();\n                        },\n                        \"Auto Re-layout\": layout_editor,\n                        Close: close_editor\n                    });\n\n                /******************************************** Issue 3000*/\n                function workflow_save_as() {\n                    var body = $(\n                        '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                            '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n                    );\n                    window.show_modal(\"Save As a New Workflow\", body, {\n                        OK: function() {\n                            var rename_name =\n                                $(\"#workflow_rename\").val().length > 0\n                                    ? $(\"#workflow_rename\").val()\n                                    : \"SavedAs_\" + self.workflow.name;\n                            var rename_annotation =\n                                $(\"#wf_annotation\").val().length > 0\n                                    ? $(\"#wf_annotation\").val()\n                                    : \"\";\n                            $.ajax({\n                                url: self.urls.workflow_save_as,\n                                type: \"POST\",\n                                data: {\n                                    workflow_name: rename_name,\n                                    workflow_annotation: rename_annotation,\n                                    workflow_data: function() {\n                                        return JSON.stringify(\n                                            self.workflow.to_simple()\n                                        );\n                                    }\n                                }\n                            })\n                                .done(function(id) {\n                                    window.onbeforeunload = undefined;\n                                    window.location =\n                                        Galaxy.root +\n                                        \"workflow/editor?id=\" +\n                                        id;\n                                    hide_modal();\n                                })\n                                .fail(function() {\n                                    hide_modal();\n                                    alert(\n                                        \"Saving this workflow failed. Please contact this site's administrator.\"\n                                    );\n                                });\n                        },\n                        Cancel: hide_modal\n                    });\n                }\n\n                function edit_workflow_outputs() {\n                    self.workflow.clear_active_node();\n                    $(\".right-content\").hide();\n                    var new_content = \"\";\n                    for (var node_key in self.workflow.nodes) {\n                        var node = self.workflow.nodes[node_key];\n                        if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                            new_content +=\n                                \"<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step \" +\n                                node.id +\n                                \" - \" +\n                                node.name +\n                                \"</div>\";\n                            for (var ot_key in node.output_terminals) {\n                                var output = node.output_terminals[ot_key];\n                                if (node.isWorkflowOutput(output.name)) {\n                                    new_content +=\n                                        \"<p>\" +\n                                        output.name +\n                                        \"<input type='checkbox' name='\" +\n                                        node.id +\n                                        \"|\" +\n                                        output.name +\n                                        \"' checked /></p>\";\n                                } else {\n                                    new_content +=\n                                        \"<p>\" +\n                                        output.name +\n                                        \"<input type='checkbox' name='\" +\n                                        node.id +\n                                        \"|\" +\n                                        output.name +\n                                        \"' /></p>\";\n                                }\n                            }\n                            new_content += \"</div>\";\n                        }\n                    }\n                    $(\"#output-fill-area\").html(new_content);\n                    $(\"#output-fill-area input\").bind(\"click\", function() {\n                        var node_id = this.name.split(\"|\")[0];\n                        var workflowNode = this.workflow.nodes[node_id];\n                        var output_name = this.name.split(\"|\")[1];\n                        if (this.checked) {\n                            workflowNode.addWorkflowOutput(output_name);\n                        } else {\n                            workflowNode.removeWorkflowOutput(output_name);\n                        }\n                        self.workflow.has_changes = true;\n                    });\n                    $(\"#workflow-output-area\").show();\n                }\n\n                function layout_editor() {\n                    self.workflow.layout();\n                    self.workflow.fit_canvas_to_nodes();\n                    self.scroll_to_nodes();\n                    self.canvas_manager.draw_overview();\n                }\n\n                // On load, set the size to the pref stored in local storage if it exists\n                var overview_size = $.jStorage.get(\"overview-size\");\n                if (overview_size !== undefined) {\n                    $(\"#overview-border\").css({\n                        width: overview_size,\n                        height: overview_size\n                    });\n                }\n\n                // Show viewport on load unless pref says it's off\n                if ($.jStorage.get(\"overview-off\")) {\n                    hide_overview();\n                } else {\n                    show_overview();\n                }\n\n                // Stores the size of the overview into local storage when it's resized\n                $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n                    var op = $(this).offsetParent();\n                    var opo = op.offset();\n                    var new_size = Math.max(\n                        op.width() - (d.offsetX - opo.left),\n                        op.height() - (d.offsetY - opo.top)\n                    );\n                    $.jStorage.set(\"overview-size\", new_size + \"px\");\n                });\n\n                function show_overview() {\n                    $.jStorage.set(\"overview-off\", false);\n                    $(\"#overview-border\").css(\"right\", \"0px\");\n                    $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n                }\n\n                function hide_overview() {\n                    $.jStorage.set(\"overview-off\", true);\n                    $(\"#overview-border\").css(\"right\", \"20000px\");\n                    $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n                }\n\n                // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n                $(\"#close-viewport\").click(function() {\n                    if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                        hide_overview();\n                    } else {\n                        show_overview();\n                    }\n                });\n\n                // Unload handler\n                window.onbeforeunload = function() {\n                    if (workflow && self.workflow.has_changes) {\n                        return \"There are unsaved changes to your workflow which will be lost.\";\n                    }\n                };\n\n                this.options.workflows.length > 0 &&\n                    $(\"#left\")\n                        .find(\".toolMenu\")\n                        .append(this._buildToolPanelWorkflows());\n\n                // Tool menu\n                $(\"div.toolSectionBody\").hide();\n                $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n                var last_expanded = null;\n                $(\"div.toolSectionTitle\").each(function() {\n                    var body = $(this).next(\"div.toolSectionBody\");\n                    $(this).click(function() {\n                        if (body.is(\":hidden\")) {\n                            if (last_expanded) last_expanded.slideUp(\"fast\");\n                            last_expanded = body;\n                            body.slideDown(\"fast\");\n                        } else {\n                            body.slideUp(\"fast\");\n                            last_expanded = null;\n                        }\n                    });\n                });\n\n                // Rename async.\n                async_save_text(\n                    \"workflow-name\",\n                    \"workflow-name\",\n                    self.urls.rename_async,\n                    \"new_name\"\n                );\n\n                // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n                $(\"#workflow-tag\").click(function() {\n                    $(\".tag-area\").click();\n                    return false;\n                });\n                // Annotate async.\n                async_save_text(\n                    \"workflow-annotation\",\n                    \"workflow-annotation\",\n                    self.urls.annotate_async,\n                    \"new_annotation\",\n                    25,\n                    true,\n                    4\n                );\n            },\n\n            _buildToolPanelWorkflows: function() {\n                var self = this;\n                var $section = $(\n                    '<div class=\"toolSectionWrapper\">' +\n                        '<div class=\"toolSectionTitle\">' +\n                        '<a href=\"#\"><span>Workflows</span></a>' +\n                        \"</div>\" +\n                        '<div class=\"toolSectionBody\">' +\n                        '<div class=\"toolSectionBg\"/>' +\n                        \"</div>\" +\n                        \"</div>\"\n                );\n                _.each(this.options.workflows, function(workflow) {\n                    if (workflow.id !== self.options.id) {\n                        var copy = new Ui.ButtonIcon({\n                            icon: \"fa fa-copy\",\n                            cls: \"ui-button-icon-plain\",\n                            tooltip: \"Copy and insert individual steps\",\n                            onclick: function() {\n                                if (workflow.step_count < 2) {\n                                    self.copy_into_workflow(\n                                        workflow.id,\n                                        workflow.name\n                                    );\n                                } else {\n                                    // don't ruin the workflow by adding 50 steps unprompted.\n                                    Galaxy.modal.show({\n                                        title: \"Warning\",\n                                        body:\n                                            \"This will copy \" +\n                                            workflow.step_count +\n                                            \" new steps into your workflow.\",\n                                        buttons: {\n                                            Cancel: function() {\n                                                Galaxy.modal.hide();\n                                            },\n                                            Copy: function() {\n                                                Galaxy.modal.hide();\n                                                self.copy_into_workflow(\n                                                    workflow.id,\n                                                    workflow.name\n                                                );\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                        var $add = $(\"<a/>\")\n                            .attr(\"href\", \"#\")\n                            .html(workflow.name)\n                            .on(\"click\", function() {\n                                self.add_node_for_subworkflow(\n                                    workflow.latest_id,\n                                    workflow.name\n                                );\n                            });\n                        $section.find(\".toolSectionBg\").append(\n                            $(\"<div/>\")\n                                .addClass(\"toolTitle\")\n                                .append($add)\n                                .append(copy.$el)\n                        );\n                    }\n                });\n                return $section;\n            },\n\n            copy_into_workflow: function(workflowId) {\n                // Load workflow definition\n                var self = this;\n                this._workflowLoadAjax(workflowId, {\n                    success: function(data) {\n                        self.workflow.from_simple(data, false);\n                        // Determine if any parameters were 'upgraded' and provide message\n                        var upgrade_message = \"\";\n                        $.each(data.upgrade_messages, function(k, v) {\n                            upgrade_message +=\n                                \"<li>Step \" +\n                                (parseInt(k, 10) + 1) +\n                                \": \" +\n                                self.workflow.nodes[k].name +\n                                \"<ul>\";\n                            $.each(v, function(i, vv) {\n                                upgrade_message += \"<li>\" + vv + \"</li>\";\n                            });\n                            upgrade_message += \"</ul></li>\";\n                        });\n                        if (upgrade_message) {\n                            window.show_modal(\n                                \"Subworkflow embedded with changes\",\n                                \"Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>\" +\n                                    upgrade_message +\n                                    \"</ul>\",\n                                { Continue: hide_modal }\n                            );\n                        } else {\n                            hide_modal();\n                        }\n                    },\n                    beforeSubmit: function(data) {\n                        show_message(\"Importing workflow\", \"progress\");\n                    }\n                });\n            },\n\n            // Global state for the whole workflow\n            reset: function() {\n                this.workflow && this.workflow.remove_all();\n                this.workflow = Globals.workflow = new Workflow(\n                    this,\n                    $(\"#canvas-container\")\n                );\n            },\n\n            scroll_to_nodes: function() {\n                var cv = $(\"#canvas-viewport\");\n                var cc = $(\"#canvas-container\");\n                var top, left;\n                if (cc.width() < cv.width()) {\n                    left = (cv.width() - cc.width()) / 2;\n                } else {\n                    left = 0;\n                }\n                if (cc.height() < cv.height()) {\n                    top = (cv.height() - cc.height()) / 2;\n                } else {\n                    top = 0;\n                }\n                cc.css({ left: left, top: top });\n            },\n\n            _workflowLoadAjax: function(workflowId, options) {\n                $.ajax(\n                    Utils.merge(options, {\n                        url: this.urls.load_workflow,\n                        data: { id: workflowId, _: \"true\" },\n                        dataType: \"json\",\n                        cache: false\n                    })\n                );\n            },\n\n            _moduleInitAjax: function(node, request_data) {\n                var self = this;\n                Utils.request({\n                    type: \"POST\",\n                    url: Galaxy.root + \"api/workflows/build_module\",\n                    data: request_data,\n                    success: function(data) {\n                        node.init_field_data(data);\n                        node.update_field_data(data);\n                        self.workflow.activate_node(node);\n                    }\n                });\n            },\n\n            // Add a new step to the workflow by tool id\n            add_node_for_tool: function(id, title) {\n                var node = this.workflow.create_node(\"tool\", title, id);\n                this._moduleInitAjax(node, {\n                    type: \"tool\",\n                    tool_id: id,\n                    _: \"true\"\n                });\n            },\n\n            // Add a new step to the workflow by tool id\n            add_node_for_subworkflow: function(id, title) {\n                var node = this.workflow.create_node(\"subworkflow\", title, id);\n                this._moduleInitAjax(node, {\n                    type: \"subworkflow\",\n                    content_id: id,\n                    _: \"true\"\n                });\n            },\n\n            add_node_for_module: function(type, title) {\n                var node = this.workflow.create_node(type, title);\n                this._moduleInitAjax(node, { type: type, _: \"true\" });\n            },\n\n            // This function preloads how to display known pja's.\n            display_pja: function(pja, node) {\n                // DBTODO SANITIZE INPUTS.\n                var self = this;\n                $(\"#pja_container\").append(get_pja_form(pja, node));\n                $(\n                    \"#pja_container>.toolForm:last>.toolFormTitle>.buttons\"\n                ).click(function() {\n                    var action_to_rem = $(this)\n                        .closest(\".toolForm\", \".action_tag\")\n                        .children(\".action_tag:first\")\n                        .text();\n                    $(this)\n                        .closest(\".toolForm\")\n                        .remove();\n                    delete self\n                        .workflow.active_node.post_job_actions[action_to_rem];\n                    self.workflow.active_form_has_changes = true;\n                });\n            },\n\n            display_pja_list: function() {\n                return pja_list;\n            },\n\n            display_file_list: function(node) {\n                var addlist =\n                    \"<select id='node_data_list' name='node_data_list'>\";\n                for (var out_terminal in node.output_terminals) {\n                    addlist +=\n                        \"<option value='\" +\n                        out_terminal +\n                        \"'>\" +\n                        out_terminal +\n                        \"</option>\";\n                }\n                addlist += \"</select>\";\n                return addlist;\n            },\n\n            new_pja: function(action_type, target, node) {\n                if (node.post_job_actions === undefined) {\n                    //New tool node, set up dict.\n                    node.post_job_actions = {};\n                }\n                if (node.post_job_actions[action_type + target] === undefined) {\n                    var new_pja = {};\n                    new_pja.action_type = action_type;\n                    new_pja.output_name = target;\n                    node.post_job_actions[action_type + target] = null;\n                    node.post_job_actions[action_type + target] = new_pja;\n                    display_pja(new_pja, node);\n                    this.workflow.active_form_has_changes = true;\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n\n            showWorkflowParameters: function() {\n                var parameter_re = /\\$\\{.+?\\}/g;\n                var workflow_parameters = [];\n                var wf_parm_container = $(\"#workflow-parameters-container\");\n                var wf_parm_box = $(\"#workflow-parameters-box\");\n                var new_parameter_content = \"\";\n                var matches = [];\n                $.each(this.workflow.nodes, function(k, node) {\n                    if (node.config_form && node.config_form.inputs) {\n                        Utils.deepeach(node.config_form.inputs, function(d) {\n                            if (typeof d.value == \"string\") {\n                                var form_matches = d.value.match(parameter_re);\n                                if (form_matches) {\n                                    matches = matches.concat(form_matches);\n                                }\n                            }\n                        });\n                    }\n                    if (node.post_job_actions) {\n                        $.each(node.post_job_actions, function(k, pja) {\n                            if (pja.action_arguments) {\n                                $.each(pja.action_arguments, function(\n                                    k,\n                                    action_argument\n                                ) {\n                                    var arg_matches = action_argument.match(\n                                        parameter_re\n                                    );\n                                    if (arg_matches) {\n                                        matches = matches.concat(arg_matches);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    if (matches) {\n                        $.each(matches, function(k, element) {\n                            if (\n                                $.inArray(element, workflow_parameters) === -1\n                            ) {\n                                workflow_parameters.push(element);\n                            }\n                        });\n                    }\n                });\n                if (workflow_parameters && workflow_parameters.length !== 0) {\n                    $.each(workflow_parameters, function(k, element) {\n                        new_parameter_content +=\n                            \"<div>\" +\n                            element.substring(2, element.length - 1) +\n                            \"</div>\";\n                    });\n                    wf_parm_container.html(new_parameter_content);\n                    wf_parm_box.show();\n                } else {\n                    wf_parm_container.html(new_parameter_content);\n                    wf_parm_box.hide();\n                }\n            },\n\n            showAttributes: function() {\n                $(\".right-content\").hide();\n                $(\"#edit-attributes\").show();\n            },\n\n            showForm: function(content, node) {\n                var self = this;\n                var cls = \"right-content\";\n                var id = cls + \"-\" + node.id;\n                var $container = $(\"#\" + cls);\n                if (content && $container.find(\"#\" + id).length == 0) {\n                    var $el = $('<div id=\"' + id + '\" class=\"' + cls + '\"/>');\n                    content.node = node;\n                    content.workflow = this.workflow;\n                    content.datatypes = this.datatypes;\n                    content.icon = WorkflowIcons[node.type];\n                    content.cls = \"ui-portlet-narrow\";\n                    if (node) {\n                        var form_type =\n                            node.type == \"tool\" ? \"Tool\" : \"Default\";\n                        $el.append(\n                            new FormWrappers[form_type](content).form.$el\n                        );\n                        $container.append($el);\n                    } else {\n                        Galaxy.emit.debug(\n                            \"workflow-view::initialize()\",\n                            \"Node not found in workflow.\"\n                        );\n                    }\n                }\n                $(\".\" + cls).hide();\n                $container.find(\"#\" + id).show();\n                $container.show();\n                $container.scrollTop();\n            },\n\n            isSubType: function(child, parent) {\n                child = this.ext_to_type[child];\n                parent = this.ext_to_type[parent];\n                return (\n                    this.type_to_type[child] &&\n                    parent in this.type_to_type[child]\n                );\n            },\n\n            prebuildNode: function(type, title_text, content_id) {\n                var self = this;\n                var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n                var $title = $(\n                    \"<div class='toolFormTitle unselectable'><span class='nodeTitle'>\" +\n                        title_text +\n                        \"</div></div>\"\n                );\n                add_node_icon($title.find(\".nodeTitle\"), type);\n                $f.append($title);\n                $f.css(\"left\", $(window).scrollLeft() + 20);\n                $f.css(\"top\", $(window).scrollTop() + 20);\n                $f.append($(\"<div class='toolFormBody'></div>\"));\n                var node = new Node(this, { element: $f });\n                node.type = type;\n                node.content_id = content_id;\n                var tmp =\n                    \"<div><img height='16' align='middle' src='\" +\n                    Galaxy.root +\n                    \"static/images/loading_small_white_bg.gif'/> loading tool info...</div>\";\n                $f.find(\".toolFormBody\").append(tmp);\n                // Fix width to computed width\n                // Now add floats\n                var buttons = $(\n                    \"<div class='buttons' style='float: right;'></div>\"\n                );\n                buttons.append(\n                    $(\"<div/>\")\n                        .addClass(\"fa-icon-button fa fa-times\")\n                        .click(function(e) {\n                            node.destroy();\n                        })\n                );\n                // Place inside container\n                $f.appendTo(\"#canvas-container\");\n                // Position in container\n                var o = $(\"#canvas-container\").position();\n                var p = $(\"#canvas-container\").parent();\n                var width = $f.width();\n                var height = $f.height();\n                $f.css({\n                    left: -o.left + p.width() / 2 - width / 2,\n                    top: -o.top + p.height() / 2 - height / 2\n                });\n                buttons.prependTo($f.find(\".toolFormTitle\"));\n                width += buttons.width() + 10;\n                $f.css(\"width\", width);\n                $f\n                    .bind(\"dragstart\", function() {\n                        self.workflow.activate_node(node);\n                    })\n                    .bind(\"dragend\", function() {\n                        self.workflow.node_changed(this);\n                        self.workflow.fit_canvas_to_nodes();\n                        self.canvas_manager.draw_overview();\n                    })\n                    .bind(\"dragclickonly\", function() {\n                        self.workflow.activate_node(node);\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        // Move\n                        var po = $(this)\n                                .offsetParent()\n                                .offset(),\n                            x = d.offsetX - po.left,\n                            y = d.offsetY - po.top;\n                        $(this).css({ left: x, top: y });\n                        // Redraw\n                        $(this)\n                            .find(\".terminal\")\n                            .each(function() {\n                                this.terminal.redraw();\n                            });\n                    });\n                return node;\n            }\n        });\n    }\n);\n"]}