{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["define","initialize","_","TerminalViews","DataViews","Backbone","tool_body","extend","options","this","newInputsDiv","appendTo","terminalViews","Math","max","$el","width","outputViews","find","remove","renderToolLabel","render","css","min","output_width","text","node","label","name","renderToolErrors","updateMaxWidth","errors","addClass","removeClass","$","skipResize","newWidth","addRule","append","addDataInput","terminalViewClass","input_type","terminalView","input","terminal","update","InputTerminalView","nodeView","inputView","DataInputView","terminalElement","el","addDataOutput","destroyInvalidConnections","ib","output","outputView","body","redrawWorkflowOutputs","each","redrawWorkflowOutput","OutputTerminalView","updateDataOutput","outputTerminal","DataOutputView","terminalElements","output_terminals"],"mappings":"aAAAA,QAEQ,kBAKA,uCACIC,mCAEI,SAAAC,EAAAC,EAAAC,GACA,OAAAC,SAAKC,KAAYC,QACjBN,WAAKK,SAAeE,GACpBC,KAAKC,KAAAA,EAAeC,KACpBF,KAAKG,aAALC,KAAAC,IAAA,IAAAL,KAAAM,IAAAC,SACAP,KAAKQ,UAALR,KAAAM,IAAAG,KAAA,iBARoBT,KAAAH,UAAAY,KAAA,OAAAC,SAMpBV,KAAKC,eAAeC,SAASF,KAAKH,WAK9BG,KAAAG,iBACJH,KAAKW,gBAZeC,OAAA,WAYpBZ,KAAKW,kBAQTA,KAAAA,mBACIX,KAAOM,IAAAO,IArBa,QAgBhBT,KAAKU,IAAI,IAAKV,KAAKC,IAAIL,KAAKM,IAAIC,QAASP,KAAKe,iBAItDJ,gBAAiB,WAUjBV,KAAAA,EAAc,cAAAe,KAAAhB,KAAWiB,KAAAC,OAAAlB,KAAAiB,KAAAE,OANzBC,iBAAkB,WAUlBC,KAAAA,KAAgBC,OACPP,KAAAA,IAALQ,SAAoB,mBAnCAvB,KAAAM,IAAAkB,YAAA,oBAuCpBvB,aAAA,WAvCoB,OAAAwB,EAAA,UAAAF,SAAA,WA2CpBF,eAAIK,SAAJC,GACI3B,KAAJe,aAAWX,KAAAC,IAAAL,KAAAe,aAAAY,IAGPC,QAAA,WACAF,KAAAA,UAAaG,OAAbJ,EAAA,UAAAF,SAAA,UAGJO,aAAIC,SAAAA,EACMC,GAINC,IAAAA,GACA,EAEAA,IACAA,EAAAA,KAAeR,EAAA,WAGfQ,GAAe,GAEXC,IAAAA,EAAOA,KAAAA,cAAAA,EAAAA,MAFXH,EAIG,sBAAAG,EAAAF,WACCG,EAAWF,4BACNG,EAATC,kBAQAC,IANHL,GACI9B,aAA4B8B,IAE7BM,EAAgB5C,GAAAA,SAAU6C,UAC1BC,EAAiBA,MAEjBH,EAKGL,CAlFa,IAAAE,EAAAF,EAAAS,GAAAP,SAqEhBA,EAASC,OAAOF,GAgBxBS,EAAeC,iCAPPlB,EAAYA,IAAAA,GAJhBT,KAAAjB,KAAAiB,KAMSsB,MAAUjC,IASf2B,KAAAA,cAAmBF,EAAAA,MAAAA,EACnBd,IAAAA,EADqCgB,EAAAS,GAIzCG,EAFYC,IAAAA,EAAAA,eAFZL,gBAAAA,EAIIM,MAAAA,EACAD,SAD0C9C,KAE1CyC,WAAAA,IAFJnC,IAMA,OADA0C,EAAKxC,OAALqC,EAAiBC,QAAO3B,EAAQ4B,qBAC3BlD,GAKToD,cAAAA,SAAuBH,GACjBI,IAzGkBjB,EAAA,IAyGKa,EAASC,WAC9BA,EAAWI,6BADfzD,EAAA0D,qBAfInC,KAAMjB,KAAKiB,KAoBnBoC,OAAkBP,IAEdQ,EAAA,IAAsBR,EAAtBS,gBACHT,OAAAA,EAjHLL,gBAAAR,EAAAS,GAPRJ,SAAAtC,OAyGgBA,KAAKQ,YAAYsC,EAAO3B,MAAQ4B,EAChC/C,KAAKH,UAAUgC,OACXkB,EAAWzC,IAAIuB,OAAOI,EAAauB,sBAI3CP,sBAAuB,WACnBxD,EAAEyD,KAAKlD,KAAKQ,YAAa,SAASuC,GAC9BA,EAAWI,0BAInBE,iBAAkB,SAASP,GACF9C,KAAKiB,KAAKwC,iBAAiBX,EAAO3B,MACxCiB,OAAOU","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"mvc/workflow/workflow-view-terminals\",\n        \"mvc/workflow/workflow-view-data\"\n    ],\n    function(_, TerminalViews, DataViews) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.node = options.node;\n                this.output_width = Math.max(150, this.$el.width());\n                this.tool_body = this.$el.find(\".toolFormBody\");\n                this.tool_body.find(\"div\").remove();\n                this.newInputsDiv().appendTo(this.tool_body);\n                this.terminalViews = {};\n                this.outputViews = {};\n            },\n\n            render: function() {\n                this.renderToolLabel();\n                this.renderToolErrors();\n                this.$el.css(\n                    \"width\",\n                    Math.min(250, Math.max(this.$el.width(), this.output_width))\n                );\n            },\n\n            renderToolLabel: function() {\n                this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n            },\n\n            renderToolErrors: function() {\n                this.node.errors\n                    ? this.$el.addClass(\"tool-node-error\")\n                    : this.$el.removeClass(\"tool-node-error\");\n            },\n\n            newInputsDiv: function() {\n                return $(\"<div/>\").addClass(\"inputs\");\n            },\n\n            updateMaxWidth: function(newWidth) {\n                this.output_width = Math.max(this.output_width, newWidth);\n            },\n\n            addRule: function() {\n                this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n            },\n\n            addDataInput: function(input, body) {\n                var skipResize = true;\n                if (!body) {\n                    body = this.$(\".inputs\");\n                    // initial addition to node - resize input to help calculate node\n                    // width.\n                    skipResize = false;\n                }\n                var terminalView = this.terminalViews[input.name];\n                var terminalViewClass =\n                    input.input_type == \"dataset_collection\"\n                        ? TerminalViews.InputCollectionTerminalView\n                        : TerminalViews.InputTerminalView;\n                if (\n                    terminalView &&\n                    !(terminalView instanceof terminalViewClass)\n                ) {\n                    terminalView.el.terminal.destroy();\n                    terminalView = null;\n                }\n                if (!terminalView) {\n                    terminalView = new terminalViewClass({\n                        node: this.node,\n                        input: input\n                    });\n                } else {\n                    var terminal = terminalView.el.terminal;\n                    terminal.update(input);\n                    terminal.destroyInvalidConnections();\n                }\n                this.terminalViews[input.name] = terminalView;\n                var terminalElement = terminalView.el;\n                var inputView = new DataViews.DataInputView({\n                    terminalElement: terminalElement,\n                    input: input,\n                    nodeView: this,\n                    skipResize: skipResize\n                });\n                var ib = inputView.$el;\n                body.append(ib.prepend(terminalView.terminalElements()));\n                return terminalView;\n            },\n\n            addDataOutput: function(output) {\n                var terminalViewClass = output.collection\n                    ? TerminalViews.OutputCollectionTerminalView\n                    : TerminalViews.OutputTerminalView;\n                var terminalView = new terminalViewClass({\n                    node: this.node,\n                    output: output\n                });\n                var outputView = new DataViews.DataOutputView({\n                    output: output,\n                    terminalElement: terminalView.el,\n                    nodeView: this\n                });\n                this.outputViews[output.name] = outputView;\n                this.tool_body.append(\n                    outputView.$el.append(terminalView.terminalElements())\n                );\n            },\n\n            redrawWorkflowOutputs: function() {\n                _.each(this.outputViews, function(outputView) {\n                    outputView.redrawWorkflowOutput();\n                });\n            },\n\n            updateDataOutput: function(output) {\n                var outputTerminal = this.node.output_terminals[output.name];\n                outputTerminal.update(output);\n            }\n        });\n    }\n);\n"]}