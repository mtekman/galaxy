{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","Backbone","Model","extend","initialize","app","attr","Node","element","this","input_terminals","output_terminals","getWorkflowOutput","workflow_outputs","outputName","_","findWhere","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","output","output_name","label","push","labelWorkflowOutput","oldLabel","workflowOutput","changed","markChanged","updateOutputLabel","nodeView","redrawWorkflowOutputs","connectedOutputTerminals","_connectedTerminals","connectedTerminals","terminals","$","each","connectors","t","hasConnectedOutputTerminals","outputTerminals","length","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputTerminals","inputTerminal","inputName","isMappedOver","isCollection","mapped_outputs","mapOver","mappedInputTerminals","mappedTerminals","_mappedTerminals","hasMappedOverInputTerminals","found","redraw","destroy","k","addClass","remove","make_active","make_inactive","p","parentNode","get","removeClass","appendChild","init_field_data","type","data","config_form","tool_version","errors","tooltip","annotation","version","post_job_actions","tool_state","uuid","node","data_inputs","addRule","addDataOutput","i","input","render","data_outputs","update_field_data","unused_outputs","workflow","node_changed","cur_name","output_view","outputViews","cur_name_in_data_outputs","name","data_names","data_name","x","unused_output","wf_output","terminal","datatypes","extensions","old_body","new_body","newTerminalViews","difference","unusedView","pja_in","renderToolErrors","updateDataOutput","newInputsDiv","terminalView","addDataInput","values","terminalViews","find","tmp","el","replaceWith","error","text","b","html"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define([\"mvc/workflow/workflow-view-node\"], function(NodeView) {\n    var Node = Backbone.Model.extend({\n        initialize: function(app, attr) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\n                output_name: outputName\n            });\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while (this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(\n                    this.getWorkflowOutput(outputName),\n                    1\n                );\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if (!this.isWorkflowOutput(outputName)) {\n                var output = { output_name: outputName };\n                if (label) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true;\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if (this.isWorkflowOutput(outputName)) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if (changed) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals(this.output_terminals);\n        },\n        _connectedTerminals: function(terminals) {\n            var connectedTerminals = [];\n            $.each(terminals, function(_, t) {\n                if (t.connectors.length > 0) {\n                    connectedTerminals.push(t);\n                }\n            });\n            return connectedTerminals;\n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for (var outputName in outputTerminals) {\n                if (outputTerminals[outputName].connectors.length > 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals(this.input_terminals);\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for (var inputName in inputTerminals) {\n                var inputTerminal = inputTerminals[inputName];\n                if (\n                    inputTerminal.connectors.length > 0 &&\n                    inputTerminal.isMappedOver()\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function(terminals) {\n            var mapped_outputs = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    if (t.connectors.length > 0) {\n                        mapped_outputs.push(t);\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals(this.input_terminals);\n        },\n        _mappedTerminals: function(terminals) {\n            var mappedTerminals = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    mappedTerminals.push(t);\n                }\n            });\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each(this.input_terminals, function(t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    found = true;\n                }\n            });\n            return found;\n        },\n        redraw: function() {\n            $.each(this.input_terminals, function(_, t) {\n                t.redraw();\n            });\n            $.each(this.output_terminals, function(_, t) {\n                t.redraw();\n            });\n        },\n        destroy: function() {\n            $.each(this.input_terminals, function(k, t) {\n                t.destroy();\n            });\n            $.each(this.output_terminals, function(k, t) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node(this);\n            $(this.element).remove();\n        },\n        make_active: function() {\n            $(this.element).addClass(\"toolForm-active\");\n        },\n        make_inactive: function() {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) {\n                p.removeChild(element);\n                p.appendChild(element);\n            })(element.parentNode);\n            // Remove active class\n            $(element).removeClass(\"toolForm-active\");\n        },\n        init_field_data: function(data) {\n            if (data.type) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions\n                ? data.post_job_actions\n                : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs\n                ? data.workflow_outputs\n                : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[0],\n                node: node\n            });\n            node.nodeView = nodeView;\n            $.each(data.data_inputs, function(i, input) {\n                nodeView.addDataInput(input);\n            });\n            if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n                nodeView.addRule();\n            }\n            $.each(data.data_outputs, function(i, output) {\n                nodeView.addDataOutput(output);\n            });\n            nodeView.render();\n            this.app.workflow.node_changed(this, true);\n        },\n        update_field_data: function(data) {\n            var node = this;\n            var nodeView = node.nodeView;\n            // remove unused output views and remove pre-existing output views from data.data_outputs,\n            // so that these are not added twice.\n            var unused_outputs = [];\n            // nodeView.outputViews contains pre-existing outputs,\n            // while data.data_output contains what should be displayed.\n            // Now we gather the unused outputs\n            $.each(nodeView.outputViews, function(i, output_view) {\n                var cur_name = output_view.output.name;\n                var data_names = data.data_outputs;\n                var cur_name_in_data_outputs = false;\n                _.each(data_names, function(data_name) {\n                    if (data_name.name == cur_name) {\n                        cur_name_in_data_outputs = true;\n                    }\n                });\n                if (cur_name_in_data_outputs === false) {\n                    unused_outputs.push(cur_name);\n                }\n            });\n\n            // Remove the unused outputs\n            _.each(unused_outputs, function(unused_output) {\n                _.each(\n                    nodeView.outputViews[unused_output].terminalElement.terminal\n                        .connectors,\n                    function(x) {\n                        if (x) {\n                            x.destroy(); // Removes the noodle connectors\n                        }\n                    }\n                );\n                nodeView.outputViews[unused_output].remove(); // removes the rendered output\n                delete nodeView.outputViews[unused_output]; // removes the reference to the output\n                delete node.output_terminals[unused_output]; // removes the output terminal\n            });\n            $.each(node.workflow_outputs, function(i, wf_output) {\n                if (\n                    wf_output &&\n                    !node.output_terminals[wf_output.output_name]\n                ) {\n                    node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n                }\n            });\n            $.each(data.data_outputs, function(i, output) {\n                if (!nodeView.outputViews[output.name]) {\n                    nodeView.addDataOutput(output); // add data output if it does not yet exist\n                } else {\n                    // the output already exists, but the output formats may have changed.\n                    // Therefore we update the datatypes and destroy invalid connections.\n                    node.output_terminals[output.name].datatypes =\n                        output.extensions;\n                    node.output_terminals[\n                        output.name\n                    ].destroyInvalidConnections();\n                }\n            });\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.errors = data.errors;\n            this.annotation = data[\"annotation\"];\n            this.label = data.label;\n            if (\"post_job_actions\" in data) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$(\"div.inputs\");\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each(data.data_inputs, function(input) {\n                var terminalView = node.nodeView.addDataInput(input, new_body);\n                newTerminalViews[input.name] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each(\n                _.difference(\n                    _.values(nodeView.terminalViews),\n                    _.values(newTerminalViews)\n                ),\n                function(unusedView) {\n                    unusedView.el.terminal.destroy();\n                }\n            );\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if (\n                data.data_outputs.length == 1 &&\n                \"collection_type\" in data.data_outputs[0]\n            ) {\n                nodeView.updateDataOutput(data.data_outputs[0]);\n            }\n            old_body.replaceWith(new_body);\n            if (\"workflow_outputs\" in data) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs\n                    ? workflow_outputs\n                    : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error: function(text) {\n            var b = $(this.element).find(\".toolFormBody\");\n            b.find(\"div\").remove();\n            var tmp =\n                \"<div style='color: red; text-style: italic;'>\" +\n                text +\n                \"</div>\";\n            this.config_form = tmp;\n            b.html(tmp);\n            this.app.workflow.node_changed(this);\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed(this);\n        }\n    });\n    return Node;\n});\n"]}