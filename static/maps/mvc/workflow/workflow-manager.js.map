{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["define","Connector","app","canvas_container","this","id_counter","nodes","name","has_changes","active_form_has_changes","workflowOutputLabels","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","Toastr","warning","node","labelWorkflowOutput","outputName","attemptUpdateOutputLabel","nodeView","redrawWorkflowOutputs","create_node","activate_node","type","title_text","content_id","prebuildNode","add_node","id","canvas_manager","element","workflow","attr","remove_node","active_node","clear_active_node","remove_all","v","wf","rectify_workflow_outputs","k","destroy","using_workflow_outputs","workflow_outputs","$","post_job_actions","each","pja","action_type","has_existing_pjas","length","pja_id","node_changed","self","pjas_to_rem","pja_name","push","create_pja","i","action_arguments","output_terminals","ot_id","ot","reload_active_node","cons","to_simple","workflow_output","input_subworkflow_step_id","con_dict","input_terminals","t","connectors","c","handle1","output_name","undefined","act","tool_version","tool_state","input_connections","annotation","steps","offset","initialImport","config_form","version","keys","errors","max_id","position","data","step","uuid","node_data","from_simple","initialImport_","top","left","Object","parseInt","Math","init_field_data","l","connect","other_node","redraw","max","addWorkflowOutput","callout","find","submit","isArray","x","showForm","check_changes_in_active_form","Galaxy","root","showWorkflowParameters","n_pred","successors","make_inactive","node_ids_by_level","level_parents","make_active","force","layout","all_nodes","h_pad","j","v_pad","other","pred_k","bounds_for_all_nodes","ymin","ymax","xmin","min","xmax","e","sk","new_pos","ids","bounds","parent","b","xmin_delta","ymin_delta","width","round_up","height","max_width","_","p","Infinity","css","Workflow","fit_canvas_to_nodes","n","ceil","fix_delta","children"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["define([\"mvc/workflow/workflow-connector\", \"libs/toastr\"], function(\n    Connector,\n    Toastr\n) {\n    function Workflow(app, canvas_container) {\n        this.app = app;\n        this.canvas_container = canvas_container;\n        this.id_counter = 0;\n        this.nodes = {};\n        this.name = null;\n        this.has_changes = false;\n        this.active_form_has_changes = false;\n        this.workflowOutputLabels = {};\n    }\n    $.extend(Workflow.prototype, {\n        canLabelOutputWith: function(label) {\n            if (label) {\n                return !(label in this.workflowOutputLabels);\n            } else {\n                // empty labels are non-exclusive, so allow this one.\n                return true;\n            }\n        },\n        registerOutputLabel: function(label) {\n            if (label) {\n                this.workflowOutputLabels[label] = true;\n            }\n        },\n        unregisterOutputLabel: function(label) {\n            if (label) {\n                delete this.workflowOutputLabels[label];\n            }\n        },\n        updateOutputLabel: function(fromLabel, toLabel) {\n            if (fromLabel) {\n                this.unregisterOutputLabel(fromLabel);\n            }\n            if (!this.canLabelOutputWith(toLabel)) {\n                Toastr.warning(\n                    \"Workflow contains duplicate workflow output labels \" +\n                        toLabel +\n                        \". This must be fixed before it can be saved.\"\n                );\n            }\n            if (toLabel) {\n                this.registerOutputLabel(toLabel);\n            }\n        },\n        attemptUpdateOutputLabel: function(node, outputName, label) {\n            if (this.canLabelOutputWith(label)) {\n                node.labelWorkflowOutput(outputName, label);\n                node.nodeView.redrawWorkflowOutputs();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        create_node: function(type, title_text, content_id) {\n            var node = this.app.prebuildNode(type, title_text, content_id);\n            this.add_node(node);\n            this.fit_canvas_to_nodes();\n            this.app.canvas_manager.draw_overview();\n            this.activate_node(node);\n            return node;\n        },\n        add_node: function(node) {\n            node.id = this.id_counter;\n            node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n            this.id_counter++;\n            this.nodes[node.id] = node;\n            this.has_changes = true;\n            node.workflow = this;\n        },\n        remove_node: function(node) {\n            if (this.active_node == node) {\n                this.clear_active_node();\n            }\n            delete this.nodes[node.id];\n            this.has_changes = true;\n        },\n        remove_all: function() {\n            var wf = this;\n            $.each(this.nodes, function(k, v) {\n                v.destroy();\n                wf.remove_node(v);\n            });\n        },\n        rectify_workflow_outputs: function() {\n            // Find out if we're using workflow_outputs or not.\n            var using_workflow_outputs = false;\n            var has_existing_pjas = false;\n            $.each(this.nodes, function(k, node) {\n                if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                }\n                $.each(node.post_job_actions, function(pja_id, pja) {\n                    if (pja.action_type === \"HideDatasetAction\") {\n                        has_existing_pjas = true;\n                    }\n                });\n            });\n            if (\n                using_workflow_outputs !== false ||\n                has_existing_pjas !== false\n            ) {\n                // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n                var self = this;\n                $.each(this.nodes, function(k, node) {\n                    if (node.type === \"tool\") {\n                        var node_changed = false;\n                        if (node.post_job_actions === null) {\n                            node.post_job_actions = {};\n                            node_changed = true;\n                        }\n                        var pjas_to_rem = [];\n                        $.each(node.post_job_actions, function(pja_id, pja) {\n                            if (pja.action_type == \"HideDatasetAction\") {\n                                pjas_to_rem.push(pja_id);\n                            }\n                        });\n                        if (pjas_to_rem.length > 0) {\n                            $.each(pjas_to_rem, function(i, pja_name) {\n                                node_changed = true;\n                                delete node.post_job_actions[pja_name];\n                            });\n                        }\n                        if (using_workflow_outputs) {\n                            $.each(node.output_terminals, function(ot_id, ot) {\n                                var create_pja = !node.isWorkflowOutput(\n                                    ot.name\n                                );\n                                if (create_pja === true) {\n                                    node_changed = true;\n                                    var pja = {\n                                        action_type: \"HideDatasetAction\",\n                                        output_name: ot.name,\n                                        action_arguments: {}\n                                    };\n                                    node.post_job_actions[\n                                        \"HideDatasetAction\" + ot.name\n                                    ] = null;\n                                    node.post_job_actions[\n                                        \"HideDatasetAction\" + ot.name\n                                    ] = pja;\n                                }\n                            });\n                        }\n                        // lastly, if this is the active node, and we made changes, reload the display at right.\n                        if (self.active_node == node && node_changed === true) {\n                            self.reload_active_node();\n                        }\n                    }\n                });\n            }\n        },\n        to_simple: function() {\n            var nodes = {};\n            $.each(this.nodes, function(i, node) {\n                var input_connections = {};\n                $.each(node.input_terminals, function(k, t) {\n                    input_connections[t.name] = null;\n                    // There should only be 0 or 1 connectors, so this is\n                    // really a sneaky if statement\n                    var cons = [];\n                    $.each(t.connectors, function(i, c) {\n                        if (c.handle1) {\n                            var con_dict = {\n                                id: c.handle1.node.id,\n                                output_name: c.handle1.name\n                            };\n                            var input_subworkflow_step_id =\n                                t.attributes.input.input_subworkflow_step_id;\n                            if (input_subworkflow_step_id !== undefined) {\n                                con_dict[\n                                    \"input_subworkflow_step_id\"\n                                ] = input_subworkflow_step_id;\n                            }\n                            cons[i] = con_dict;\n                            input_connections[t.name] = cons;\n                        }\n                    });\n                });\n                var post_job_actions = {};\n                if (node.post_job_actions) {\n                    $.each(node.post_job_actions, function(i, act) {\n                        var pja = {\n                            action_type: act.action_type,\n                            output_name: act.output_name,\n                            action_arguments: act.action_arguments\n                        };\n                        post_job_actions[\n                            act.action_type + act.output_name\n                        ] = null;\n                        post_job_actions[\n                            act.action_type + act.output_name\n                        ] = pja;\n                    });\n                }\n                if (!node.workflow_outputs) {\n                    node.workflow_outputs = [];\n                    // Just in case.\n                }\n                var node_data = {\n                    id: node.id,\n                    type: node.type,\n                    content_id: node.content_id,\n                    tool_version: node.config_form.version,\n                    tool_state: node.tool_state,\n                    errors: node.errors,\n                    input_connections: input_connections,\n                    position: $(node.element).position(),\n                    annotation: node.annotation,\n                    post_job_actions: node.post_job_actions,\n                    uuid: node.uuid,\n                    label: node.label,\n                    workflow_outputs: node.workflow_outputs\n                };\n                nodes[node.id] = node_data;\n            });\n            return { steps: nodes };\n        },\n        from_simple: function(data, initialImport_) {\n            var initialImport =\n                initialImport_ === undefined ? true : initialImport_;\n            var wf = this;\n            var offset = 0;\n            if (initialImport) {\n                wf.name = data.name;\n            } else {\n                offset = Object.keys(wf.nodes).length;\n            }\n            var max_id = offset;\n            // First pass, nodes\n            var using_workflow_outputs = false;\n            $.each(data.steps, function(id, step) {\n                var node = wf.app.prebuildNode(\n                    step.type,\n                    step.name,\n                    step.content_id\n                );\n                // If workflow being copied into another, wipe UUID and let\n                // Galaxy assign new ones.\n                if (!initialImport) {\n                    step.uuid = null;\n                    $.each(step.workflow_outputs, function(\n                        name,\n                        workflow_output\n                    ) {\n                        workflow_output.uuid = null;\n                    });\n                }\n                node.init_field_data(step);\n                if (step.position) {\n                    node.element.css({\n                        top: step.position.top,\n                        left: step.position.left\n                    });\n                }\n                node.id = parseInt(step.id) + offset;\n                wf.nodes[node.id] = node;\n                max_id = Math.max(max_id, parseInt(id) + offset);\n                // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n                // Check for either, and then add outputs in the next pass.\n                if (!using_workflow_outputs) {\n                    if (node.workflow_outputs.length > 0) {\n                        using_workflow_outputs = true;\n                    } else {\n                        $.each(node.post_job_actions || [], function(\n                            pja_id,\n                            pja\n                        ) {\n                            if (pja.action_type === \"HideDatasetAction\") {\n                                using_workflow_outputs = true;\n                            }\n                        });\n                    }\n                }\n            });\n            wf.id_counter = max_id + 1;\n            // Second pass, connections\n            $.each(data.steps, function(id, step) {\n                var node = wf.nodes[parseInt(id) + offset];\n                $.each(step.input_connections, function(k, v) {\n                    if (v) {\n                        if (!$.isArray(v)) {\n                            v = [v];\n                        }\n                        $.each(v, function(l, x) {\n                            var other_node = wf.nodes[parseInt(x.id) + offset];\n                            var c = new Connector();\n                            c.connect(\n                                other_node.output_terminals[x.output_name],\n                                node.input_terminals[k]\n                            );\n                            c.redraw();\n                        });\n                    }\n                });\n                if (using_workflow_outputs) {\n                    // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                    $.each(node.output_terminals, function(ot_id, ot) {\n                        if (\n                            node.post_job_actions[\n                                \"HideDatasetAction\" + ot.name\n                            ] === undefined\n                        ) {\n                            node.addWorkflowOutput(ot.name);\n                            var callout = $(node.element).find(\n                                \".callout.\" + ot.name\n                            );\n                            callout\n                                .find(\"img\")\n                                .attr(\n                                    \"src\",\n                                    Galaxy.root +\n                                        \"static/images/fugue/asterisk-small.png\"\n                                );\n                            wf.has_changes = true;\n                        }\n                    });\n                }\n            });\n        },\n        check_changes_in_active_form: function() {\n            // If active form has changed, save it\n            if (this.active_form_has_changes) {\n                this.has_changes = true;\n                // Submit form.\n                $(\"#right-content\")\n                    .find(\"form\")\n                    .submit();\n                this.active_form_has_changes = false;\n            }\n        },\n        reload_active_node: function() {\n            if (this.active_node) {\n                var node = this.active_node;\n                this.clear_active_node();\n                this.activate_node(node);\n            }\n        },\n        clear_active_node: function() {\n            if (this.active_node) {\n                this.active_node.make_inactive();\n                this.active_node = null;\n            }\n            this.app.showAttributes();\n        },\n        activate_node: function(node) {\n            if (this.active_node != node) {\n                this.check_changes_in_active_form();\n                this.clear_active_node();\n                this.app.showForm(node.config_form, node);\n                node.make_active();\n                this.active_node = node;\n            }\n        },\n        node_changed: function(node, force) {\n            this.has_changes = true;\n            if (this.active_node == node && force) {\n                // Force changes to be saved even on new connection (previously dumped)\n                this.check_changes_in_active_form();\n                this.app.showForm(node.config_form, node);\n            }\n            this.app.showWorkflowParameters();\n        },\n        layout: function() {\n            this.check_changes_in_active_form();\n            this.has_changes = true;\n            // Prepare predecessor / successor tracking\n            var n_pred = {};\n            var successors = {};\n            // First pass to initialize arrays even for nodes with no connections\n            $.each(this.nodes, function(id, node) {\n                if (n_pred[id] === undefined) {\n                    n_pred[id] = 0;\n                }\n                if (successors[id] === undefined) {\n                    successors[id] = [];\n                }\n            });\n            // Second pass to count predecessors and successors\n            $.each(this.nodes, function(id, node) {\n                $.each(node.input_terminals, function(j, t) {\n                    $.each(t.connectors, function(k, c) {\n                        // A connection exists from `other` to `node`\n                        var other = c.handle1.node;\n                        // node gains a predecessor\n                        n_pred[node.id] += 1;\n                        // other gains a successor\n                        successors[other.id].push(node.id);\n                    });\n                });\n            });\n            // Assemble order, tracking levels\n            var node_ids_by_level = [];\n            while (true) {\n                // Everything without a predecessor\n                var level_parents = [];\n                for (var pred_k in n_pred) {\n                    if (n_pred[pred_k] === 0) {\n                        level_parents.push(pred_k);\n                    }\n                }\n                if (level_parents.length === 0) {\n                    break;\n                }\n                node_ids_by_level.push(level_parents);\n                // Remove the parents from this level, and decrement the number\n                // of predecessors for each successor\n                for (var k in level_parents) {\n                    var v = level_parents[k];\n                    delete n_pred[v];\n                    for (var sk in successors[v]) {\n                        n_pred[successors[v][sk]] -= 1;\n                    }\n                }\n            }\n            if (n_pred.length) {\n                // ERROR: CYCLE! Currently we do nothing\n                return;\n            }\n            // Layout each level\n            var all_nodes = this.nodes;\n            var h_pad = 80;\n            var v_pad = 30;\n            var left = h_pad;\n            $.each(node_ids_by_level, function(i, ids) {\n                // We keep nodes in the same order in a level to give the user\n                // some control over ordering\n                ids.sort(function(a, b) {\n                    return (\n                        $(all_nodes[a].element).position().top -\n                        $(all_nodes[b].element).position().top\n                    );\n                });\n                // Position each node\n                var max_width = 0;\n                var top = v_pad;\n                $.each(ids, function(j, id) {\n                    var node = all_nodes[id];\n                    var element = $(node.element);\n                    $(element).css({ top: top, left: left });\n                    max_width = Math.max(max_width, $(element).width());\n                    top += $(element).height() + v_pad;\n                });\n                left += max_width + h_pad;\n            });\n            // Need to redraw all connectors\n            $.each(all_nodes, function(_, node) {\n                node.redraw();\n            });\n        },\n        bounds_for_all_nodes: function() {\n            var xmin = Infinity,\n                xmax = -Infinity,\n                ymin = Infinity,\n                ymax = -Infinity,\n                p;\n            $.each(this.nodes, function(id, node) {\n                var e = $(node.element);\n                p = e.position();\n                xmin = Math.min(xmin, p.left);\n                xmax = Math.max(xmax, p.left + e.width());\n                ymin = Math.min(ymin, p.top);\n                ymax = Math.max(ymax, p.top + e.width());\n            });\n            return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n        },\n        fit_canvas_to_nodes: function() {\n            // Math utils\n            function round_up(x, n) {\n                return Math.ceil(x / n) * n;\n            }\n            function fix_delta(x, n) {\n                if (x < n || x > 3 * n) {\n                    var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                    return -(x - new_pos);\n                }\n                return 0;\n            }\n            // Span of all elements\n            var bounds = this.bounds_for_all_nodes();\n            var position = this.canvas_container.position();\n            var parent = this.canvas_container.parent();\n            // Determine amount we need to expand on top/left\n            var xmin_delta = fix_delta(bounds.xmin, 100);\n            var ymin_delta = fix_delta(bounds.ymin, 100);\n            // May need to expand farther to fill viewport\n            xmin_delta = Math.max(xmin_delta, position.left);\n            ymin_delta = Math.max(ymin_delta, position.top);\n            var left = position.left - xmin_delta;\n            var top = position.top - ymin_delta;\n            // Same for width/height\n            var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n            var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n            width = Math.max(width, -left + parent.width());\n            height = Math.max(height, -top + parent.height());\n            // Grow the canvas container\n            this.canvas_container.css({\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n            // Move elements back if needed\n            this.canvas_container.children().each(function() {\n                var p = $(this).position();\n                $(this).css(\"left\", p.left + xmin_delta);\n                $(this).css(\"top\", p.top + ymin_delta);\n            });\n        }\n    });\n    return Workflow;\n});\n"]}