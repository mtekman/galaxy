{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["define","CollectionViewEdit","_super","extend","TAGS","faIconButton","_l","DatasetDCEViewClass","DC_EDIT","initialize","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","attributes","prototype","call","this","_setUpBehaviors","$where","tagsEditorShown","$el","nameSelector","attr","user","find","panel","tooltip","placement","tagsEditor","model","newName","previousName","get","text","save","name","fail","previous","TagsEditor","el","render","usePrompt","toggle","toString","PairCollectionViewEdit","ListCollectionViewEdit","NestedPairCollectionViewEdit","ListOfPairsCollectionViewEdit","foldoutPanelClass","ListOfListsCollectionViewEdit"],"mappings":"aAAAA,QAEQ,iCAUA,kCACA,oCARA,eACA,UAWA,oBATA,qBACA,oBAWA,SAAIC,EAAAA,EAAqBC,EAAOC,EAAPC,EAAAC,EAAAC,GAQjBC,IAAAA,EAAAA,EAAqBC,eACrBP,EAAAC,EAAAC,QAQID,oBAAiBO,EAAgBC,uBAPrCC,qBAAsBH,EAAQI,wBAetBH,WAAJ,SAAiBI,GACbX,EAAAY,UAAAL,WAAAM,KAAAC,KAAAH,IAKAI,gBAAA,SAAAC,GAGCC,GAFJD,EAAAA,GAAAF,KAAAI,IARDlB,EAAOY,UAAUG,gBAAgBF,KAAKC,KAAME,GAUvCC,KAAAA,OAMKE,OAAAA,OACLC,OAAKC,KAASjB,cADdkB,CAOWC,KAAAA,iBAAeJ,EASV,IAAAI,EARLT,KAUAS,EAGHD,KAJM,qBAKVF,KAAA,QAAAhB,EAAA,+BAvBToB,SAAAC,UAAA,WAyBKC,oBACWC,UADsB,SAAAC,GAElB,IAAAC,EAFkBN,EAAAI,MAAAG,IAAA,QAGjBF,GAAAA,IAAAC,GACbN,EAAAL,IAAAI,KAXW,qBAWXS,KAAAH,GAJ8BL,EAAAI,MAMvBK,MAAAC,KAAAL,IANfM,KAAA,WAQAX,EAAAL,IAvE+BI,KAwDZ,qBAJUS,KAsBjCR,EAAAI,MAAAQ,SAAA,YAQCZ,EAAAL,IAnFTI,KAyD+B,qBAGES,KAAKF,MA8BlCf,KAAAY,WAAA,IAAAxB,EAA2CkC,YACvCT,MAAAb,KAAAa,MACAU,GAAArB,EAAAM,KAAA,iBACAjB,gBAA6BG,WAzBjBM,KAAKwB,UA4BjBC,WAAA,IAGQzB,KAAAY,WAAAc,QAAA,KAShBC,SAAA,WACIC,MACA,uBACI5B,KAAAa,MAAAb,KAAAa,MAAAG,IAAA,QAAA,IACA,OAvBJa,EAAyB5C,EAAmBE,QAwCxCI,oBAAAC,EAAAE,uBAhCAiC,SAAU,WAqCV,MACA,2BACU3B,KAAAa,MAAWb,KAAAa,MAAAG,IAAA,QAAA,IAEb,OAYRY,EAAAC,EAAA1C,QAD8CwC,SAAA,WAnC1C,MA0CJ,2BACA3B,KAAAa,MAAAb,KAAAa,MAAAG,IAAA,QAAA,IACU,OAeVc,EAAAF,EAAAzC,QAF8Cc,gBAAA,SAAAC,GAxC1ChB,EAAOY,UAAUG,gBAAgBF,KAAKC,KAAME,IAuD/CyB,SAAA,WAhBT,MAhCgB,iCAoDhB3B,KAAAa,MAAAb,KAAAa,MAAAG,IAAA,QAAA,IACO,OAAP,OACI/B,mBAAoBA,EACpB4C,uBAAwBA,EACxBD,uBAAwBA,EACxBG,8BA/CgC9C,EAAmBE,QAI/CQ,qBAAsBH,EAAQI,wBAAwBT,QAClD6C,kBAAmBF,IAKvBH,SAAU,WACN,MACI,kCACC3B,KAAKa,MAAQb,KAAKa,MAAMG,IAAI,QAAU,IACvC,OAkCZiB,8BA1BgChD,EAAmBE,QAI/CQ,qBAAsBH,EAAQI,wBAAwBT,QAClD6C,kBAAmBF,IAKvBH,SAAU,WACN,MACI,kCACC3B,KAAKa,MAAQb,KAAKa,MAAMG,IAAI,QAAU,IACvC","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["define(\n    [\n        \"mvc/collection/collection-view\",\n        \"mvc/collection/collection-model\",\n        \"mvc/collection/collection-li-edit\",\n        \"mvc/base-mvc\",\n        \"mvc/tag\",\n        \"ui/fa-icon-button\",\n        \"utils/localization\",\n        \"ui/editable-text\"\n    ],\n    function(DC_VIEW, DC_MODEL, DC_EDIT, BASE_MVC, TAGS, faIconButton, _l) {\n        \"use strict\";\n        /* =============================================================================\nTODO:\n\n============================================================================= */\n        /** @class editable View/Controller for a dataset collection.\n */\n        var _super = DC_VIEW.CollectionView;\n        var CollectionViewEdit = _super.extend(\n            /** @lends CollectionView.prototype */ {\n                //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n                /** logger used to record this.log messages, commonly set to console */\n                //logger              : console,\n\n                /** sub view class used for datasets */\n                DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n                /** sub view class used for nested collections */\n                NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n                // ......................................................................... SET UP\n                /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                },\n\n                /** In this override, make the collection name editable\n     */\n                _setUpBehaviors: function($where) {\n                    $where = $where || this.$el;\n                    _super.prototype._setUpBehaviors.call(this, $where);\n                    if (!this.model) {\n                        return;\n                    }\n\n                    // anon users shouldn't have access to any of the following\n                    if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n                        return;\n                    }\n\n                    this.tagsEditorShown = true;\n\n                    //TODO: extract\n                    var panel = this,\n                        nameSelector = \"> .controls .name\";\n                    $where\n                        .find(nameSelector)\n                        .attr(\"title\", _l(\"Click to rename collection\"))\n                        .tooltip({ placement: \"bottom\" })\n                        .make_text_editable({\n                            on_finish: function(newName) {\n                                var previousName = panel.model.get(\"name\");\n                                if (newName && newName !== previousName) {\n                                    panel.$el.find(nameSelector).text(newName);\n                                    panel.model\n                                        .save({ name: newName })\n                                        .fail(function() {\n                                            panel.$el\n                                                .find(nameSelector)\n                                                .text(\n                                                    panel.model.previous(\"name\")\n                                                );\n                                        });\n                                } else {\n                                    panel.$el\n                                        .find(nameSelector)\n                                        .text(previousName);\n                                }\n                            }\n                        });\n                    this.tagsEditor = new TAGS.TagsEditor({\n                        model: this.model,\n                        el: $where.find(\".tags-display\"),\n                        onshowFirstTime: function() {\n                            this.render();\n                        },\n                        usePrompt: false\n                    });\n                    this.tagsEditor.toggle(true);\n                },\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"CollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class non-editable, read-only View/Controller for a dataset collection. */\n        var ListCollectionViewEdit = CollectionViewEdit.extend(\n            /** @lends ListCollectionView.prototype */ {\n                //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n                /** sub view class used for datasets */\n                DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"ListCollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class Editable, read-only View/Controller for a dataset collection. */\n        var PairCollectionViewEdit = ListCollectionViewEdit.extend(\n            /** @lends PairCollectionViewEdit.prototype */ {\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"PairCollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class Editable (roughly since these collections are immutable),\n *  View/Controller for a dataset collection.\n */\n        var NestedPairCollectionViewEdit = PairCollectionViewEdit.extend(\n            /** @lends NestedPairCollectionViewEdit.prototype */ {\n                /** Override to remove the editable text from the name/identifier - these collections are considered immutable */\n                _setUpBehaviors: function($where) {\n                    _super.prototype._setUpBehaviors.call(this, $where);\n                },\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"NestedPairCollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class editable, View/Controller for a list of pairs dataset collection. */\n        var ListOfPairsCollectionViewEdit = CollectionViewEdit.extend(\n            /** @lends ListOfPairsCollectionView.prototype */ {\n                //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n                /** sub view class used for nested collections */\n                NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n                    foldoutPanelClass: NestedPairCollectionViewEdit\n                }),\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"ListOfPairsCollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class View/Controller for a list of lists dataset collection. */\n        var ListOfListsCollectionViewEdit = CollectionViewEdit.extend(\n            /** @lends ListOfListsCollectionView.prototype */ {\n                //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n                /** sub view class used for nested collections */\n                NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit.extend({\n                    foldoutPanelClass: NestedPairCollectionViewEdit\n                }),\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"ListOfListsCollectionViewEdit(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        //==============================================================================\n        return {\n            CollectionViewEdit: CollectionViewEdit,\n            ListCollectionViewEdit: ListCollectionViewEdit,\n            PairCollectionViewEdit: PairCollectionViewEdit,\n            ListOfPairsCollectionViewEdit: ListOfPairsCollectionViewEdit,\n            ListOfListsCollectionViewEdit: ListOfListsCollectionViewEdit\n        };\n    }\n);\n"]}