{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["define","ListItemView","LIST_ITEM","_l","DCListItemView","FoldoutListItemView","model","className","prototype","id","linkTarget","hasUser","attributes","this","get","join","listenTo","_","initialize","call","_setUpListeners","options","templates","subtitle","render","has","changed","_getFoldoutPanelOptions","_renderSubtitle","$","toJSON","extend","deleted","BASE_MVC","titleBarTemplate","subtitleTemplate","warnings","error","wrapTemplate","logger","purged","DatasetDCEListItemView","DATASET_LI","_fetchModelDetails","view","jQuery","modelString","titleBar","log","state","$el","DCEListItemView","NestedDCDCEListItemView","DatasetListItemView","inReadyState","hasDetails","fetch","silent","when","toString","_swapNewRender","$newRender","addClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-item\",\n        \"mvc/dataset/dataset-li\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(LIST_ITEM, DATASET_LI, BASE_MVC, _l) {\n        \"use strict\";\n        //==============================================================================\n        var FoldoutListItemView = LIST_ITEM.FoldoutListItemView,\n            ListItemView = LIST_ITEM.ListItemView;\n        /** @class Read only view for DatasetCollection.\n */\n        var DCListItemView = FoldoutListItemView.extend(\n            /** @lends DCListItemView.prototype */ {\n                className:\n                    FoldoutListItemView.prototype.className +\n                    \" dataset-collection\",\n                id: function() {\n                    return [\"dataset_collection\", this.model.get(\"id\")].join(\n                        \"-\"\n                    );\n                },\n\n                /** override to add linkTarget */\n                initialize: function(attributes) {\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n                    this.hasUser = attributes.hasUser;\n                    FoldoutListItemView.prototype.initialize.call(\n                        this,\n                        attributes\n                    );\n                },\n\n                /** event listeners */\n                _setUpListeners: function() {\n                    FoldoutListItemView.prototype._setUpListeners.call(this);\n                    this.listenTo(this.model, \"change\", function(\n                        model,\n                        options\n                    ) {\n                        // if the model has changed deletion status render it entirely\n                        if (_.has(model.changed, \"deleted\")) {\n                            this.render();\n\n                            // if the model has been decorated after the fact with the element count,\n                            // render the subtitle where the count is displayed\n                        } else if (_.has(model.changed, \"element_count\")) {\n                            this.$(\"> .title-bar .subtitle\").replaceWith(\n                                this._renderSubtitle()\n                            );\n                        }\n                    });\n                },\n\n                // ......................................................................... rendering\n                /** render a subtitle to show the user what sort of collection this is */\n                _renderSubtitle: function() {\n                    return $(\n                        this.templates.subtitle(this.model.toJSON(), this)\n                    );\n                },\n\n                // ......................................................................... foldout\n                /** override to add linktarget to sub-panel */\n                _getFoldoutPanelOptions: function() {\n                    var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call(\n                        this\n                    );\n                    return _.extend(options, {\n                        linkTarget: this.linkTarget,\n                        hasUser: this.hasUser\n                    });\n                },\n\n                /** override to not catch sub-panel selectors */\n                $selector: function() {\n                    return this.$(\"> .selector\");\n                },\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"DCListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DCListItemView.prototype.templates = (function() {\n            var warnings = _.extend(\n                {},\n                FoldoutListItemView.prototype.templates.warnings,\n                {\n                    error: BASE_MVC.wrapTemplate([\n                        // error during index fetch - show error on dataset\n                        \"<% if( model.error ){ %>\",\n                        '<div class=\"errormessagesmall\">',\n                        _l(\n                            \"There was an error getting the data for this collection\"\n                        ),\n                        \": <%- model.error %>\",\n                        \"</div>\",\n                        \"<% } %>\"\n                    ]),\n                    purged: BASE_MVC.wrapTemplate([\n                        \"<% if( model.purged ){ %>\",\n                        '<div class=\"purged-msg warningmessagesmall\">',\n                        _l(\n                            \"This collection has been deleted and removed from disk\"\n                        ),\n                        \"</div>\",\n                        \"<% } %>\"\n                    ]),\n                    deleted: BASE_MVC.wrapTemplate([\n                        // deleted not purged\n                        \"<% if( model.deleted && !model.purged ){ %>\",\n                        '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l(\"This collection has been deleted\"),\n                        \"</div>\",\n                        \"<% } %>\"\n                    ])\n                }\n            );\n\n            // use element identifier\n            var titleBarTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"title-bar clear\" tabindex=\"0\">',\n                    '<div class=\"title\">',\n                    '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n                    \"</div>\",\n                    '<div class=\"subtitle\"></div>',\n                    \"</div>\"\n                ],\n                \"collection\"\n            );\n\n            // use element identifier\n            var subtitleTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"subtitle\">',\n                    '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n                    '<%        if( collection.collection_type === \"list\" ){ %>',\n                    _l(\"a list of <%- countText %>datasets\"),\n                    '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                    _l(\"a pair of datasets\"),\n                    '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                    _l(\"a list of <%- countText %>dataset pairs\"),\n                    '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                    _l(\"a list of <%- countText %>dataset lists\"),\n                    \"<% } %>\",\n                    \"</div>\"\n                ],\n                \"collection\"\n            );\n\n            return _.extend({}, FoldoutListItemView.prototype.templates, {\n                warnings: warnings,\n                titleBar: titleBarTemplate,\n                subtitle: subtitleTemplate\n            });\n        })();\n\n        //==============================================================================\n        /** @class Read only view for DatasetCollectionElement.\n */\n        var DCEListItemView = ListItemView.extend(\n            /** @lends DCEListItemView.prototype */ {\n                /** add the DCE class to the list item */\n                className:\n                    ListItemView.prototype.className +\n                    \" dataset-collection-element\",\n\n                /** set up */\n                initialize: function(attributes) {\n                    if (attributes.logger) {\n                        this.logger = this.model.logger = attributes.logger;\n                    }\n                    this.log(\"DCEListItemView.initialize:\", attributes);\n                    ListItemView.prototype.initialize.call(this, attributes);\n                },\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"DCEListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DCEListItemView.prototype.templates = (function() {\n            // use the element identifier here - since that will persist and the user will need it\n            var titleBarTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"title-bar clear\" tabindex=\"0\">',\n                    '<div class=\"title\">',\n                    '<span class=\"name\"><%- element.element_identifier %></span>',\n                    \"</div>\",\n                    '<div class=\"subtitle\"></div>',\n                    \"</div>\"\n                ],\n                \"element\"\n            );\n\n            return _.extend({}, ListItemView.prototype.templates, {\n                titleBar: titleBarTemplate\n            });\n        })();\n\n        //==============================================================================\n        /** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\n        var DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n            /** @lends DatasetDCEListItemView.prototype */ {\n                className:\n                    DATASET_LI.DatasetListItemView.prototype.className +\n                    \" dataset-collection-element\",\n\n                /** set up */\n                initialize: function(attributes) {\n                    if (attributes.logger) {\n                        this.logger = this.model.logger = attributes.logger;\n                    }\n                    this.log(\"DatasetDCEListItemView.initialize:\", attributes);\n                    DATASET_LI.DatasetListItemView.prototype.initialize.call(\n                        this,\n                        attributes\n                    );\n                },\n\n                /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n                _fetchModelDetails: function() {\n                    var view = this;\n                    if (view.model.inReadyState() && !view.model.hasDetails()) {\n                        return view.model.fetch({ silent: true });\n                    }\n                    return jQuery.when();\n                },\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"DatasetDCEListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DatasetDCEListItemView.prototype.templates = (function() {\n            // use the element identifier here and not the dataset name\n            //TODO:?? can we steal the DCE titlebar?\n            var titleBarTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"title-bar clear\" tabindex=\"0\">',\n                    '<span class=\"state-icon\"></span>',\n                    '<div class=\"title\">',\n                    '<span class=\"name\"><%- element.element_identifier %></span>',\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"element\"\n            );\n\n            return _.extend(\n                {},\n                DATASET_LI.DatasetListItemView.prototype.templates,\n                {\n                    titleBar: titleBarTemplate\n                }\n            );\n        })();\n\n        //==============================================================================\n        /** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\n        var NestedDCDCEListItemView = DCListItemView.extend(\n            /** @lends NestedDCDCEListItemView.prototype */ {\n                className:\n                    DCListItemView.prototype.className +\n                    \" dataset-collection-element\",\n\n                /** In this override, add the state as a class for use with state-based CSS */\n                _swapNewRender: function($newRender) {\n                    DCListItemView.prototype._swapNewRender.call(\n                        this,\n                        $newRender\n                    );\n                    var state = this.model.get(\"state\") || \"ok\";\n                    this.$el.addClass(\"state-\" + state);\n                    return this.$el;\n                },\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model\n                        ? this.model + \"\"\n                        : \"(no model)\";\n                    return \"NestedDCDCEListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        //==============================================================================\n        return {\n            DCListItemView: DCListItemView,\n            DCEListItemView: DCEListItemView,\n            DatasetDCEListItemView: DatasetDCEListItemView,\n            NestedDCDCEListItemView: NestedDCDCEListItemView\n        };\n    }\n);\n"]}