{"version":3,"sources":["mvc/collection/collection-view.js"],"names":["define","logNamespace","LIST_VIEW","DC_MODEL","DC_LI","BASE_MVC","_l","_super","ModelListPanel","CollectionView","extend","NestedDCDCEViewClass","modelCollectionKey","prototype","className","DatasetDCEViewClass","DatasetDCEListItemView","initialize","attributes","call","this","foldoutStyle","hasUser","_queueNewRender","panelStack","panel","parentName","downloadUrl","model","url","$newRender","speed","trigger","fxSpeed","log","getVisibleContents","_filterCollection","_getItemViewClass","get","_getItemViewOptions","options","_setUpItemViewListeners","_","listenTo","linkTarget","view","expanded:drilldown","$list","hide","drilldown","_expandDrilldownPanel","collapsed:drilldown","v","_collapseDrilldownPanel","push","$","add","$el","append","render","pop","events","click .navigation .back","controls","controlsTemplate","ListCollectionView","templates","wrapTemplate","PairCollectionView","ListOfPairsCollectionView","foldoutPanelClass","ListOfListsCollectionView","clone","toString","NestedDCDCEListItemView"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-view.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-view\",\n        \"mvc/collection/collection-model\",\n        \"mvc/collection/collection-li\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(LIST_VIEW, DC_MODEL, DC_LI, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"collections\";\n        /* =============================================================================\nTODO:\n\n============================================================================= */\n        /** @class non-editable, read-only View/Controller for a dataset collection.\n */\n        var _super = LIST_VIEW.ModelListPanel;\n        var CollectionView = _super.extend(\n            /** @lends CollectionView.prototype */ {\n                //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n                _logNamespace: logNamespace,\n\n                className:\n                    _super.prototype.className + \" dataset-collection-panel\",\n\n                /** sub view class used for datasets */\n                DatasetDCEViewClass: DC_LI.DatasetDCEListItemView,\n                /** sub view class used for nested collections */\n                NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView,\n                /** key of attribute in model to assign to this.collection */\n                modelCollectionKey: \"elements\",\n\n                // ......................................................................... SET UP\n                /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the panel\n     */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n\n                    this.hasUser = attributes.hasUser;\n                    /** A stack of panels that currently cover or hide this panel */\n                    this.panelStack = [];\n                    /** The text of the link to go back to the panel containing this one */\n                    this.parentName = attributes.parentName;\n                    /** foldout or drilldown */\n                    this.foldoutStyle = attributes.foldoutStyle || \"foldout\";\n                    this.downloadUrl = this.model.attributes.url + \"/download\";\n                },\n\n                _queueNewRender: function($newRender, speed) {\n                    speed = speed === undefined ? this.fxSpeed : speed;\n                    var panel = this;\n                    panel.log(\"_queueNewRender:\", $newRender, speed);\n\n                    // TODO: jquery@1.12 doesn't change display when the elem has display: flex\n                    // this causes display: block for those elems after the use of show/hide animations\n                    // animations are removed from this view for now until fixed\n                    panel._swapNewRender($newRender);\n                    panel.trigger(\"rendered\", panel);\n                },\n\n                // ------------------------------------------------------------------------ sub-views\n                /** In this override, use model.getVisibleContents */\n                _filterCollection: function() {\n                    //TODO: should *not* be model.getVisibleContents - visibility is not model related\n                    return this.model.getVisibleContents();\n                },\n\n                /** override to return proper view class based on element_type */\n                _getItemViewClass: function(model) {\n                    //this.debug( this + '._getItemViewClass:', model );\n                    //TODO: subclasses use DCEViewClass - but are currently unused - decide\n                    switch (model.get(\"element_type\")) {\n                        case \"hda\":\n                            return this.DatasetDCEViewClass;\n                        case \"dataset_collection\":\n                            return this.NestedDCDCEViewClass;\n                    }\n                    throw new TypeError(\n                        \"Unknown element type:\",\n                        model.get(\"element_type\")\n                    );\n                },\n\n                /** override to add link target and anon */\n                _getItemViewOptions: function(model) {\n                    var options = _super.prototype._getItemViewOptions.call(\n                        this,\n                        model\n                    );\n                    return _.extend(options, {\n                        linkTarget: this.linkTarget,\n                        hasUser: this.hasUser,\n                        //TODO: could move to only nested: list:paired\n                        foldoutStyle: this.foldoutStyle\n                    });\n                },\n\n                // ------------------------------------------------------------------------ collection sub-views\n                /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    _super.prototype._setUpItemViewListeners.call(panel, view);\n\n                    // use pub-sub to: handle drilldown expansion and collapse\n                    panel.listenTo(view, {\n                        \"expanded:drilldown\": function(v, drilldown) {\n                            this._expandDrilldownPanel(drilldown);\n                        },\n                        \"collapsed:drilldown\": function(v, drilldown) {\n                            this._collapseDrilldownPanel(drilldown);\n                        }\n                    });\n                    return this;\n                },\n\n                /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n                _expandDrilldownPanel: function(drilldown) {\n                    this.panelStack.push(drilldown);\n                    // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n                    this.$(\"> .controls\")\n                        .add(this.$list())\n                        .hide();\n                    drilldown.parentName = this.model.get(\"name\");\n                    this.$el.append(drilldown.render().$el);\n                },\n\n                /** Handle drilldown close by freeing the panel and re-rendering this panel */\n                _collapseDrilldownPanel: function(drilldown) {\n                    this.panelStack.pop();\n                    this.render();\n                },\n\n                // ------------------------------------------------------------------------ panel events\n                /** event map */\n                events: {\n                    \"click .navigation .back\": \"close\"\n                },\n\n                /** close/remove this collection panel */\n                close: function(event) {\n                    this.remove();\n                    this.trigger(\"close\");\n                },\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"CollectionView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        //------------------------------------------------------------------------------ TEMPLATES\n        CollectionView.prototype.templates = (function() {\n            var controlsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"controls\">',\n                    '<div class=\"navigation\">',\n                    '<a class=\"back\" href=\"javascript:void(0)\">',\n                    '<span class=\"fa fa-icon fa-angle-left\"></span>',\n                    _l(\"Back to \"),\n                    \"<%- view.parentName %>\",\n                    \"</a>\",\n                    \"</div>\",\n\n                    '<div class=\"title\">',\n                    '<div class=\"name\"><%- collection.name || collection.element_identifier %></div>',\n                    '<div class=\"subtitle\">',\n                    '<% if( collection.collection_type === \"list\" ){ %>',\n                    _l(\"a list of datasets\"),\n                    '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                    _l(\"a pair of datasets\"),\n                    '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                    _l(\"a list of paired datasets\"),\n                    '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                    _l(\"a list of dataset lists\"),\n                    \"<% } %>\",\n                    \"</div>\",\n                    \"</div>\",\n\n                    '<div class=\"tags-display\"></div>',\n\n                    '<div class=\"actions\">',\n                    '<a class=\"download-btn icon-btn\" ',\n                    'href=\"<%- view.downloadUrl %>',\n                    '\" title=\"\" download=\"\" data-original-title=\"Download Collection\">',\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\",\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"collection\"\n            );\n\n            return _.extend(_.clone(_super.prototype.templates), {\n                controls: controlsTemplate\n            });\n        })();\n\n        // =============================================================================\n        /** @class non-editable, read-only View/Controller for a dataset collection. */\n        var ListCollectionView = CollectionView.extend(\n            /** @lends ListCollectionView.prototype */ {\n                //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n                /** sub view class used for datasets */\n                DatasetDCEViewClass: DC_LI.DatasetDCEListItemView,\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"ListCollectionView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class non-editable, read-only View/Controller for a dataset collection. */\n        var PairCollectionView = ListCollectionView.extend(\n            /** @lends PairCollectionView.prototype */ {\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"PairCollectionView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class non-editable, read-only View/Controller for a dataset collection. */\n        var ListOfPairsCollectionView = CollectionView.extend(\n            /** @lends ListOfPairsCollectionView.prototype */ {\n                //TODO: not strictly needed - due to switch in CollectionView._getContentClass\n                /** sub view class used for nested collections */\n                NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView.extend({\n                    foldoutPanelClass: PairCollectionView\n                }),\n\n                // ........................................................................ misc\n                /** string rep */\n                toString: function() {\n                    return (\n                        \"ListOfPairsCollectionView(\" +\n                        (this.model ? this.model.get(\"name\") : \"\") +\n                        \")\"\n                    );\n                }\n            }\n        );\n\n        // =============================================================================\n        /** @class non-editable, read-only View/Controller for a list of lists dataset collection. */\n        var ListOfListsCollectionView = CollectionView.extend({\n            /** sub view class used for nested collections */\n            NestedDCDCEViewClass: DC_LI.NestedDCDCEListItemView.extend({\n                foldoutPanelClass: PairCollectionView\n            }),\n\n            /** string rep */\n            toString: function() {\n                return (\n                    \"ListOfListsCollectionView(\" +\n                    (this.model ? this.model.get(\"name\") : \"\") +\n                    \")\"\n                );\n            }\n        });\n\n        //==============================================================================\n        return {\n            CollectionView: CollectionView,\n            ListCollectionView: ListCollectionView,\n            PairCollectionView: PairCollectionView,\n            ListOfPairsCollectionView: ListOfPairsCollectionView,\n            ListOfListsCollectionView: ListOfListsCollectionView\n        };\n    }\n);\n"]}