{"version":3,"sources":["i18n.js"],"names":["nlsRegExp","locale","master","needed","toLoad","prefix","suffix","push","fullName","require","_fileExists","req","toUrl","mixin","target","source","force","prop","hasOwnProperty","define","module","masterConfig","config","version","load","name","onLoad","masterName","value","match","exec","split","parts","i","addIfExists","navigator","language","userLanguage","toLowerCase","current","length","part","addPart","partBundle"],"mappings":"oOAoCA,WASI,SAAIA,EAAYC,EAAAC,EAAAC,EAAAC,EAAAC,EAAhBC,GAMQJ,EAAOD,KAJfE,EAAAI,KAAAN,IACA,IAAAC,EAAAD,IAAA,IAAAC,EAAAD,IACAG,EAAAG,KAAAF,EAAAJ,EAAA,IAAAK,IAKYF,SAAAA,EAAOG,EAAKF,EAASJ,EAASI,EAAMC,GACvC,IAAAE,EAAAH,EAAAJ,EAAA,IAAAK,EACJG,QAAAC,YAAAC,EAAAC,MAAAJ,EAAA,SACJJ,EAAAG,KAAAC,GAgBD,SAASK,EAAMC,EAAQC,EAAQC,GAC3B,IAAIC,EACJ,IAAKA,KAAQF,GAELA,EAAOG,eAAeD,IAJlCH,EAAAI,eAAAD,KAAsCD,EAI1B,WAAOE,QAAAA,EAAPD,OAGAH,EAAAG,IAAeF,EAAfE,KACGH,EAAIG,OAEHH,EAAAA,EAAOG,GAAQF,EAAfE,GAAAD,IARPC,EAAQF,GAAQA,EAAAE,GAlCzB,IAAAjB,EAAA,0CA+CCmB,QAAA,UAAA,SAAAC,GAGG,IAAIC,EAAeD,EAAOE,OAASF,EAAOE,YAA1C,OAGIC,QAAS,QAITC,KAAM,SAASC,EAAMd,EAAKe,EAAQJ,IAC9BA,EAASA,OAAAA,SAGLD,EAAapB,OAASqB,EAAOrB,QAChC,IAAA0B,EAQGvB,EACAwB,EANAC,EAAQ7B,EAAU8B,KAAKL,GADvBE,EAAAA,EAAJ,GACIE,EAAQ7B,EAAAA,GACRK,EAASwB,EAAM,GACf5B,EAAAA,EAAe8B,MAHnB,KAIIzB,KACA0B,KAGAC,EARJ,GAwCIC,GA3BJL,EAAA,GAGIF,GADAE,EAAJA,EAAc,IACVvB,GADJqB,EAIOF,EACHnB,EAAAuB,EAAA,IACAF,EAAAA,EAAA1B,UAEAA,EAASoB,EAAapB,OACT,oBAAAkC,UACAd,QAOZc,UAAAC,UACcL,UAAfM,cACH,QAHmBC,eAMhBN,EAAA/B,EAAA8B,MAAA,MAGAG,EAAAA,QAAA,CAKC,IAFGK,EAAAA,KAAAA,GACAL,EAAAA,EAAYvB,OAAK4B,EAASnC,EAAQC,GACrC4B,EAAA,EAAAA,EAAAD,EAAAQ,OAAAP,IAHGQ,EAAOT,EAAMC,GAMbP,EAAAA,EADAtB,IAAQmC,EAAW,IAAA,IAAAE,EACnBf,EAAAA,EAAAA,GAGJf,EAAAP,EAAA,WACIsB,WAAJf,GAAKgB,GAAa,SAASzB,GAMvBwC,IACAD,EADAC,KAYC,IARGA,EAAAA,OACIH,EACArC,EACAC,EACAC,EACAC,GAGP4B,EAAA,EAAAA,EAAAD,EAAAQ,OAAAP,IAVGQ,EAAOT,EAAMC,GAab7B,EADJmC,IAAAA,EAAA,IAAA,IAAAE,EAGIvC,EAKIuC,EACAE,EACAtC,EACIsC,GAORhC,EAAAP,EAAA,WACAsB,IAAAA,EAAOE,EAAPa,EAlBJ,IArBJR,EAAA9B,EAAAqC,OAAA,EA0CHP,GAAA,GAAA9B,EAAA8B,GACJA,KAbsC,KAvJnDU,EAAAzC,EAsDIuC,EAAAtC,EAAA8B,MAiGsE,IAAfU,IACvBA,EAAahC,EACTN,EAASoC,EAAO,IAAMnC,IAG9BO,EAAMe,EAAOe,GAIjBjB,EAAOE,WAhKnC","file":"../scripts/i18n.js","sourcesContent":["/**\n * @license RequireJS i18n 2.0.4 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/i18n for details\n */\n/*jslint regexp: true */\n/*global require: false, navigator: false, define: false */\n\n/**\n * This plugin handles i18n! prefixed modules. It does the following:\n *\n * 1) A regular module can have a dependency on an i18n bundle, but the regular\n * module does not want to specify what locale to load. So it just specifies\n * the top-level bundle, like \"i18n!nls/colors\".\n *\n * This plugin will load the i18n bundle at nls/colors, see that it is a root/master\n * bundle since it does not have a locale in its name. It will then try to find\n * the best match locale available in that master bundle, then request all the\n * locale pieces for that best match locale. For instance, if the locale is \"en-us\",\n * then the plugin will ask for the \"en-us\", \"en\" and \"root\" bundles to be loaded\n * (but only if they are specified on the master bundle).\n *\n * Once all the bundles for the locale pieces load, then it mixes in all those\n * locale pieces into each other, then finally sets the context.defined value\n * for the nls/colors bundle to be that mixed in locale.\n *\n * 2) A regular module specifies a specific locale to load. For instance,\n * i18n!nls/fr-fr/colors. In this case, the plugin needs to load the master bundle\n * first, at nls/colors, then figure out what the best match locale is for fr-fr,\n * since maybe only fr or just root is defined for that locale. Once that best\n * fit is found, all of its locale pieces need to have their bundles loaded.\n *\n * Once all the bundles for the locale pieces load, then it mixes in all those\n * locale pieces into each other, then finally sets the context.defined value\n * for the nls/fr-fr/colors bundle to be that mixed in locale.\n */\n(function() {\n    \"use strict\";\n\n    //regexp for reconstructing the master bundle name from parts of the regexp match\n    //nlsRegExp.exec(\"foo/bar/baz/nls/en-ca/foo\") gives:\n    //[\"foo/bar/baz/nls/en-ca/foo\", \"foo/bar/baz/nls/\", \"/\", \"/\", \"en-ca\", \"foo\"]\n    //nlsRegExp.exec(\"foo/bar/baz/nls/foo\") gives:\n    //[\"foo/bar/baz/nls/foo\", \"foo/bar/baz/nls/\", \"/\", \"/\", \"foo\", \"\"]\n    //so, if match[5] is blank, it means this is the top bundle definition.\n    var nlsRegExp = /(^.*(^|\\/)nls(\\/|$))([^\\/]*)\\/?([^\\/]*)/;\n\n    //Helper function to avoid repeating code. Lots of arguments in the\n    //desire to stay functional and support RequireJS contexts without having\n    //to know about the RequireJS contexts.\n    function addPart(locale, master, needed, toLoad, prefix, suffix) {\n        if (master[locale]) {\n            needed.push(locale);\n            if (master[locale] === true || master[locale] === 1) {\n                toLoad.push(prefix + locale + \"/\" + suffix);\n            }\n        }\n    }\n\n    function addIfExists(req, locale, toLoad, prefix, suffix) {\n        var fullName = prefix + locale + \"/\" + suffix;\n        if (require._fileExists(req.toUrl(fullName + \".js\"))) {\n            toLoad.push(fullName);\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     * This is not robust in IE for transferring methods that match\n     * Object.prototype names, but the uses of mixin here seem unlikely to\n     * trigger a problem related to that.\n     */\n    function mixin(target, source, force) {\n        var prop;\n        for (prop in source) {\n            if (\n                source.hasOwnProperty(prop) &&\n                (!target.hasOwnProperty(prop) || force)\n            ) {\n                target[prop] = source[prop];\n            } else if (typeof source[prop] === \"object\") {\n                if (!target[prop] && source[prop]) {\n                    target[prop] = {};\n                }\n                mixin(target[prop], source[prop], force);\n            }\n        }\n    }\n\n    define([\"module\"], function(module) {\n        var masterConfig = module.config ? module.config() : {};\n\n        return {\n            version: \"2.0.4\",\n            /**\n             * Called when a dependency needs to be loaded.\n             */\n            load: function(name, req, onLoad, config) {\n                config = config || {};\n\n                if (config.locale) {\n                    masterConfig.locale = config.locale;\n                }\n\n                var masterName,\n                    match = nlsRegExp.exec(name),\n                    prefix = match[1],\n                    locale = match[4],\n                    suffix = match[5],\n                    parts = locale.split(\"-\"),\n                    toLoad = [],\n                    value = {},\n                    i,\n                    part,\n                    current = \"\";\n\n                //If match[5] is blank, it means this is the top bundle definition,\n                //so it does not have to be handled. Locale-specific requests\n                //will have a match[4] value but no match[5]\n                if (match[5]) {\n                    //locale-specific bundle\n                    prefix = match[1];\n                    masterName = prefix + suffix;\n                } else {\n                    //Top-level bundle.\n                    masterName = name;\n                    suffix = match[4];\n                    locale = masterConfig.locale;\n                    if (!locale) {\n                        locale = masterConfig.locale =\n                            typeof navigator === \"undefined\"\n                                ? \"root\"\n                                : (navigator.language ||\n                                      navigator.userLanguage ||\n                                      \"root\"\n                                  ).toLowerCase();\n                    }\n                    parts = locale.split(\"-\");\n                }\n\n                if (config.isBuild) {\n                    //Check for existence of all locale possible files and\n                    //require them if exist.\n                    toLoad.push(masterName);\n                    addIfExists(req, \"root\", toLoad, prefix, suffix);\n                    for (i = 0; i < parts.length; i++) {\n                        part = parts[i];\n                        current += (current ? \"-\" : \"\") + part;\n                        addIfExists(req, current, toLoad, prefix, suffix);\n                    }\n\n                    req(toLoad, function() {\n                        onLoad();\n                    });\n                } else {\n                    //First, fetch the master bundle, it knows what locales are available.\n                    req([masterName], function(master) {\n                        //Figure out the best fit\n                        var needed = [],\n                            part;\n\n                        //Always allow for root, then do the rest of the locale parts.\n                        addPart(\"root\", master, needed, toLoad, prefix, suffix);\n                        for (i = 0; i < parts.length; i++) {\n                            part = parts[i];\n                            current += (current ? \"-\" : \"\") + part;\n                            addPart(\n                                current,\n                                master,\n                                needed,\n                                toLoad,\n                                prefix,\n                                suffix\n                            );\n                        }\n\n                        //Load all the parts missing.\n                        req(toLoad, function() {\n                            var i, partBundle, part;\n                            for (\n                                i = needed.length - 1;\n                                i > -1 && needed[i];\n                                i--\n                            ) {\n                                part = needed[i];\n                                partBundle = master[part];\n                                if (partBundle === true || partBundle === 1) {\n                                    partBundle = req(\n                                        prefix + part + \"/\" + suffix\n                                    );\n                                }\n                                mixin(value, partBundle);\n                            }\n\n                            //All done, notify the loader.\n                            onLoad(value);\n                        });\n                    });\n                }\n            }\n        };\n    });\n})();\n"]}