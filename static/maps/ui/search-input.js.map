{"version":3,"sources":["ui/search-input.js"],"names":["factory","define","amd","jQuery","searchInput","parentNode","options","clearSearchInput","event","$","this","$input","onclear","val","trigger","search","searchTerms","onfirstsearch","firstSearch","onsearch","inputTemplate","focus","name","placeholder","keyup","preventDefault","join","KEYCODE_ESC","KEYCODE_RETURN","$parentNode","defaults","initialVal","classes","inputVal","minSearchLen","escWillClear","oninit","type","find","toggle","extend","addClass","prepend","select","stopPropagation","call","which","length","toggleLoadingIndicator","_l","tooltip","placement","hide","window","s","fn","each"],"mappings":"cAAA,SAAAA,GACA,mBAAAC,QAAAA,OAAAC,IAIQD,UAAAD,GAFJA,EAKOG,QARX,CAUQH,WAmBJ,SAASI,EAAYC,EAAYC,GAoB7B,SAASC,EAAiBC,GACTC,EAAEC,MAGfC,SAIAL,SAAQM,SAHHC,IAAI,IAMbC,QAAA,qBACSC,OACLT,EAAKU,UAIL,SAAID,EAAOT,EAAQW,GACfC,IAAAA,EACAZ,OAAAA,IAEAA,EAAAA,MAAAA,QAAQa,gBAARH,GACH,mBAAAV,EAAAW,eAAAC,GACJA,GAAA,EAJOZ,EAAQW,cAAcD,IAO9BV,EAASc,SAAgBJ,GAezB,SAAAI,IAEI,OACQ,4BACCC,EAAMC,KACHb,kBAHJH,EAAAiB,YAKA,KACCC,uBACGhB,EAAMiB,QACNjB,KAdR,MAgBQkB,KAAA,IAxEhB,IAAIC,EAAc,GACdC,EAAiB,GACjBC,EAAcpB,EAAEJ,GAChBa,GAAc,EACdY,GACIC,WADO,GAEPT,KAAM,SACNC,YAAa,SACbS,QAJO,GAKPpB,QAAS,aACTK,cANO,KAOPE,SAAU,SAAAc,KACVC,aARO,EASPC,cATO,EAUPC,OAAQ,cAwHhB,MAA6B,WAAzBjC,OAAOkC,KAAK/B,IACI,mBAAZA,IAPJuB,EAAYS,KAAK,mBAAmBC,SACpCV,EAAYS,KAAK,iBAAiBC,UAS3BV,IAIkB,WAAzB1B,OAAOkC,KAAK/B,KACZA,EAAUH,OAAOqC,QAAO,KAAUV,EAAUxB,IAGzCuB,EACFY,SAAS,gBACTC,SApEejC,EAAAW,KAMIL,MAAAA,SAAYP,GACfC,EAAAC,MAAAiC,WAIpBnB,MAAA,SAAAhB,GAOW,GA7BIA,EAAMiB,iBAwBtBjB,EAAAoC,kBAaYrC,EAAiBsC,QAAWrC,GAVpCF,EAAA6B,aAnBgB5B,EAAiBsC,KAAKnC,KAAMF,OAiChD,CACA,IAAAQ,EAAAP,EAAAC,MAAAG,OAYCL,EAAAsC,QAAAlB,GAxCwBtB,EAAQ4B,cA0CjClB,EAAA+B,QAAAzC,EAAA4B,eAESc,EAATH,KAAkCnC,KAAAF,EAAAQ,MArCrBH,IAAIP,EAAQyB,YA+CpBtB,GAEJ,iDAxCW,UA0CZwC,EAAA,sBACWZ,aACP/B,KAAUH,KAEd+C,SAAAC,UAAA,WACOtB,MAAAA,SACFY,GAERlC,EAAAsC,KAAAnC,KAAAF,KAKOC,GAFR,sDApLJ,UAiJoBwC,EAAG,cACH,aACFvB,KAAK,KAEN0B,OACAF,SAAUC,UAAW,cA7IjC,IAAAF,EACFI,OAAWJ,IACNA,SACAI,GAEI,OAAAC,GAsKRnD,OAAOoD,GAAGf,QACNpC,YAAa,SAAsBE,GAC/B,OAAOI,KAAK8C,KAAK,WACb,OAAOpD,EAAYM,KAAMJ","file":"../../scripts/ui/search-input.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function() {\n    var _l =\n        window._l ||\n        function(s) {\n            return s;\n        };\n\n    //TODO: consolidate with tool menu functionality, use there\n\n    /** searchInput: (jQuery plugin)\n     *      Creates a search input, a clear button, and loading indicator\n     *      within the selected node.\n     *\n     *      When the user either presses return or enters some minimal number\n     *      of characters, a callback is called. Pressing ESC when the input\n     *      is focused will clear the input and call a separate callback.\n     */\n    function searchInput(parentNode, options) {\n        var KEYCODE_ESC = 27,\n            KEYCODE_RETURN = 13,\n            $parentNode = $(parentNode),\n            firstSearch = true,\n            defaults = {\n                initialVal: \"\",\n                name: \"search\",\n                placeholder: \"search\",\n                classes: \"\",\n                onclear: function() {},\n                onfirstsearch: null,\n                onsearch: function(inputVal) {},\n                minSearchLen: 0,\n                escWillClear: true,\n                oninit: function() {}\n            };\n\n        // .................................................................... input rendering and events\n        // visually clear the search, trigger an event, and call the callback\n        function clearSearchInput(event) {\n            var $input = $(this)\n                .parent()\n                .children(\"input\");\n            $input\n                .val(\"\")\n                .trigger(\"searchInput.clear\")\n                .blur();\n            options.onclear();\n        }\n\n        // search for searchTerms, trigger an event, call the appropo callback (based on whether this is the first)\n        function search(event, searchTerms) {\n            if (!searchTerms) {\n                return clearSearchInput();\n            }\n            $(this).trigger(\"search.search\", searchTerms);\n            if (typeof options.onfirstsearch === \"function\" && firstSearch) {\n                firstSearch = false;\n                options.onfirstsearch(searchTerms);\n            } else {\n                options.onsearch(searchTerms);\n            }\n        }\n\n        // .................................................................... input rendering and events\n        function inputTemplate() {\n            // class search-query is bootstrap 2.3 style that now lives in base.less\n            return [\n                '<input type=\"text\" name=\"',\n                options.name,\n                '\" placeholder=\"',\n                options.placeholder,\n                '\" ',\n                'class=\"search-query ',\n                options.classes,\n                '\" ',\n                \"/>\"\n            ].join(\"\");\n        }\n\n        // the search input that responds to keyboard events and displays the search value\n        function $input() {\n            return ($(inputTemplate())\n                    // select all text on a focus\n                    .focus(function(event) {\n                        $(this).select();\n                    })\n                    // attach behaviors to esc, return if desired, search on some min len string\n                    .keyup(function(event) {\n                        event.preventDefault();\n                        event.stopPropagation();\n\n                        // esc key will clear if desired\n                        if (\n                            event.which === KEYCODE_ESC &&\n                            options.escWillClear\n                        ) {\n                            clearSearchInput.call(this, event);\n                        } else {\n                            var searchTerms = $(this).val();\n                            // return key or the search string len > minSearchLen (if not 0) triggers search\n                            if (\n                                event.which === KEYCODE_RETURN ||\n                                (options.minSearchLen &&\n                                    searchTerms.length >= options.minSearchLen)\n                            ) {\n                                search.call(this, event, searchTerms);\n                            }\n                        }\n                    })\n                    .val(options.initialVal) );\n        }\n\n        // .................................................................... clear button rendering and events\n        // a button for clearing the search bar, placed on the right hand side\n        function $clearBtn() {\n            return $(\n                [\n                    '<span class=\"search-clear fa fa-times-circle\" ',\n                    'title=\"',\n                    _l(\"clear search (esc)\"),\n                    '\"></span>'\n                ].join(\"\")\n            )\n                .tooltip({ placement: \"bottom\" })\n                .click(function(event) {\n                    clearSearchInput.call(this, event);\n                });\n        }\n\n        // .................................................................... loadingIndicator rendering\n        // a button for clearing the search bar, placed on the right hand side\n        function $loadingIndicator() {\n            return $(\n                [\n                    '<span class=\"search-loading fa fa-spinner fa-spin\" ',\n                    'title=\"',\n                    _l(\"loading...\"),\n                    '\"></span>'\n                ].join(\"\")\n            )\n                .hide()\n                .tooltip({ placement: \"bottom\" });\n        }\n\n        // .................................................................... commands\n        // visually swap the load, clear buttons\n        function toggleLoadingIndicator() {\n            $parentNode.find(\".search-loading\").toggle();\n            $parentNode.find(\".search-clear\").toggle();\n        }\n\n        // .................................................................... init\n        // string command (not constructor)\n        if (jQuery.type(options) === \"string\") {\n            if (options === \"toggle-loading\") {\n                toggleLoadingIndicator();\n            }\n            return $parentNode;\n        }\n\n        // initial render\n        if (jQuery.type(options) === \"object\") {\n            options = jQuery.extend(true, {}, defaults, options);\n        }\n        //NOTE: prepended\n        return $parentNode\n            .addClass(\"search-input\")\n            .prepend([$input(), $clearBtn(), $loadingIndicator()]);\n    }\n\n    // as jq plugin\n    jQuery.fn.extend({\n        searchInput: function $searchInput(options) {\n            return this.each(function() {\n                return searchInput(this, options);\n            });\n        }\n    });\n});\n"]}