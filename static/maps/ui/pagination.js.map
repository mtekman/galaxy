{"version":3,"sources":["ui/pagination.js"],"names":["factory","define","amd","jQuery","Pagination","element","options","this","numPages","init","_make$Li","contents","$","join","prototype","DATA_KEY","startingPage","perPage","totalDataSize","$element","extend","defaults","currPage","Math","data","_render","_renderPages","_renderPrevNext","$paginationContainer","pagination","$prev","$next","addClass","click","prevPage","currDataSize","$scrollingContainer","page$LiClick","i","$pageLi","_scrollToActivePage","$container","find","attr","goToPage","append","html","page","length","$activePage","midpoint","width","scrollLeft","position","left","trigger","$pagination","type","map","create","previousControl","fn","nonOptionsArgs","makeArray","arguments","slice","apply"],"mappings":"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","file":"../../scripts/ui/pagination.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    /** Builds (twitter bootstrap styled) pagination controls.\n     *  If the totalDataSize is not null, a horizontal list of page buttons is displayed.\n     *  If totalDataSize is null, two links ('Prev' and 'Next) are displayed.\n     *  When pages are changed, a 'pagination.page-change' event is fired\n     *      sending the event and the (0-based) page requested.\n     */\n    function Pagination(element, options) {\n        /** the total number of pages */\n        this.numPages = null;\n        /** the current, active page */\n        this.currPage = 0;\n        return this.init(element, options);\n    }\n\n    /** data key under which this object will be stored in the element */\n    Pagination.prototype.DATA_KEY = \"pagination\";\n    /** default options */\n    Pagination.prototype.defaults = {\n        /** which page to begin at */\n        startingPage: 0,\n        /** number of data per page */\n        perPage: 20,\n        /** the total number of data (null == unknown) */\n        totalDataSize: null,\n        /** size of current data on current page */\n        currDataSize: null\n    };\n\n    /** init the control, calc numPages if possible, and render\n     *  @param {jQuery} the element that will contain the pagination control\n     *  @param {Object} options a map containing overrides to the pagination default options\n     */\n    Pagination.prototype.init = function _init($element, options) {\n        options = options || {};\n        this.$element = $element;\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currPage = this.options.startingPage;\n        if (this.options.totalDataSize !== null) {\n            this.numPages = Math.ceil(\n                this.options.totalDataSize / this.options.perPage\n            );\n            // limit currPage by numPages\n            if (this.currPage >= this.numPages) {\n                this.currPage = this.numPages - 1;\n            }\n        }\n        //console.debug( 'Pagination.prototype.init:', this.$element, this.currPage );\n        //console.debug( JSON.stringify( this.options ) );\n\n        // bind to data of element\n        this.$element.data(Pagination.prototype.DATA_KEY, this);\n\n        this._render();\n        return this;\n    };\n\n    /** helper to create a simple li + a combo */\n    function _make$Li(contents) {\n        return $(\n            ['<li><a href=\"javascript:void(0);\">', contents, \"</a></li>\"].join(\n                \"\"\n            )\n        );\n    }\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._render = function __render() {\n        // no data - no pagination\n        if (this.options.totalDataSize === 0) {\n            return this;\n        }\n        // only one page\n        if (this.numPages === 1) {\n            return this;\n        }\n\n        // when the number of pages are known, render each page as a link\n        if (this.numPages > 0) {\n            this._renderPages();\n            this._scrollToActivePage();\n\n            // when the number of pages is not known, render previous or next\n        } else {\n            this._renderPrevNext();\n        }\n        return this;\n    };\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._renderPrevNext = function __renderPrevNext() {\n        var pagination = this,\n            $prev = _make$Li(\"Prev\"),\n            $next = _make$Li(\"Next\"),\n            $paginationContainer = $(\"<ul/>\").addClass(\n                \"pagination pagination-prev-next\"\n            );\n\n        // disable if it either end\n        if (this.currPage === 0) {\n            $prev.addClass(\"disabled\");\n        } else {\n            $prev.click(function() {\n                pagination.prevPage();\n            });\n        }\n        if (\n            (this.numPages && this.currPage === this.numPages - 1) ||\n            (this.options.currDataSize &&\n                this.options.currDataSize < this.options.perPage)\n        ) {\n            $next.addClass(\"disabled\");\n        } else {\n            $next.click(function() {\n                pagination.nextPage();\n            });\n        }\n\n        this.$element.html($paginationContainer.append([$prev, $next]));\n        //console.debug( this.$element, this.$element.html() );\n        return this.$element;\n    };\n\n    /** render page links for each possible page (if we can) */\n    Pagination.prototype._renderPages = function __renderPages() {\n        // it's better to scroll the control and let the user see all pages\n        //  than to force her/him to change pages in order to find the one they want (as traditional << >> does)\n        var pagination = this,\n            $scrollingContainer = $(\"<div>\").addClass(\n                \"pagination-scroll-container\"\n            ),\n            $paginationContainer = $(\"<ul/>\").addClass(\n                \"pagination pagination-page-list\"\n            ),\n            page$LiClick = function(ev) {\n                pagination.goToPage($(this).data(\"page\"));\n            };\n\n        for (var i = 0; i < this.numPages; i += 1) {\n            // add html5 data tag 'page' for later click event handler use\n            var $pageLi = _make$Li(i + 1)\n                .attr(\"data-page\", i)\n                .click(page$LiClick);\n            // highlight the current page\n            if (i === this.currPage) {\n                $pageLi.addClass(\"active\");\n            }\n            //console.debug( '\\t', $pageLi );\n            $paginationContainer.append($pageLi);\n        }\n        return this.$element.html(\n            $scrollingContainer.html($paginationContainer)\n        );\n    };\n\n    /** scroll scroll-container (if any) to show the active page */\n    Pagination.prototype._scrollToActivePage = function __scrollToActivePage() {\n        // scroll to show active page in center of scrollable area\n        var $container = this.$element.find(\".pagination-scroll-container\");\n        // no scroll container : don't scroll\n        if (!$container.length) {\n            return this;\n        }\n\n        var $activePage = this.$element.find(\"li.active\"),\n            midpoint = $container.width() / 2;\n        //console.debug( $container, $activePage, midpoint );\n        $container.scrollLeft(\n            $container.scrollLeft() + $activePage.position().left - midpoint\n        );\n        return this;\n    };\n\n    /** go to a certain page */\n    Pagination.prototype.goToPage = function goToPage(page) {\n        if (page <= 0) {\n            page = 0;\n        }\n        if (this.numPages && page >= this.numPages) {\n            page = this.numPages - 1;\n        }\n        if (page === this.currPage) {\n            return this;\n        }\n\n        //console.debug( '\\t going to page ' + page )\n        this.currPage = page;\n        this.$element.trigger(\"pagination.page-change\", this.currPage);\n        //console.info( 'pagination:page-change', this.currPage );\n        this._render();\n        return this;\n    };\n\n    /** go to the previous page */\n    Pagination.prototype.prevPage = function prevPage() {\n        return this.goToPage(this.currPage - 1);\n    };\n\n    /** go to the next page */\n    Pagination.prototype.nextPage = function nextPage() {\n        return this.goToPage(this.currPage + 1);\n    };\n\n    /** return the current page */\n    Pagination.prototype.page = function page() {\n        return this.currPage;\n    };\n\n    // alternate constructor invocation\n    Pagination.create = function _create($element, options) {\n        return new Pagination($element, options);\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        pagination: function $pagination(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n\n            // if passed an object - use that as an options map to create pagination for each selected\n            if (jQuery.type(options) === \"object\") {\n                return this.map(function() {\n                    Pagination.create($(this), options);\n                    return this;\n                });\n            }\n\n            // (other invocations only work on the first element in selected)\n            var $firstElement = $(this[0]),\n                previousControl = $firstElement.data(\n                    Pagination.prototype.DATA_KEY\n                );\n            // if a pagination control was found for this element, either...\n            if (previousControl) {\n                // invoke a function on the pagination object if passed a string (the function name)\n                if (jQuery.type(options) === \"string\") {\n                    var fn = previousControl[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(previousControl, nonOptionsArgs);\n                    }\n\n                    // if passed nothing, return the previously set control\n                } else {\n                    return previousControl;\n                }\n            }\n            // if there is no control already set, return undefined\n            return undefined;\n        }\n    });\n});\n"]}