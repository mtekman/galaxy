{"version":3,"sources":["ui/autocom_tagging.js"],"names":["factory","define","amd","jQuery","init_tag_click_function","tag_elt","click_func","$","this","click","tag_str","tag_name_and_value","text","split","fn","autocomplete_tagging","options","init_delete_tag_image","delete_img","mouseenter","prev_button","tag_button","prev","mouseleave","attr","settings","delete_tag_img","new_text","get_toggle_link_text_fn","url","find","eq","ajax_delete_tag_url","data","tag_name","error","tags","remove","tag_area","prepend","toggle_link","tag_value","hasClass","success","after","alert","delete_tag_img_rollover","tag_name_elt","append","build_tag_button","addClass","tag_click_fn","editable","defaults","num_tags","_","size","name","value","input_size","in_form","use_toggle_link","item_id","add_tag_img","add_tag_img_rollover","ajax_autocomplete_tag_url","ajax_retag_url","ajax_add_tag_url","extend","this_obj","tag_input_field","add_tag_button","after_toggle_fn","is","length","blur","slideToggle","hide","keyup","e","keyCode","trigger","new_value","substring","trim","new_tag_button","tag_buttons","children","last_tag_button","zz","format_item_func","cacheFlush","selectFirst","autocomplete_options","formatItem","autoFill","highlight","autocomplete_verheul","each","target","show","removeClass","is_active","handle_document_click","check_click","focus","window","bind","unbind","build_tag_str"],"mappings":"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","file":"../../scripts/ui/autocom_tagging.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        //TODO: So...this turns out to be an all or nothing thing. If I load jQuery in the define below, it will\n        //  (of course) wipe the old jquery *and all the plugins loaded into it*. So the define below *is still\n        //  relying on jquery being loaded globally* in order to preserve plugins.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function(jQuery) {\n    \"use_strict\";\n\n    var $ = jQuery;\n\n    // ============================================================================\n    /**\n* JQuery extension for tagging with autocomplete.\n* @author: Jeremy Goecks\n* @require: jquery.autocomplete plugin\n*/\n    //\n    // Initialize \"tag click functions\" for tags.\n    //\n    function init_tag_click_function(tag_elt, click_func) {\n        $(tag_elt)\n            .find(\".tag-name\")\n            .each(function() {\n                $(this).click(function() {\n                    var tag_str = $(this).text();\n                    var tag_name_and_value = tag_str.split(\":\");\n                    click_func(tag_name_and_value[0], tag_name_and_value[1]);\n                    return true;\n                });\n            });\n    }\n\n    jQuery.fn.autocomplete_tagging = function(options) {\n        var defaults = {\n            get_toggle_link_text_fn: function(tags) {\n                var text = \"\";\n                var num_tags = _.size(tags);\n                if (num_tags > 0) {\n                    text = num_tags + (num_tags > 1 ? \" Tags\" : \" Tag\");\n                } else {\n                    text = \"Add tags\";\n                }\n                return text;\n            },\n            tag_click_fn: function(name, value) {},\n            editable: true,\n            input_size: 20,\n            in_form: false,\n            tags: {},\n            use_toggle_link: true,\n            item_id: \"\",\n            add_tag_img: \"\",\n            add_tag_img_rollover: \"\",\n            delete_tag_img: \"\",\n            ajax_autocomplete_tag_url: \"\",\n            ajax_retag_url: \"\",\n            ajax_delete_tag_url: \"\",\n            ajax_add_tag_url: \"\"\n        };\n\n        var settings = jQuery.extend(defaults, options);\n\n        //\n        // Initalize object's elements.\n        //\n\n        // Get elements for this object. For this_obj, assume the last element with the id is the \"this\"; this is somewhat of a hack to address the problem\n        // that there may be two tagging elements for a single item if there are both community and individual tags for an element.\n        var this_obj = $(this);\n        var tag_area = this_obj.find(\".tag-area\");\n        var toggle_link = this_obj.find(\".toggle-link\");\n        var tag_input_field = this_obj.find(\".tag-input\");\n        var add_tag_button = this_obj.find(\".add-tag-button\");\n\n        // Initialize toggle link.\n        toggle_link.click(function() {\n            // Take special actions depending on whether toggle is showing or hiding link.\n            var after_toggle_fn;\n            if (tag_area.is(\":hidden\")) {\n                after_toggle_fn = function() {\n                    // If there are no tags, go right to editing mode by generating a click on the area.\n                    var num_tags = $(this).find(\".tag-button\").length;\n                    if (num_tags === 0) {\n                        tag_area.click();\n                    }\n                };\n            } else {\n                after_toggle_fn = function() {\n                    tag_area.blur();\n                };\n            }\n            tag_area.slideToggle(\"fast\", after_toggle_fn);\n            return $(this);\n        });\n\n        // Initialize tag input field.\n        if (settings.editable) {\n            tag_input_field.hide();\n        }\n        tag_input_field.keyup(function(e) {\n            if (e.keyCode === 27) {\n                // Escape key\n                $(this).trigger(\"blur\");\n            } else if (\n                e.keyCode === 13 || // Return Key\n                e.keyCode === 188 || // Comma\n                e.keyCode === 32 // Space\n            ) {\n                //\n                // Check input.\n                //\n\n                var new_value = this.value;\n\n                // Suppress space after a \":\"\n                if (new_value.indexOf(\": \", new_value.length - 2) !== -1) {\n                    this.value = new_value.substring(0, new_value.length - 1);\n                    return false;\n                }\n\n                // Remove trigger keys from input.\n                if (e.keyCode === 188 || e.keyCode === 32) {\n                    new_value = new_value.substring(0, new_value.length - 1);\n                }\n\n                // Trim whitespace.\n                new_value = $.trim(new_value);\n\n                // Too short?\n                if (new_value.length < 2) {\n                    return false;\n                }\n\n                //\n                // New tag OK - apply it.\n                //\n\n                this.value = \"\"; // Reset text field now that tag is being added\n\n                // Add button for tag after all other tag buttons.\n                var new_tag_button = build_tag_button(new_value);\n                var tag_buttons = tag_area.children(\".tag-button\");\n                if (tag_buttons.length !== 0) {\n                    var last_tag_button = tag_buttons.slice(\n                        tag_buttons.length - 1\n                    );\n                    last_tag_button.after(new_tag_button);\n                } else {\n                    tag_area.prepend(new_tag_button);\n                }\n\n                // Add tag to internal list.\n                var tag_name_and_value = new_value.split(\":\");\n                settings.tags[tag_name_and_value[0]] = tag_name_and_value[1];\n\n                // Update toggle link text.\n                var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                toggle_link.text(new_text);\n\n                // Commit tag to server.\n                var zz = $(this);\n                $.ajax({\n                    url: settings.ajax_add_tag_url,\n                    data: { new_tag: new_value },\n                    error: function() {\n                        // Failed. Roll back changes and show alert.\n                        new_tag_button.remove();\n                        delete settings.tags[tag_name_and_value[0]];\n                        var new_text = settings.get_toggle_link_text_fn(\n                            settings.tags\n                        );\n                        toggle_link.text(new_text);\n                        alert(\"Add tag failed\");\n                    },\n                    success: function() {\n                        // Flush autocomplete cache because it's not out of date.\n                        // TODO: in the future, we could remove the particular item\n                        // that was chosen from the cache rather than flush it.\n                        zz.data(\"autocompleter\").cacheFlush();\n                    }\n                });\n\n                return false;\n            }\n        });\n\n        // Add autocomplete to input.\n        var format_item_func = function(\n            key,\n            row_position,\n            num_rows,\n            value,\n            search_term\n        ) {\n            var tag_name_and_value = value.split(\":\");\n            return tag_name_and_value.length === 1\n                ? tag_name_and_value[0]\n                : tag_name_and_value[1];\n        };\n        var autocomplete_options = {\n            selectFirst: false,\n            formatItem: format_item_func,\n            autoFill: false,\n            highlight: false\n        };\n        tag_input_field.autocomplete_verheul(\n            settings.ajax_autocomplete_tag_url,\n            autocomplete_options\n        );\n\n        // Initialize delete tag images for current tags.\n        this_obj.find(\".delete-tag-img\").each(function() {\n            init_delete_tag_image($(this));\n        });\n\n        // Initialize tag click function.\n        init_tag_click_function($(this), settings.tag_click_fn);\n\n        // Initialize \"add tag\" button.\n        add_tag_button.click(function() {\n            $(this).hide();\n\n            // Clicking on button is the same as clicking on the tag area.\n            tag_area.click();\n            return false;\n        });\n\n        //\n        // Set up tag area interactions; these are needed only if tags are editable.\n        //\n        if (settings.editable) {\n            // When the tag area blurs, go to \"view tag\" mode.\n            tag_area.bind(\"blur\", function(e) {\n                if (_.size(settings.tags) > 0) {\n                    add_tag_button.show();\n                    tag_input_field.hide();\n                    tag_area.removeClass(\"active-tag-area\");\n                    // tag_area.addClass(\"tooltip\");\n                } else {\n                    // No tags, so do nothing to ensure that input is still visible.\n                }\n            });\n\n            // On click, enable user to add tags.\n            tag_area.click(function(e) {\n                var is_active = $(this).hasClass(\"active-tag-area\");\n\n                // If a \"delete image\" object was pressed and area is inactive, do nothing.\n                if ($(e.target).hasClass(\"delete-tag-img\") && !is_active) {\n                    return false;\n                }\n\n                // If a \"tag name\" object was pressed and area is inactive, do nothing.\n                if ($(e.target).hasClass(\"tag-name\") && !is_active) {\n                    return false;\n                }\n\n                // Remove tooltip.\n                // $(this).removeClass(\"tooltip\");\n\n                // Hide add tag button, show tag_input field. Change background to show\n                // area is active.\n                $(this).addClass(\"active-tag-area\");\n                add_tag_button.hide();\n                tag_input_field.show();\n                tag_input_field.focus();\n\n                // Add handler to document that will call blur when the tag area is blurred;\n                // a tag area is blurred when a user clicks on an element outside the area.\n                var handle_document_click = function(e) {\n                    var check_click = function(tag_area, target) {\n                        var tag_area_id = tag_area.attr(\"id\");\n                        // Blur the tag area if the element clicked on is not in the tag area.\n                        if (target !== tag_area) {\n                            tag_area.blur();\n                            $(window).unbind(\"click.tagging_blur\");\n                            $(this).addClass(\"tooltip\");\n                        }\n                    };\n                    check_click(tag_area, $(e.target));\n                };\n                // TODO: we should attach the click handler to all frames in order to capture\n                // clicks outside the frame that this element is in.\n                //window.parent.document.onclick = handle_document_click;\n                //var temp = $(window.parent.document.body).contents().find(\"iframe\").html();\n                //alert(temp);\n                //$(document).parent().click(handle_document_click);\n                $(window).bind(\"click.tagging_blur\", handle_document_click);\n\n                return false;\n            });\n        }\n\n        // If using toggle link, hide the tag area. Otherwise, show the tag area.\n        if (settings.use_toggle_link) {\n            tag_area.hide();\n        }\n\n        //\n        // Helper functions.\n        //\n\n        //\n        // Collapse tag name + value into a single string.\n        //\n        function build_tag_str(tag_name, tag_value) {\n            return tag_name + (tag_value ? \":\" + tag_value : \"\");\n        }\n\n        // Initialize a \"delete tag image\": when click, delete tag from UI and send delete request to server.\n        function init_delete_tag_image(delete_img) {\n            $(delete_img).mouseenter(function() {\n                $(this).attr(\"src\", settings.delete_tag_img_rollover);\n            });\n            $(delete_img).mouseleave(function() {\n                $(this).attr(\"src\", settings.delete_tag_img);\n            });\n            $(delete_img).click(function() {\n                // Tag button is image's parent.\n                var tag_button = $(this).parent();\n\n                // Get tag name, value.\n                var tag_name_elt = tag_button.find(\".tag-name\").eq(0);\n                var tag_str = tag_name_elt.text();\n                var tag_name_and_value = tag_str.split(\":\");\n                var tag_name = tag_name_and_value[0];\n                var tag_value = tag_name_and_value[1];\n\n                var prev_button = tag_button.prev();\n                tag_button.remove();\n\n                // Remove tag from local list for consistency.\n                delete settings.tags[tag_name];\n\n                // Update toggle link text.\n                var new_text = settings.get_toggle_link_text_fn(settings.tags);\n                toggle_link.text(new_text);\n\n                // Delete tag.\n                $.ajax({\n                    url: settings.ajax_delete_tag_url,\n                    data: { tag_name: tag_name },\n                    error: function() {\n                        // Failed. Roll back changes and show alert.\n                        settings.tags[tag_name] = tag_value;\n                        if (prev_button.hasClass(\"tag-button\")) {\n                            prev_button.after(tag_button);\n                        } else {\n                            tag_area.prepend(tag_button);\n                        }\n                        alert(\"Remove tag failed\");\n\n                        toggle_link.text(\n                            settings.get_toggle_link_text_fn(settings.tags)\n                        );\n\n                        // TODO: no idea why it's necessary to set this up again.\n                        delete_img.mouseenter(function() {\n                            $(this).attr(\n                                \"src\",\n                                settings.delete_tag_img_rollover\n                            );\n                        });\n                        delete_img.mouseleave(function() {\n                            $(this).attr(\"src\", settings.delete_tag_img);\n                        });\n                    },\n                    success: function() {}\n                });\n\n                return true;\n            });\n        }\n\n        //\n        // Function that builds a tag button.\n        //\n        function build_tag_button(tag_str) {\n            // Build \"delete tag\" image.\n            var delete_img = $(\"<img/>\")\n                .attr(\"src\", settings.delete_tag_img)\n                .addClass(\"delete-tag-img\");\n            init_delete_tag_image(delete_img);\n\n            // Build tag button.\n            var tag_name_elt = $(\"<span>\")\n                .text(tag_str)\n                .addClass(\"tag-name\");\n            tag_name_elt.click(function() {\n                var tag_name_and_value = tag_str.split(\":\");\n                settings.tag_click_fn(\n                    tag_name_and_value[0],\n                    tag_name_and_value[1]\n                );\n                return true;\n            });\n\n            var tag_button = $(\"<span></span>\").addClass(\"tag-button\");\n            tag_button.append(tag_name_elt);\n            // Allow delete only if element is editable.\n            if (settings.editable) {\n                tag_button.append(delete_img);\n            }\n\n            return tag_button;\n        }\n    };\n\n    // ============================================================================\n    return init_tag_click_function;\n});\n"]}