{"version":3,"sources":["ui/peek-column-selector.js"],"names":["factory","define","amd","jQuery","RENAMABLE_HEADER_CLASS","control","disabled","type","Error","COLUMN_INDEX_DATA_KEY","JSON","stringify","multiselect","selected","validateControl","label","indexOf","$td","buildButton","$","addClass","BUTTON_CLASS","buildControlCell","columnIndex","html","setSelectedText","$button","selectedText","undefined","DISABLED_CLASS","buildSingleSelectCell","$cell","children","hasClass","selectClick","unselectedText","SELECTED_CLASS","eventData","trigger","this","parent","buildMultiSelectCell","key","multiselectClick","ev","data","val","toggleClass","CHANGE_EVENT","makeArray","selectedColumnIndeces","buildControlCells","$cells","push","find","map","i","e","buildControlRow","cellCount","$promptCell","$controlRow","append","count","$peek","columnCount","$peektable","rowCount","includePrompts","attr","id","ROW_CLASS","options","hideCommentRows","$commentRows","text","peekColumnSelector","$headers","defaults","PEEKCONTROL_CLASS","columnNames","length","$this","COLUMN_NAME_DATA_KEY","match","RegExp","commentChar","index","prevName","newColumnName","controls","topLeftContent","first","prepend","$topLeft","each","replace","name","renameColumns","click","prompt","parents","RENAME_EVENT","forEach","PROMPT_CLASS","fn","extend","call"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n    /** option defaults */\n    var defaults = {\n            /** does this control allow renaming headers? */\n            renameColumns: false,\n            /** does this control allow renaming headers? */\n            columnNames: [],\n            /** the comment character used by the peek's datatype */\n            commentChar: \"#\",\n            /** should comment rows be shown or hidden in the peek */\n            hideCommentRows: false,\n            /** should a column of row control prompts be used */\n            includePrompts: true,\n            /** what is the content of the top left cell (often a title) */\n            topLeftContent: \"Columns:\"\n        },\n        /** class added to the pre.peek element (to allow css on just the control) */\n        PEEKCONTROL_CLASS = \"peek-column-selector\",\n        /** the string of the event fired when a control row changes */\n        CHANGE_EVENT = \"peek-column-selector.change\",\n        /** the string of the event fired when a column is renamed */\n        RENAME_EVENT = \"peek-column-selector.rename\",\n        /** class added to the control rows */\n        ROW_CLASS = \"control\",\n        /** class added to the left-hand cells that serve as row prompts */\n        PROMPT_CLASS = \"control-prompt\",\n        /** class added to selected _cells_/tds */\n        SELECTED_CLASS = \"selected\",\n        /** class added to disabled/un-clickable cells/tds */\n        DISABLED_CLASS = \"disabled\",\n        /** class added to the clickable surface within a cell to select it */\n        BUTTON_CLASS = \"button\",\n        /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\n        RENAMABLE_HEADER_CLASS = \"renamable-header\",\n        /** the data key used for each cell to store the column index ('data-...') */\n        COLUMN_INDEX_DATA_KEY = \"column-index\",\n        /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\n        COLUMN_NAME_DATA_KEY = \"column-name\";\n\n    //TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n    //TODO: needs clean up, move handlers to outer scope\n\n    // ........................................................................\n    /** validate the control data sent in for each row */\n    function validateControl(control) {\n        if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n            throw new Error(\n                '\"disabled\" must be defined as an array of indeces: ' +\n                    JSON.stringify(control)\n            );\n        }\n        if (\n            control.multiselect &&\n            control.selected &&\n            jQuery.type(control.selected) !== \"array\"\n        ) {\n            throw new Error(\n                'Mulitselect rows need an array for \"selected\": ' +\n                    JSON.stringify(control)\n            );\n        }\n        if (!control.label || !control.id) {\n            throw new Error(\n                \"Peek controls need a label and id for each control row: \" +\n                    JSON.stringify(control)\n            );\n        }\n        if (\n            control.disabled &&\n            control.disabled.indexOf(control.selected) !== -1\n        ) {\n            throw new Error(\n                \"Selected column is in the list of disabled columns: \" +\n                    JSON.stringify(control)\n            );\n        }\n        return control;\n    }\n\n    /** build the inner control surface (i.e. button-like) */\n    function buildButton(control, columnIndex) {\n        return $(\"<div/>\")\n            .addClass(BUTTON_CLASS)\n            .text(control.label);\n    }\n\n    /** build the basic (shared) cell structure */\n    function buildControlCell(control, columnIndex) {\n        var $td = $(\"<td/>\")\n            .html(buildButton(control, columnIndex))\n            .attr(\"data-\" + COLUMN_INDEX_DATA_KEY, columnIndex);\n\n        // disable if index in disabled array\n        if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n            $td.addClass(DISABLED_CLASS);\n        }\n        return $td;\n    }\n\n    /** set the text of the control based on selected/un */\n    function setSelectedText($cell, control, columnIndex) {\n        var $button = $cell.children(\".\" + BUTTON_CLASS);\n        if ($cell.hasClass(SELECTED_CLASS)) {\n            $button.html(\n                control.selectedText !== undefined\n                    ? control.selectedText\n                    : control.label\n            );\n        } else {\n            $button.html(\n                control.unselectedText !== undefined\n                    ? control.unselectedText\n                    : control.label\n            );\n        }\n    }\n\n    /** build a cell for a row that only allows one selection */\n    function buildSingleSelectCell(control, columnIndex) {\n        // only one selection - selected is single index\n        var $cell = buildControlCell(control, columnIndex);\n        if (control.selected === columnIndex) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function selectClick(ev) {\n                var $cell = $(this);\n                // don't re-select or fire event if already selected\n                if (!$cell.hasClass(SELECTED_CLASS)) {\n                    // only one can be selected - remove selected on all others, add it here\n                    var $otherSelected = $cell\n                        .parent()\n                        .children(\".\" + SELECTED_CLASS)\n                        .removeClass(SELECTED_CLASS);\n                    $otherSelected.each(function() {\n                        setSelectedText($(this), control, columnIndex);\n                    });\n\n                    $cell.addClass(SELECTED_CLASS);\n                    setSelectedText($cell, control, columnIndex);\n\n                    // fire the event from the table itself, passing the id and index of selected\n                    var eventData = {},\n                        key = $cell.parent().attr(\"id\"),\n                        val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                    eventData[key] = val;\n                    $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n                }\n            });\n        }\n        return $cell;\n    }\n\n    /** build a cell for a row that allows multiple selections */\n    function buildMultiSelectCell(control, columnIndex) {\n        var $cell = buildControlCell(control, columnIndex);\n        // multiple selection - selected is an array\n        if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function multiselectClick(ev) {\n                var $cell = $(this);\n                // can be more than one selected - toggle selected on this cell\n                $cell.toggleClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n                var selectedColumnIndeces = $cell\n                    .parent()\n                    .find(\".\" + SELECTED_CLASS)\n                    .map(function(i, e) {\n                        return $(e).data(COLUMN_INDEX_DATA_KEY);\n                    });\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {},\n                    key = $cell.parent().attr(\"id\"),\n                    val = jQuery.makeArray(selectedColumnIndeces);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            });\n        }\n        return $cell;\n    }\n\n    /** iterate over columns in peek and create a control for each */\n    function buildControlCells(count, control) {\n        var $cells = [];\n        // build a control for each column - using a build fn based on control\n        for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n            $cells.push(\n                control.multiselect\n                    ? buildMultiSelectCell(control, columnIndex)\n                    : buildSingleSelectCell(control, columnIndex)\n            );\n        }\n        return $cells;\n    }\n\n    /** build a row of controls for the peek */\n    function buildControlRow(cellCount, control, includePrompts) {\n        var $controlRow = $(\"<tr/>\")\n            .attr(\"id\", control.id)\n            .addClass(ROW_CLASS);\n        if (includePrompts) {\n            var $promptCell = $(\"<td/>\")\n                .addClass(PROMPT_CLASS)\n                .text(control.label + \":\");\n            $controlRow.append($promptCell);\n        }\n        $controlRow.append(buildControlCells(cellCount, control));\n        return $controlRow;\n    }\n\n    // ........................................................................\n    /** add to the peek, using options for configuration, return the peek */\n    function peekColumnSelector(options) {\n        options = jQuery.extend(true, {}, defaults, options);\n\n        var $peek = $(this).addClass(PEEKCONTROL_CLASS),\n            $peektable = $peek.find(\"table\"),\n            // get the size of the tables - width and height, number of comment rows\n            columnCount = $peektable.find(\"th\").length,\n            rowCount = $peektable.find(\"tr\").length,\n            // get the rows containing text starting with the comment char (also make them grey)\n            $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n                var $this = $(this);\n                if (\n                    $this.text() &&\n                    $this.text().match(new RegExp(\"^\" + options.commentChar))\n                ) {\n                    return $(this)\n                        .css(\"color\", \"grey\")\n                        .parent()\n                        .get(0);\n                }\n                return null;\n            });\n\n        // should comment rows in the peek be hidden?\n        if (options.hideCommentRows) {\n            $commentRows.hide();\n            rowCount -= $commentRows.length;\n        }\n        //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n        // should a first column of control prompts be added?\n        if (options.includePrompts) {\n            var $topLeft = $(\"<th/>\")\n                .addClass(\"top-left\")\n                .text(options.topLeftContent)\n                .attr(\"rowspan\", rowCount);\n            $peektable\n                .find(\"tr\")\n                .first()\n                .prepend($topLeft);\n        }\n\n        // save either the options column name or the parsed text of each column header in html5 data attr and text\n        var $headers = $peektable\n            .find(\"th:not(.top-left)\")\n            .each(function(i, e) {\n                var $this = $(this),\n                    // can be '1.name' or '1'\n                    text = $this.text().replace(/^\\d+\\.*/, \"\"),\n                    name = options.columnNames[i] || text;\n                $this\n                    .attr(\"data-\" + COLUMN_NAME_DATA_KEY, name)\n                    .text(i + 1 + (name ? \".\" + name : \"\"));\n            });\n\n        // allow renaming of columns when the header is clicked\n        if (options.renameColumns) {\n            $headers\n                .addClass(RENAMABLE_HEADER_CLASS)\n                .click(function renameColumn() {\n                    // prompt for new name\n                    var $this = $(this),\n                        index =\n                            $this.index() + (options.includePrompts ? 0 : 1),\n                        prevName = $this.data(COLUMN_NAME_DATA_KEY),\n                        newColumnName = prompt(\"New column name:\", prevName);\n                    if (newColumnName !== null && newColumnName !== prevName) {\n                        // set the new text and data\n                        $this\n                            .text(\n                                index +\n                                    (newColumnName ? \".\" + newColumnName : \"\")\n                            )\n                            .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                            .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                        // fire event for new column names\n                        var columnNames = jQuery.makeArray(\n                            $this\n                                .parent()\n                                .children(\"th:not(.top-left)\")\n                                .map(function() {\n                                    return $(this).data(COLUMN_NAME_DATA_KEY);\n                                })\n                        );\n                        $this\n                            .parents(\".peek\")\n                            .trigger(RENAME_EVENT, columnNames);\n                    }\n                });\n        }\n\n        // build a row for each control\n        options.controls.forEach(function(control, i) {\n            validateControl(control);\n            var $controlRow = buildControlRow(\n                columnCount,\n                control,\n                options.includePrompts\n            );\n            $peektable.find(\"tbody\").append($controlRow);\n        });\n        return this;\n    }\n\n    // ........................................................................\n    // as jq plugin\n    jQuery.fn.extend({\n        peekColumnSelector: function $peekColumnSelector(options) {\n            return this.map(function() {\n                return peekColumnSelector.call(this, options);\n            });\n        }\n    });\n});\n"]}