{"version":3,"sources":["ui/filter-control.js"],"names":["factory","define","amd","jQuery","dropDownSelect","options","selected","isEmpty","$select","$","join","selectThis","event","newSelection","find","trigger","append","map","option","click","$this","this","parents","text","FilterControl","element","prototype","_renderKeySelect","key","filterControl","currFilter","filters","render","_triggerChange","extend","defaults","$element","$opSelect","_renderValueInput","values","$valueSelect","filter","$keySelect","keys","addClass","selection","_","findWhere","_renderOpSelect","$value","value","hasClass","ops","on","nonOptionsArgs","data","type","val","op","fn","makeArray","arguments","slice","DATA_KEY","apply"],"mappings":"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","file":"../../scripts/ui/filter-control.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\n    function dropDownSelect(options, selected) {\n        // replacement for vanilla select element using bootstrap dropdowns instead\n        selected = selected || (!_.isEmpty(options) ? options[0] : \"\");\n        var $select = $(\n            [\n                '<div class=\"dropdown-select btn-group\">',\n                '<button type=\"button\" class=\"btn btn-default\">',\n                '<span class=\"dropdown-select-selected\">' +\n                    selected +\n                    \"</span>\",\n                \"</button>\",\n                \"</div>\"\n            ].join(\"\\n\")\n        );\n\n        // if there's only one option, do not style/create as buttons, dropdown - use simple span\n        // otherwise, a dropdown displaying the current selection\n        if (options && options.length > 1) {\n            $select\n                .find(\"button\")\n                .addClass(\"dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .append(' <span class=\"caret\"></span>');\n            $select.append(\n                [\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    _.map(options, function(option) {\n                        return [\n                            '<li><a href=\"javascript:void(0)\">',\n                            option,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }).join(\"\\n\"),\n                    \"</ul>\"\n                ].join(\"\\n\")\n            );\n        }\n\n        // trigger 'change.dropdown-select' when a new selection is made using the dropdown\n        function selectThis(event) {\n            var $this = $(this),\n                $select = $this.parents(\".dropdown-select\"),\n                newSelection = $this.text();\n            $select.find(\".dropdown-select-selected\").text(newSelection);\n            $select.trigger(\"change.dropdown-select\", newSelection);\n        }\n\n        $select.find(\"a\").click(selectThis);\n        return $select;\n    }\n\n    //==============================================================================\n    /**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\n    function FilterControl(element, options) {\n        return this.init(element, options);\n    }\n    /** the data key that this object will be stored under in the DOM element */\n    FilterControl.prototype.DATA_KEY = \"filter-control\";\n\n    /** parses options, sets up instance vars, and does initial render */\n    FilterControl.prototype.init = function _init(element, options) {\n        options = options || { filters: [] };\n        this.$element = $(element).addClass(\"filter-control btn-group\");\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currFilter = this.options.filters[0];\n        return this.render();\n    };\n\n    /** render (or re-render) the controls on the element */\n    FilterControl.prototype.render = function _render() {\n        this.$element\n            .empty()\n            .append([\n                this._renderKeySelect(),\n                this._renderOpSelect(),\n                this._renderValueInput()\n            ]);\n        return this;\n    };\n\n    /** render the key dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderKeySelect = function __renderKeySelect() {\n        var filterControl = this;\n        var keys = this.options.filters.map(function(filter) {\n            return filter.key;\n        });\n        this.$keySelect = dropDownSelect(keys, this.currFilter.key)\n            .addClass(\"filter-control-key\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl.currFilter = _.findWhere(\n                    filterControl.options.filters,\n                    { key: selection }\n                );\n                // when the filter/key changes, re-render the control entirely\n                filterControl.render()._triggerChange();\n            });\n        return this.$keySelect;\n    };\n\n    /** render the op dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderOpSelect = function __renderOpSelect() {\n        var filterControl = this,\n            ops = this.currFilter.ops;\n        //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n        this.$opSelect = dropDownSelect(ops, ops[0])\n            .addClass(\"filter-control-op\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        return this.$opSelect;\n    };\n\n    /** render the value control, bind a change event to it, and return it */\n    FilterControl.prototype._renderValueInput = function __renderValueInput() {\n        var filterControl = this;\n        // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n        if (this.currFilter.values) {\n            this.$valueSelect = dropDownSelect(\n                this.currFilter.values,\n                this.currFilter.values[0]\n            ).on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        } else {\n            //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n            this.$valueSelect = $(\"<input/>\")\n                .addClass(\"form-control\")\n                .on(\"change\", function(event, value) {\n                    filterControl._triggerChange();\n                });\n        }\n        this.$valueSelect.addClass(\"filter-control-value\");\n        return this.$valueSelect;\n    };\n\n    /** return the current state/setting for the filter as a three key object: key, op, value */\n    FilterControl.prototype.val = function _val() {\n        var key = this.$element\n                .find(\".filter-control-key .dropdown-select-selected\")\n                .text(),\n            op = this.$element\n                .find(\".filter-control-op .dropdown-select-selected\")\n                .text(),\n            // handle either a dropdown or plain input\n            $value = this.$element.find(\".filter-control-value\"),\n            value = $value.hasClass(\"dropdown-select\")\n                ? $value.find(\".dropdown-select-selected\").text()\n                : $value.val();\n        return { key: key, op: op, value: value };\n    };\n\n    // single point of change for change event\n    FilterControl.prototype._triggerChange = function __triggerChange() {\n        this.$element.trigger(\"change.filter-control\", this.val());\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        filterControl: function $filterControl(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n            return this.map(function() {\n                var $this = $(this),\n                    data = $this.data(FilterControl.prototype.DATA_KEY);\n\n                if (jQuery.type(options) === \"object\") {\n                    data = new FilterControl($this, options);\n                    $this.data(FilterControl.prototype.DATA_KEY, data);\n                }\n                if (data && jQuery.type(options) === \"string\") {\n                    var fn = data[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(data, nonOptionsArgs);\n                    }\n                }\n                return this;\n            });\n        }\n    });\n});\n"]}