{"version":3,"sources":["ui/popupmenu.js"],"names":["define","jQuery","make_popupmenu","button_element","initial_options","element_menu_exists","data","bind","e","remove","setTimeout","$","menu_element","attr","options","appendTo","_","size","each","k","v","action","append","url","html","wrapper","width","css","pageY","x","pageX","Math","min","close_popup","window","frame_id","frame","max","document","scrollLeft","top","left","el","unbind","make_popup_menus","parent","frames","length","find","menu","this","event","link_dom","link","get","confirmtext","getAttribute","href","target","text","stopPropagation","confirm","open","click","preventDefault","box","addClass"],"mappings":"aAAAA,QAAQ,UAAW,SAASC,GACxB,aAYA,SAASC,EAAeC,EAAgBC,GAIpC,IAAIC,EAAsBF,EAAeG,KAAK,gBAC9CH,EAAeG,KAAK,eAAgBF,GAGhCC,GAEHF,EAAAI,KAAA,mBAAA,SAAAC,GAuGO,OArGRL,EAAAA,oBAAoBM,SAKhBC,WAAW,WAAXA,IAAAA,EAAsBC,EAClB,iCACIC,EACAC,KAAA,MAIAC,gBAEAH,EAAER,EAAFG,KAA0BS,gBAC7BC,EAAAC,KAAAH,IAAA,GACCI,EAAF,wBAAgBH,SAAeH,GAEvBD,EAAAO,KAAAJ,EAAA,SAAAK,EAAAC,GACA,GAAAA,EAAA,CAFJ,IAWOC,EAAAD,EAAAC,QAAAD,EACHR,EAAaU,OAKhBX,EAAA,aAAAW,OAlBLX,EAAA,OAqBIE,KAAA,OAAAO,EAAAG,KAbiBC,KAAKL,GAkBRM,MAAQC,UAUlBC,EAAIL,OACDM,EAAAA,aACDC,SAAAA,QAFVP,OAAAX,EAAA,oBAAAa,KAAAL,OAOA,IAAAM,EAAAd,EACA,uFAEIA,OAAMJ,GACFI,SAAE,QAELkB,EAHDrB,EAAAsB,MAAAL,EAAAC,QAAA,EAIHG,EALDE,KAAAC,IAMAC,EACAA,EAAAA,UAAcC,aACTvB,EAAIwB,QAAAA,QACLxB,EAAAc,GAAAC,QACIU,GAEPP,EAAAE,KAAAM,IAAAR,EAAAlB,EAAA2B,UAAAC,aAAA,GArBDd,EAAQE,KAwBLa,IAAPhC,EAAAoB,MA5EJa,KAAAZ,KAwDO,IAEHnB,WAAW,WAGP,IAAIuB,EAAc,SAASS,GACvB/B,EAAE+B,GAAInC,KAAK,oBAAqB,WAC5BI,EAAE,oBAAoBF,SACtBiC,EAAGC,OAAO,wBAGlBV,EAAYtB,EAAEuB,OAAOI,WAwBxBM,EAAAA,EAAiBC,OAA1BL,IAAkCF,WAC9B,IAAA,IAAAH,EAAAD,OAAAM,IAAAM,OAAAC,OAAAZ,KAIKa,EAFcV,EAAAA,OAAnBE,IAAAM,OAAAX,GAAAG,YAKQ,KAEA,IA7HZ,IAAA3B,EAAAV,EAgLA,OACIC,eAAgBA,EAChB0C,iBAtCwB,SAAAC,GAGIA,EAAAA,GAAAP,SACA3B,EAAAkC,GACIX,KAAAA,kBACAhB,KAAA,WACH,IAAAJ,KACGmC,EAAAtC,EAAAuC,MAGPD,EAAAD,KAAA,KAVD9B,KAUO,WACHiC,IAAAA,EAAAA,EAAAA,MACHC,EAAAC,EAAAC,IAAA,GACJC,EAAAH,EAAAI,aAAA,WAjBLC,EAAAL,EAAAI,aAAA,QAmBHE,EAAAN,EAAAI,aAAA,UAML1C,EAAAuC,EAAAM,QAHYd,GAIEtC,IAAKkD,EACbG,OADkC,SACfT,GADzB,IAAAI,GAAAM,QAAAN,GAAA,CAMoBzC,GAApB4C,EAEA,OADAxB,OAAA4B,KAAAL,EAAAC,IACA,EAtBwBL,EAAKU,aA4BrB7D,EADb8D,mBAzCoC,OAwB/B,IAAIC,EAAMtD,EAAEkC,GAAQG,KAAK,IAAMC,EAAKpC,KAAK,cAIzCoD,EAAIjB,KAAK,KAAKzC,KAAK,QAAS,SAASC,GAEjC,OADAA,EAAEoD,mBACK,IAIX1D,EAAe+D,EAAKnD,GACpBmD,EAAIC,SAAS,SACbjB,EAAKxC","file":"../../scripts/ui/popupmenu.js","sourcesContent":["define([\"jquery\"], function(jQuery) {\n    \"use_strict\";\n\n    var $ = jQuery;\n\n    // ============================================================================\n    // TODO: unify popup menus and/or eliminate this\n    /**\n * Sets up popupmenu rendering and binds options functions to the appropriate links.\n * initial_options is a dict with text describing the option pointing to either (a) a\n * function to perform; or (b) another dict with two required keys, 'url' and 'action' (the\n * function to perform. (b) is useful for exposing the underlying URL of the option.\n */\n    function make_popupmenu(button_element, initial_options) {\n        /*  Use the $.data feature to store options with the link element.\n        This allows options to be changed at a later time\n    */\n        var element_menu_exists = button_element.data(\"menu_options\");\n        button_element.data(\"menu_options\", initial_options);\n\n        // If element already has menu, nothing else to do since HTML and actions are already set.\n        if (element_menu_exists) {\n            return;\n        }\n\n        button_element.bind(\"click.show_popup\", function(e) {\n            // Close existing visible menus\n            $(\".popmenu-wrapper\").remove();\n\n            // Need setTimeouts so clicks don't interfere with each other\n            setTimeout(function() {\n                // Dynamically generate the wrapper holding all the selectable options of the menu.\n                var menu_element = $(\n                    \"<ul class='dropdown-menu' id='\" +\n                        button_element.attr(\"id\") +\n                        \"-menu'></ul>\"\n                );\n                var options = button_element.data(\"menu_options\");\n                if (_.size(options) <= 0) {\n                    $(\"<li>No Options.</li>\").appendTo(menu_element);\n                }\n                $.each(options, function(k, v) {\n                    if (v) {\n                        // Action can be either an anonymous function and a mapped dict.\n                        var action = v.action || v;\n                        menu_element.append(\n                            $(\"<li></li>\").append(\n                                $(\"<a>\")\n                                    .attr(\"href\", v.url)\n                                    .html(k)\n                                    .click(action)\n                            )\n                        );\n                    } else {\n                        menu_element.append(\n                            $(\"<li></li>\")\n                                .addClass(\"head\")\n                                .append($(\"<a href='#'></a>\").html(k))\n                        );\n                    }\n                });\n                var wrapper = $(\n                    \"<div class='popmenu-wrapper' style='position: absolute;left: 0; top: -1000;'></div>\"\n                )\n                    .append(menu_element)\n                    .appendTo(\"body\");\n\n                var x = e.pageX - wrapper.width() / 2;\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() +\n                        $(window).width() -\n                        $(wrapper).width() -\n                        5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n\n                wrapper.css({\n                    top: e.pageY,\n                    left: x\n                });\n            }, 10);\n\n            setTimeout(function() {\n                // Bind click event to current window and all frames to remove any visible menus\n                // Bind to document object instead of window object for IE compat\n                var close_popup = function(el) {\n                    $(el).bind(\"click.close_popup\", function() {\n                        $(\".popmenu-wrapper\").remove();\n                        el.unbind(\"click.close_popup\");\n                    });\n                };\n                close_popup($(window.document)); // Current frame\n                close_popup($(window.top.document)); // Parent frame\n                for (var frame_id = window.top.frames.length; frame_id--; ) {\n                    // Sibling frames\n                    var frame = $(window.top.frames[frame_id].document);\n                    close_popup(frame);\n                }\n            }, 50);\n\n            return false;\n        });\n    }\n\n    /**\n *  Convert two seperate (often adjacent) divs into galaxy popupmenu\n *  - div 1 contains a number of anchors which become the menu options\n *  - div 1 should have a 'popupmenu' attribute\n *  - this popupmenu attribute contains the id of div 2\n *  - div 2 becomes the 'face' of the popupmenu\n *\n *  NOTE: make_popup_menus finds and operates on all divs with a popupmenu attr (no need to point it at something)\n *          but (since that selector searches the dom on the page), you can send a parent in\n *  NOTE: make_popup_menus, and make_popupmenu are horrible names\n */\n    function make_popup_menus(parent) {\n        // find all popupmenu menu divs (divs that contains anchors to be converted to menu options)\n        //  either in the parent or the document if no parent passed\n        parent = parent || document;\n        $(parent)\n            .find(\"div[popupmenu]\")\n            .each(function() {\n                var options = {};\n                var menu = $(this);\n\n                // find each anchor in the menu, convert them into an options map: { a.text : click_function }\n                menu.find(\"a\").each(function() {\n                    var link = $(this),\n                        link_dom = link.get(0),\n                        confirmtext = link_dom.getAttribute(\"confirm\"),\n                        href = link_dom.getAttribute(\"href\"),\n                        target = link_dom.getAttribute(\"target\");\n\n                    // no href - no function (gen. a label)\n                    if (!href) {\n                        options[link.text()] = null;\n                    } else {\n                        options[link.text()] = {\n                            url: href,\n                            action: function(event) {\n                                // if theres confirm text, send the dialog\n                                if (!confirmtext || confirm(confirmtext)) {\n                                    // link.click() doesn't use target for some reason,\n                                    // so manually do it here.\n                                    if (target) {\n                                        window.open(href, target);\n                                        return false;\n                                    } else {\n                                        // For all other links, do the default action.\n                                        link.click();\n                                    }\n                                } else {\n                                    event.preventDefault();\n                                }\n                            }\n                        };\n                    }\n                });\n                // locate the element with the id corresponding to the menu's popupmenu attr\n                var box = $(parent).find(\"#\" + menu.attr(\"popupmenu\"));\n\n                // For menus with clickable link text, make clicking on the link go through instead\n                // of activating the popup menu\n                box.find(\"a\").bind(\"click\", function(e) {\n                    e.stopPropagation(); // Stop bubbling so clicking on the link goes through\n                    return true;\n                });\n\n                // attach the click events and menu box building to the box element\n                make_popupmenu(box, options);\n                box.addClass(\"popup\");\n                menu.remove();\n            });\n    }\n\n    // ============================================================================\n    return {\n        make_popupmenu: make_popupmenu,\n        make_popup_menus: make_popup_menus\n    };\n});\n"]}