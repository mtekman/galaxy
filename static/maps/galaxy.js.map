{"version":3,"sources":["galaxy.js"],"names":["define","_","Backbone","BASE_MVC","userModel","metricsLogger","addLogging","localize","GalaxyApp","options","bootstrapped","this","_init","localDebugging","NAMESPACE_KEY","DEBUGGING_KEY","self","localStorage","getItem","storageErr","log","session_csrf_token","_initLogger","debug","Events","logger","console","_initLocale","_processOptions","root","params","_initConfig","config","prototype","defaultOptions","patchExisting","loggerOptions","defaults","k","user","_setUpListeners","trigger","patchWith","hasOwnProperty","consoleLogger","_patchGalaxy","emit","_l","consoleLevel","MetricsLogger","ALL","consoleNamespaceWhitelist","userJSON","split","map","i","data","arguments","Array","slice","call","xhr","url","location","debugging","window","setting","undefined","_initUser","removeItem","debuggingNamespaces","lastAjax","$","document","bind","ev","err","namespaces","csv","setItem","newSettings","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"libs/backbone\",\n        \"mvc/base-mvc\",\n        \"mvc/user/user-model\",\n        \"utils/metrics-logger\",\n        \"utils/add-logging\",\n        \"utils/localization\"\n    ],\n    function(\n        _,\n        Backbone,\n        BASE_MVC,\n        userModel,\n        metricsLogger,\n        addLogging,\n        localize\n    ) {\n        // TODO: move into a singleton pattern and have dependents import Galaxy\n        // ============================================================================\n        /** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\n        function GalaxyApp(options, bootstrapped) {\n            var self = this;\n            return self._init(options || {}, bootstrapped || {});\n        }\n\n        // add logging shortcuts for this object\n        addLogging(GalaxyApp, \"GalaxyApp\");\n\n        // a debug flag can be set via local storage and made available during script/page loading\n        var DEBUGGING_KEY = \"galaxy:debug\",\n            NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\",\n            localDebugging = false;\n        try {\n            localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n        } catch (storageErr) {\n            console.log(\n                localize(\"localStorage not available for debug flag retrieval\")\n            );\n        }\n\n        /** initalize options and sub-components */\n        GalaxyApp.prototype._init = function __init(options, bootstrapped) {\n            var self = this;\n            _.extend(self, Backbone.Events);\n            if (localDebugging) {\n                self.logger = console;\n                console.debug(\n                    \"debugging galaxy:\",\n                    \"options:\",\n                    options,\n                    \"bootstrapped:\",\n                    bootstrapped\n                );\n            }\n\n            self._processOptions(options);\n\n            // add root and url parameters\n            self.root = options.root || \"/\";\n            self.params = options.params || {};\n            self.session_csrf_token = options.session_csrf_token || null;\n\n            self._initConfig(options.config || {});\n            self._patchGalaxy(window.Galaxy);\n\n            self._initLogger(self.options.loggerOptions || {});\n            // at this point, either logging or not and namespaces are enabled - chat it up\n            self.debug(\"GalaxyApp.options: \", self.options);\n            self.debug(\"GalaxyApp.config: \", self.config);\n            self.debug(\"GalaxyApp.logger: \", self.logger);\n\n            self._initLocale();\n            self.debug(\"GalaxyApp.localize: \", self.localize);\n\n            self.config = options.config || {};\n            self.debug(\"GalaxyApp.config: \", self.config);\n\n            self._initUser(options.user || {});\n            self.debug(\"GalaxyApp.user: \", self.user);\n\n            self._setUpListeners();\n            self.trigger(\"ready\", self);\n\n            return self;\n        };\n\n        /** default options */\n        GalaxyApp.prototype.defaultOptions = {\n            /** monkey patch attributes from existing window.Galaxy object? */\n            patchExisting: true,\n            /** root url of this app */\n            root: \"/\",\n            session_csrf_token: null\n        };\n\n        /** filter to options present in defaultOptions (and default to them) */\n        GalaxyApp.prototype._processOptions = function _processOptions(\n            options\n        ) {\n            var self = this,\n                defaults = self.defaultOptions;\n\n            self.options = {};\n            for (var k in defaults) {\n                if (defaults.hasOwnProperty(k)) {\n                    self.options[k] = options.hasOwnProperty(k)\n                        ? options[k]\n                        : defaults[k];\n                }\n            }\n            return self;\n        };\n\n        /** parse the config and any extra info derived from it */\n        GalaxyApp.prototype._initConfig = function _initConfig(config) {\n            var self = this;\n            self.config = config;\n\n            // give precendence to localdebugging for this setting\n            self.config.debug = localDebugging || self.config.debug;\n\n            return self;\n        };\n\n        /** add an option from options if the key matches an option in defaultOptions */\n        GalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n            var self = this;\n            // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n            if (self.options.patchExisting && patchWith) {\n                // self.debug( 'found existing Galaxy object:', patchWith );\n                // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n                //TODO: move those attributes to more formal assignment in GalaxyApp\n                for (var k in patchWith) {\n                    if (patchWith.hasOwnProperty(k)) {\n                        // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                        self[k] = patchWith[k];\n                    }\n                }\n            }\n        };\n\n        /** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\n        GalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n            var self = this;\n\n            // default to console logging at the debug level if the debug flag is set\n            if (self.config.debug) {\n                loggerOptions.consoleLogger =\n                    loggerOptions.consoleLogger || console;\n                loggerOptions.consoleLevel =\n                    loggerOptions.consoleLevel ||\n                    metricsLogger.MetricsLogger.ALL;\n                // load any logging namespaces from localStorage if we can\n                try {\n                    loggerOptions.consoleNamespaceWhitelist = localStorage\n                        .getItem(NAMESPACE_KEY)\n                        .split(\",\");\n                } catch (storageErr) {}\n            }\n\n            self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n            self.emit = {};\n            [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function(\n                i\n            ) {\n                self.emit[i] = function(data) {\n                    self.logger.emit(\n                        i,\n                        arguments[0],\n                        Array.prototype.slice.call(arguments, 1)\n                    );\n                };\n            });\n\n            if (self.config.debug) {\n                // add this logger to mvc's loggable mixin so that all models can use the logger\n                BASE_MVC.LoggableMixin.logger = self.logger;\n            }\n            return self;\n        };\n\n        /** add the localize fn to this object and the window namespace (as '_l') */\n        GalaxyApp.prototype._initLocale = function _initLocale(options) {\n            var self = this;\n            self.debug(\"_initLocale:\", options);\n            self.localize = localize;\n            // add to window as global shortened alias\n            // TODO: temporary - remove when can require for plugins\n            window._l = self.localize;\n            return self;\n        };\n\n        /** set up the current user as a Backbone model (mvc/user/user-model) */\n        GalaxyApp.prototype._initUser = function _initUser(userJSON) {\n            var self = this;\n            self.debug(\"_initUser:\", userJSON);\n            self.user = new userModel.User(userJSON);\n            self.user.logger = self.logger;\n            return self;\n        };\n\n        /** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\n        GalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n            var self = this;\n\n            // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n            /** cached info about the last ajax call made through jQuery */\n            self.lastAjax = {};\n            $(document).bind(\"ajaxSend\", function(ev, xhr, options) {\n                var data = options.data;\n                try {\n                    data = JSON.parse(data);\n                } catch (err) {}\n\n                self.lastAjax = {\n                    url: location.href.slice(0, -1) + options.url,\n                    data: data\n                };\n                //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n            });\n            return self;\n        };\n\n        /** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\n        GalaxyApp.prototype.debugging = function _debugging(setting) {\n            var self = this;\n            try {\n                if (setting === undefined) {\n                    return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n                }\n                if (setting) {\n                    localStorage.setItem(DEBUGGING_KEY, true);\n                    return true;\n                }\n\n                localStorage.removeItem(DEBUGGING_KEY);\n                // also remove all namespaces\n                self.debuggingNamespaces(null);\n            } catch (storageErr) {\n                console.log(\n                    localize(\n                        \"localStorage not available for debug flag retrieval\"\n                    )\n                );\n            }\n            return false;\n        };\n\n        /** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\n        GalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(\n            namespaces\n        ) {\n            var self = this;\n            try {\n                if (namespaces === undefined) {\n                    var csv = localStorage.getItem(NAMESPACE_KEY);\n                    return typeof csv === \"string\" ? csv.split(\",\") : [];\n                } else if (namespaces === null) {\n                    localStorage.removeItem(NAMESPACE_KEY);\n                } else {\n                    localStorage.setItem(NAMESPACE_KEY, namespaces);\n                }\n                var newSettings = self.debuggingNamespaces();\n                if (self.logger) {\n                    self.logger.options.consoleNamespaceWhitelist = newSettings;\n                }\n                return newSettings;\n            } catch (storageErr) {\n                console.log(\n                    localize(\n                        \"localStorage not available for debug namespace retrieval\"\n                    )\n                );\n            }\n        };\n\n        /** string rep */\n        GalaxyApp.prototype.toString = function toString() {\n            var userEmail = this.user\n                ? this.user.get(\"email\") || \"(anonymous)\"\n                : \"uninitialized\";\n            return \"GalaxyApp(\" + userEmail + \")\";\n        };\n\n        // ============================================================================\n        return {\n            GalaxyApp: GalaxyApp\n        };\n    }\n);\n"]}