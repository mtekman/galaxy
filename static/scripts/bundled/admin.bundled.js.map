{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/apps/panels/admin-panel.js","webpack:///./galaxy/scripts/mvc/grid/grid-view.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js","webpack:///./galaxy/scripts/mvc/ui/ui-options.js","webpack:///./galaxy/scripts/mvc/ui/ui-list.js","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js","webpack:///./galaxy/scripts/mvc/ui/ui-table.js","webpack:///./galaxy/scripts/mvc/form/form-data.js","webpack:///./galaxy/scripts/mvc/grid/grid-model.js","webpack:///./galaxy/scripts/mvc/grid/grid-template.js","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js","webpack:///./galaxy/scripts/mvc/form/form-section.js","webpack:///./galaxy/scripts/mvc/form/form-repeat.js","webpack:///./galaxy/scripts/mvc/form/form-input.js","webpack:///./galaxy/scripts/mvc/form/form-parameters.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-genomespace.js","webpack:///./galaxy/scripts/mvc/tool/tool-genomespace.js","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js","webpack:///./galaxy/scripts/layout/router.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js","webpack:///./galaxy/scripts/mvc/form/form-view.js"],"names":["webpackJsonp","10","module","exports","__webpack_require__","Backbone","$","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","Utils","ButtonDefault","View","extend","initialize","options","this","model","Model","id","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","set","setElement","attr","append","$icon","$title","$progress","$progress_bar","listenTo","render","self","attributes","$el","removeClass","addClass","off","on","hide","onclick","tooltip","placement","css","width","prop","html","show","disable","enable","unwait","setIcon","ButtonLink","href","target","ButtonCheck","icons","value","onchange","get","new_val","total","ButtonIcon","$button","ButtonMenu","$menu","pull","onunload","visible","tag","collection","Collection","$root","display","where","length","e","preventDefault","remove","each","submodel","suboptions","$link","divider","addMenu","add","merge","apply","call","158","_","jQuery","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","window","app","bootstrapped","Galaxy","debug","AdminRouter","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)repositories","(/)admin(/)forms","(/)admin(/)form(/)(:form_id)","authenticate","args","name","user","show_users","page","url_base","root","url_data","params","dict_format","show_roles","show_groups","show_repositories","show_tool_versions","show_quotas","show_forms","show_form","form_id","form_defs","reset_user_password","url","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","create_form","edit_form","config","active_view","setWindowTitle","Left","159","_l","settings","message","status","categories","items","enabled","enable_quotas","allow_user_impersonation","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","_template","empty","category","$section","_templateSection","$entries","find","item","text","router","push","join","toString","16","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","is","slideToggle","add_filter_condition","filters","v","k","ajax","param","success","response","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","top","currHistoryPanel","loadCurrentHistory","allow_title_display","replace","header","body","footer","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","val","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","filter","change","rating","set_page","execute","index","button","popup","operation","_add_operation","operation_config","label","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","findWhere","operations","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","advanced_search","method","type","data","error","alert","response_text","insert","json","parseJSON","complete","17","Buttons","data2","error_text","empty_text","multiple","searchable","optional","readonly","individual","pagesize","_changeData","_changeDisabled","_changeWait","_changeVisible","_changeValue","_renderSearchable","_renderClassic","$select","_getValue","trigger","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","height","minHeight","Math","max","select2","all_button","option","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","callback","slice","more","formatResult","result","escape","reduce","memo","_setValue","isArray","first","exists","d","sorter","keep","sort","update","setOnChange","selected","a","b","isEmpty","18","Base","$message","$options","_templateOptions","_templateOption","_messageShow","values","BaseIcons","pair","Radio","prototype","Checkbox","RadioButton","closest","19","Portlet","Ui","Message","portlet","Select","i","v_id","v_name","_refresh","lst","_templateRow","20","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","22","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","events","dblclick","addHeader","appendHeader","align","wrapper","fade","_commit","del","delAll","before","after","size","fadeIn","_onclick","old_value","_ondblclick","23","Manager","checksum","sum","section","field","field_list","JSON","stringify","collapsed","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","node","input","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","matchModel","visitInputs","inputs","matchResponse","search","new_id","separator","Array","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","key","cache","j","emit","27","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","28","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","str","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","29","step","precise","$text","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","30","Options","header_index","list","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","31","Repeat","InputElement","Parameters","parameters","input_def","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","hidden","sub_section","_append","sub_section_id","block_index","repeat","ondel","onnew","n_cache","default","hideOptions","input_element","help","collapsible","collapsible_button","expanded","expand","hide_label","text_value","collapsible_preview","argument","color","style","backdrop","fixed","32","button_new","$list","button_delete","hideOperation","33","app_options","text_enable","text_disable","cls_enable","cls_disable","always_refresh","$field","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title_text","$error_text","$error","$backdrop","reset","help_text","help_argument","collapsible_state","34","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","Drilldown","area","str_value","Input","placeholder","datalist","_fieldSlider","Slider","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldUpload","Upload","35","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","36","Table","List","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","37","ftpfile_list","38","GenomespaceBrowser","browse_button","browseGenomeSpace","filename_textbox","token_textbox","openFileBrowser","successCallback","destination","token","39","GS_UI_URL","genomespace_ui_url","GS_UPLOAD_URL","newWin","open","successCalBack","addEventListener","focus","setCallbackOnGSUploadError","40","colors","standard","base","theme","$panel","$view","$value","$header","_build","$boxes","fadeOut","_templateCheck","rgb","hex","_content","line_def","$content","_templateContent","$line","$box","_templateBox","bottom","44","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","persistent","5","Modal","Label","tagName","new_title","messageForDisplay","timeout","clearTimeout","UnescapedMessage","autocomplete","source","request","_onchange","attr_name","removeAttr","$hidden","$file","$wait","_readFile","file","files","reader","FileReader","onload","readAsText","Button","58","Form","done","form","buttons","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","parents","animate","scrollTop","8","scrollable","nopadding","onchange_title","$body","$title_icon","$buttons","$operations","collapse","make_text_editable","on_finish","enableButton","disableButton","showOperation","setOperation","9","FormSection","FormData","initial_errors","hide_operations","new_model","isEqual","new_options","opt","active","is_dynamic","highlight","silent","offset","errors","error_messages","_renderForm","current_check","refresh_on_change","new_check"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This module contains all button views. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"btn btn-default\",\n                wait: false,\n                wait_text: \"Sending...\",\n                wait_cls: \"btn btn-info\",\n                disabled: false,\n                percentage: -1\n            }).set(options);\n            this.setElement($(\"<button/>\").attr(\"type\", \"button\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\")).append(this.$progress = $(\"<div/>\").append(this.$progress_bar = $(\"<div/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"ui-button-default\").addClass(options.disabled && \"disabled\").attr(\"id\", options.id).attr(\"disabled\", options.disabled).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                options.onclick && !self.disabled && options.onclick();\n            }).tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress.addClass(\"progress\").css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar.addClass(\"progress-bar\").css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function show() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function hide() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function setIcon(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"\"\n            }).set(options);\n            this.setElement($(\"<a/>\").append(this.$icon = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr({\n                id: options.id,\n                href: options.href || \"javascript:void(0)\",\n                title: options.title,\n                target: options.target || \"_top\",\n                disabled: options.disabled\n            }).tooltip({ placement: \"bottom\" }).off(\"click\").on(\"click\", function () {\n                options.onclick && !options.disabled && options.onclick();\n            });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"Select/Unselect all\",\n                icons: [\"fa-square-o\", \"fa-minus-square-o\", \"fa-check-square-o\"],\n                value: 0,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$icon = $(\"<span/>\")).append(this.$title = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass(\"ui-button-check\").off(\"click\").on(\"click\", function () {\n                self.model.set(\"value\", self.model.get(\"value\") === 0 && 2 || 0);\n                options.onclick && options.onclick();\n            });\n            this.$title.html(options.title);\n            this.$icon.removeClass().addClass(\"icon fa ui-margin-right\").addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function value(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = new_val !== total && 1 || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"ui-button-icon\",\n                disabled: false\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$button = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && \"disabled\").attr(\"disabled\", options.disabled).attr(\"id\", options.id).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                !options.disabled && options.onclick && options.onclick();\n            });\n            this.$button.addClass(\"button\").tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: \"\",\n                title: \"\",\n                pull: \"right\",\n                icon: null,\n                onclick: null,\n                cls: \"ui-button-icon ui-button-menu\",\n                tooltip: \"\",\n                target: \"\",\n                href: \"\",\n                onunload: null,\n                visible: true,\n                tag: \"\"\n            }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement($(\"<div/>\").append(this.$root = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(this.collection, \"change add remove reset\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"dropdown\").addClass(options.cls).attr(\"id\", options.id).css({\n                display: options.visible && this.collection.where({ visible: true }).length > 0 ? \"block\" : \"none\"\n            });\n            this.$root.addClass(\"root button dropdown-toggle\").attr(\"data-toggle\", \"dropdown\").tooltip({ title: options.tooltip, placement: \"bottom\" }).off(\"click\").on(\"click\", function (e) {\n                $(\".tooltip\").hide();\n                e.preventDefault();\n                options.onclick && options.onclick();\n            });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.removeClass().addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\").addClass(\"menu dropdown-menu\").addClass(\"pull-\" + self.model.get(\"pull\")).attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function (submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\").addClass(\"dropdown-item\").attr({\n                        href: suboptions.href,\n                        target: suboptions.target\n                    }).append($(\"<i/>\").addClass(\"fa\").addClass(suboptions.icon).css(\"display\", suboptions.icon ? \"inline-block\" : \"none\")).append(suboptions.title).on(\"click\", function (e) {\n                        if (suboptions.onclick) {\n                            e.preventDefault();\n                            suboptions.onclick();\n                        }\n                    });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function addMenu(options) {\n            this.collection.add(Utils.merge(options, {\n                title: \"\",\n                target: \"\",\n                href: \"\",\n                onclick: null,\n                divider: false,\n                visible: true,\n                icon: null,\n                cls: \"button-menu btn-group\"\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 158:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(_) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    GalaxyApp = __webpack_require__(42).GalaxyApp,\n    AdminPanel = __webpack_require__(159),\n    FormWrapper = __webpack_require__(58),\n    GridView = __webpack_require__(16),\n    Ui = __webpack_require__(5),\n    QueryStringParsing = __webpack_require__(11),\n    Router = __webpack_require__(44),\n    Utils = __webpack_require__(3),\n    Page = __webpack_require__(43);\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)repositories\": \"show_repositories\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function authenticate(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function show_users() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/users_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_roles: function show_roles() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/roles_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_groups: function show_groups() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/groups_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_repositories: function show_repositories() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin_toolshed/browse_repositories\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_tool_versions: function show_tool_versions() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/tool_versions_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_quotas: function show_quotas() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/quotas_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_forms: function show_forms() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"forms/forms_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_form: function show_form(form_id) {\n            var id = \"?id=\" + QueryStringParsing.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function () {\n        _.extend(options.config, { active_view: \"admin\" });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(_.extend(options, {\n            Left: AdminPanel,\n            Router: AdminRouter\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 159:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nvar _l = __webpack_require__(4);\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([{\n            title: \"Server\",\n            items: [{\n                title: \"Data types\",\n                url: \"admin/view_datatypes_registry\"\n            }, {\n                title: \"Data tables\",\n                url: \"admin/view_tool_data_tables\"\n            }, {\n                title: \"Data libraries\",\n                url: \"library_admin/browse_libraries\"\n            }, {\n                title: \"Display applications\",\n                url: \"admin/display_applications\"\n            }, {\n                title: \"Manage jobs\",\n                url: \"admin/jobs\"\n            }, {\n                title: \"Local data\",\n                url: \"data_manager\"\n            }]\n        }, {\n            title: \"User Management\",\n            items: [{\n                title: \"Users\",\n                url: \"admin/users\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Quotas\",\n                url: \"admin/quotas\",\n                target: \"__use_router__\",\n                enabled: self.config.enable_quotas\n            }, {\n                title: \"Groups\",\n                url: \"admin/groups\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Roles\",\n                url: \"admin/roles\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Forms\",\n                url: \"admin/forms\",\n                target: \"__use_router__\"\n            }, {\n                title: \"API keys\",\n                url: \"userskeys/all_users\"\n            }, {\n                title: \"Impersonate a user\",\n                url: \"admin/impersonate\",\n                enabled: self.config.allow_user_impersonation\n            }]\n        }, {\n            title: \"Tool Management\",\n            items: [{\n                title: \"Install new tools\",\n                url: \"admin_toolshed/browse_tool_sheds\",\n                enabled: self.settings.is_tool_shed_installed\n            }, {\n                title: \"Install new tools (Beta)\",\n                url: \"admin_toolshed/browse_toolsheds\",\n                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            }, {\n                title: \"Monitor installation\",\n                url: \"admin_toolshed/monitor_repository_installation\",\n                enabled: self.settings.installing_repository_ids\n            }, {\n                title: \"Manage tools\",\n                url: \"admin/repositories\",\n                enabled: self.settings.is_repo_installed,\n                target: \"__use_router__\"\n            }, {\n                title: \"Manage metadata\",\n                url: \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: \"Manage whitelist\",\n                url: \"admin/sanitize_whitelist\"\n            }, {\n                title: \"Manage dependencies\",\n                url: \"admin/manage_tool_dependencies\"\n            }, {\n                title: \"View lineage\",\n                url: \"admin/tool_versions\",\n                target: \"__use_router__\"\n            }, {\n                title: \"View migration stages\",\n                url: \"admin/review_tool_migration_stages\"\n            }, {\n                title: \"View error logs\",\n                url: \"admin/tool_errors\"\n            }]\n        }]);\n        this.setElement(this._template());\n    },\n\n    render: function render() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function (category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function (item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\").attr({ href: self.root + item.url }).text(_l(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function (e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append($(\"<div/>\").addClass(\"ui-side-section-body-title\").append($link));\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page.$(\"#galaxy_main\").prop(\"src\", this.root + \"admin/center?message=\" + this.message + \"&status=\" + this.status);\n    },\n\n    _templateSection: function _templateSection(options) {\n        return [\"<div>\", '<div class=\"ui-side-section-title\">' + _l(options.title) + \"</div>\", '<div class=\"ui-side-section-body\"/>', \"</div>\"].join(\"\");\n    },\n\n    _template: function _template() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function toString() {\n        return \"adminPanel\";\n    }\n});\n\nmodule.exports = AdminPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(27), __webpack_require__(28), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n    // grid view\n    return Backbone.View.extend({\n        // model\n        grid: null,\n\n        // Initialize\n        initialize: function initialize(grid_config) {\n            this.grid = new GridModel();\n            this.dict_format = grid_config.dict_format;\n            this.title = grid_config.title;\n            var self = this;\n            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n                // Put tag name and value together.\n                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n                var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                if (!advanced_search) {\n                    $(\"#standard-search\").slideToggle(\"fast\");\n                    $(\"#advanced-search\").slideToggle(\"fast\");\n                }\n                self.add_filter_condition(\"tags\", tag);\n            };\n\n            // set element\n            if (this.dict_format) {\n                this.setElement(\"<div/>\");\n                if (grid_config.url_base && !grid_config.items) {\n                    var url_data = grid_config.url_data || {};\n                    _.each(grid_config.filters, function (v, k) {\n                        url_data[\"f-\" + k] = v;\n                    });\n                    $.ajax({\n                        url: grid_config.url_base + \"?\" + $.param(url_data),\n                        success: function success(response) {\n                            response.embedded = grid_config.embedded;\n                            response.filters = grid_config.filters || {};\n                            self.init_grid(response);\n                        }\n                    });\n                } else {\n                    this.init_grid(grid_config);\n                }\n            } else {\n                this.setElement(\"#grid-container\");\n                this.init_grid(grid_config);\n            }\n\n            // fix padding\n            if (grid_config.use_panels) {\n                $(\"#center\").css({\n                    padding: \"10px\",\n                    overflow: \"auto\"\n                });\n            }\n        },\n\n        // refresh frames\n        handle_refresh: function handle_refresh(refresh_frames) {\n            if (refresh_frames) {\n                if ($.inArray(\"history\", refresh_frames) > -1) {\n                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                }\n            }\n        },\n\n        // Initialize\n        init_grid: function init_grid(grid_config) {\n            this.grid.set(grid_config);\n\n            // get options\n            var options = this.grid.attributes;\n\n            if (this.allow_title_display && options.title) {\n                Utils.setWindowTitle(options.title);\n            }\n            // handle refresh requests\n            this.handle_refresh(options.refresh_frames);\n\n            // strip protocol and domain\n            var url = this.grid.get(\"url_base\");\n            url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n            this.grid.set(\"url_base\", url);\n\n            // append main template\n            this.$el.html(Templates.grid(options));\n\n            // update div contents\n            this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n            this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n            this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n            // update message\n            if (options.message) {\n                this.$el.find(\"#grid-message\").html(Templates.message(options));\n                var self = this;\n                if (options.use_hide_message) {\n                    setTimeout(function () {\n                        self.$el.find(\"#grid-message\").html(\"\");\n                    }, 5000);\n                }\n            }\n\n            // configure elements\n            this.init_grid_elements();\n            this.init_grid_controls();\n\n            // attach global event handler\n            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n            init_refresh_on_change();\n        },\n\n        // Initialize grid controls\n        init_grid_controls: function init_grid_controls() {\n            // link\n            var self = this;\n\n            // Initialize grid operation button.\n            this.$el.find(\".operation-button\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.submit_operation(this);\n                    return false;\n                });\n            });\n\n            // Initialize text filters to select text on click and use normal font when user is typing.\n            this.$el.find(\"input[type=text]\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    $(this).select();\n                }).keyup(function () {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n            });\n\n            // Initialize sort links.\n            this.$el.find(\".sort-link\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_sort_condition($(this).attr(\"sort_key\"));\n                    return false;\n                });\n            });\n\n            // Initialize text filters.\n            this.$el.find(\".text-filter-form\").each(function () {\n                $(this).off();\n                $(this).submit(function () {\n                    var column_key = $(this).attr(\"column_key\");\n                    var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                    var text_input = text_input_obj.val();\n                    text_input_obj.val(\"\");\n                    self.add_filter_condition(column_key, text_input);\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".text-filter-val > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    // Remove visible element.\n                    $(this).parent().remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                    // Return\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".categorical-filter > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                    return false;\n                });\n            });\n\n            // Initialize standard, advanced search toggles.\n            this.$el.find(\".advanced-search-toggle\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                    self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                    return false;\n                });\n            });\n\n            // Add event to check all box\n            this.$el.find(\"#check_all\").off();\n            this.$el.find(\"#check_all\").on(\"click\", function () {\n                self.check_all_items();\n            });\n        },\n\n        // Initialize grid elements.\n        init_grid_elements: function init_grid_elements() {\n            // Initialize grid selection checkboxes.\n            this.$el.find(\".grid\").each(function () {\n                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n                var check_count = $(this).find(\"span.grid-selected-count\");\n                var update_checked = function update_checked() {\n                    check_count.text($(checkboxes).filter(\":checked\").length);\n                };\n\n                $(checkboxes).each(function () {\n                    $(this).change(update_checked);\n                });\n                update_checked();\n            });\n\n            // Initialize ratings.\n            if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n            // get options\n            var options = this.grid.attributes;\n            var self = this;\n\n            //\n            // add page click events\n            //\n            this.$el.find(\".page-link > a\").each(function () {\n                $(this).click(function () {\n                    self.set_page($(this).attr(\"page_num\"));\n                    return false;\n                });\n            });\n\n            //\n            // add inbound/outbound events\n            //\n            this.$el.find(\".use-target\").each(function () {\n                $(this).click(function (e) {\n                    self.execute({\n                        href: $(this).attr(\"href\"),\n                        target: $(this).attr(\"target\")\n                    });\n                    return false;\n                });\n            });\n\n            // empty grid?\n            var items_length = options.items.length;\n            if (items_length == 0) {\n                return;\n            }\n\n            // add operation popup menus\n            _.each(options.items, function (item, index) {\n                var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                var popup = new PopupMenu(button);\n                _.each(options[\"operations\"], function (operation) {\n                    self._add_operation(popup, operation, item);\n                });\n            });\n        },\n\n        /** Add an operation to the items menu */\n        _add_operation: function _add_operation(popup, operation, item) {\n            var self = this;\n            var settings = item.operation_config[operation.label];\n            if (settings.allowed && operation.allow_popup) {\n                popup.addItem({\n                    html: operation.label,\n                    href: settings.url_args,\n                    target: settings.target,\n                    confirmation_text: operation.confirm,\n                    func: function func(e) {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        if (operation.onclick) {\n                            operation.onclick(item.encode_id);\n                        } else {\n                            self.execute(this.findItemByHtml(label));\n                        }\n                    }\n                });\n            }\n        },\n\n        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n        add_filter_condition: function add_filter_condition(name, value) {\n            // Do nothing is value is empty.\n            if (value === \"\") {\n                return false;\n            }\n\n            // Add condition to grid.\n            this.grid.add_filter(name, value, true);\n\n            // Add button that displays filter and provides a button to delete it.\n            var t = $(Templates.filter_element(name, value));\n            var self = this;\n            t.click(function () {\n                // Remove visible element.\n                $(this).remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(name, value);\n            });\n\n            // append to container\n            var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n            container.append(t);\n\n            // execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n        remove_filter_condition: function remove_filter_condition(name, value) {\n            // Remove filter condition.\n            this.grid.remove_filter(name, value);\n\n            // Execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set sort condition for grid.\n        set_sort_condition: function set_sort_condition(col_key) {\n            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n            // currently sorted column, sort is reversed.\n            var cur_sort = this.grid.get(\"sort_key\");\n            var new_sort = col_key;\n            if (cur_sort.indexOf(col_key) !== -1) {\n                // Reverse sort.\n                if (cur_sort.substring(0, 1) !== \"-\") {\n                    new_sort = \"-\" + col_key;\n                }\n            }\n\n            // Remove sort arrows elements.\n            this.$el.find(\".sort-arrow\").remove();\n\n            // Add sort arrow element to new sort column.\n            var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n            var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n            // Add to header\n            this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n            // Update grid.\n            this.grid.set(\"sort_key\", new_sort);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set new value for categorical filter.\n        set_categorical_filter: function set_categorical_filter(name, new_value) {\n            // Update filter hyperlinks to reflect new filter value.\n            var category_filter = this.grid.get(\"categorical_filters\")[name],\n                cur_value = this.grid.get(\"filters\")[name];\n            var self = this;\n            this.$el.find(\".\" + name + \"-filter\").each(function () {\n                var text = $.trim($(this).text());\n                var filter = category_filter[text];\n                var filter_value = filter[name];\n                if (filter_value == new_value) {\n                    // Remove filter link since grid will be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    $(this).empty();\n                    $(this).addClass(\"current-filter\");\n                    $(this).append(text);\n                } else if (filter_value == cur_value) {\n                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    $(this).empty();\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_categorical_filter(name, filter_value);\n                    });\n                    $(this).removeClass(\"current-filter\");\n                    $(this).append(t);\n                }\n            });\n\n            // Update grid.\n            this.grid.add_filter(name, new_value);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set page to view.\n        set_page: function set_page(new_page) {\n            // Update page hyperlink to reflect new page.\n            var self = this;\n            this.$el.find(\".page-link\").each(function () {\n                var id = $(this).attr(\"id\"),\n                    page_num = parseInt(id.split(\"-\")[2], 10),\n                    // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get(\"cur_page\"),\n                    text;\n                if (page_num === new_page) {\n                    // Remove link to page since grid will be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    text = $(this).children().text();\n                    $(this).empty();\n                    $(this).addClass(\"inactive-link\");\n                    $(this).text(text);\n                } else if (page_num === cur_page) {\n                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    text = $(this).text();\n                    $(this).empty();\n                    $(this).removeClass(\"inactive-link\");\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_page(page_num);\n                    });\n                    $(this).append(t);\n                }\n            });\n\n            if (new_page === \"all\") {\n                this.grid.set(\"cur_page\", new_page);\n            } else {\n                this.grid.set(\"cur_page\", parseInt(new_page, 10));\n            }\n            this.execute();\n        },\n\n        // confirmation/submission of operation request\n        submit_operation: function submit_operation(operation_button, confirmation_text) {\n            // identify operation\n            var operation_name = $(operation_button).val();\n\n            // verify in any item is selected\n            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n            if (!number_of_checked_ids > 0) {\n                return false;\n            }\n\n            // Check to see if there's grid confirmation text for this operation\n            var operation = _.findWhere(this.grid.attributes.operations, {\n                label: operation_name\n            });\n            if (operation && !confirmation_text) {\n                confirmation_text = operation.confirm || \"\";\n            }\n\n            // collect ids\n            var item_ids = [];\n            this.$el.find(\"input[name=id]:checked\").each(function () {\n                item_ids.push($(this).val());\n            });\n\n            // execute operation\n            var options = {\n                operation: operation_name,\n                id: item_ids,\n                confirmation_text: confirmation_text\n            };\n            if (operation.target == \"top\") {\n                options = _.extend(options, {\n                    href: operation.href,\n                    target: operation.target\n                });\n            }\n            this.execute(options);\n            return true;\n        },\n\n        check_all_items: function check_all_items() {\n            var check = this.$(\".grid-row-select-checkbox\");\n            var state = this.$(\"#check_all\").prop(\"checked\");\n            _.each(check, function (c) {\n                $(c).prop(\"checked\", state);\n            });\n            this.init_grid_elements();\n        },\n\n        // Go back to page one; this is useful when a filter is applied.\n        go_page_one: function go_page_one() {\n            // Need to go back to page 1 if not showing all.\n            var cur_page = this.grid.get(\"cur_page\");\n            if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n                this.grid.set(\"cur_page\", 1);\n            }\n        },\n\n        //\n        // execute operations and hyperlink requests\n        //\n        execute: function execute(options) {\n            // get url\n            var id = null;\n            var href = null;\n            var operation = null;\n            var confirmation_text = null;\n            var target = null;\n\n            // check for options\n            if (options) {\n                // get options\n                href = options.href;\n                operation = options.operation;\n                id = options.id;\n                confirmation_text = options.confirmation_text;\n                target = options.target;\n\n                // check if input contains the operation tag\n                if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                    // Get operation, id in hyperlink's href.\n                    var href_parts = href.split(\"?\");\n                    if (href_parts.length > 1) {\n                        var href_parms_str = href_parts[1];\n                        var href_parms = href_parms_str.split(\"&\");\n                        for (var index = 0; index < href_parms.length; index++) {\n                            if (href_parms[index].indexOf(\"operation\") != -1) {\n                                // Found operation parm; get operation value.\n                                operation = href_parms[index].split(\"=\")[1];\n                                operation = operation.replace(/\\+/g, \" \");\n                            } else if (href_parms[index].indexOf(\"id\") != -1) {\n                                // Found id parm; get id value.\n                                id = href_parms[index].split(\"=\")[1];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check for operation details\n            if (operation && id) {\n                // show confirmation box\n                if (confirmation_text && confirmation_text != \"\" && confirmation_text != \"None\" && confirmation_text != \"null\") if (!confirm(confirmation_text)) return false;\n\n                // use small characters for operation?!\n                operation = operation.toLowerCase();\n\n                // Update grid.\n                this.grid.set({\n                    operation: operation,\n                    item_ids: id\n                });\n\n                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                if (target == \"top\") {\n                    window.top.location = href + \"?\" + $.param(this.grid.get_url_data());\n                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            }\n\n            // refresh grid\n            if (href) {\n                this.go_to(target, href);\n                return false;\n            }\n\n            // refresh grid\n            if (this.grid.get(\"async\") || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        },\n\n        // go to url\n        go_to: function go_to(target, href) {\n            // get aysnc status\n            var async = this.grid.get(\"async\");\n            this.grid.set(\"async\", false);\n\n            // get slide status\n            var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n            this.grid.set(\"advanced_search\", advanced_search);\n\n            // get default url\n            if (!href) {\n                href = this.grid.get(\"url_base\") + \"?\" + $.param(this.grid.get_url_data());\n            }\n\n            // clear grid of transient request attributes.\n            this.grid.set({\n                operation: undefined,\n                item_ids: undefined,\n                async: async\n            });\n            switch (target) {\n                case \"center\":\n                    $(\"#galaxy_main\").attr(\"src\", href);\n                    break;\n                case \"top\":\n                    window.top.location = href;\n                    break;\n                default:\n                    window.location = href;\n            }\n        },\n\n        // Update grid.\n        update_grid: function update_grid() {\n            // If there's an operation, do POST; otherwise, do GET.\n            var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n            // Show overlay to indicate loading and prevent user actions.\n            this.$el.find(\".loading-elt-overlay\").show();\n            var self = this;\n            $.ajax({\n                type: method,\n                url: self.grid.get(\"url_base\"),\n                data: self.grid.get_url_data(),\n                error: function error(response) {\n                    alert(\"Grid refresh failed\");\n                },\n                success: function success(response_text) {\n                    // backup\n                    var embedded = self.grid.get(\"embedded\");\n                    var insert = self.grid.get(\"insert\");\n                    var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                    // request new configuration\n                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                    // update\n                    json.embedded = embedded;\n                    json.insert = insert;\n                    json.advanced_search = advanced_search;\n\n                    // Initialize new grid config\n                    self.init_grid(json);\n\n                    // Hide loading overlay.\n                    self.$el.find(\".loading-elt-overlay\").hide();\n                },\n                complete: function complete() {\n                    // Clear grid of transient request attributes.\n                    self.grid.set({\n                        operation: undefined,\n                        item_ids: undefined\n                    });\n                }\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class creates/wraps a default html select field as backbone class.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function onchange() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\") && self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:disabled\", this._changeDisabled, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:multiple change:searchable change:cls change:id\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.model.get(\"searchable\") ? this._renderSearchable() : this._renderClassic();\n            this.$el.addClass(this.model.get(\"cls\")).attr(\"id\", this.model.get(\"id\"));\n            this.$select.empty().addClass(\"select\").attr(\"id\", this.model.get(\"id\") + \"_select\").prop(\"multiple\", this.model.get(\"multiple\")).on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function _renderClassic() {\n            var self = this;\n            this.$el.addClass(this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\").append(this.$select = $(\"<select/>\")).append(this.$dropdown = $(\"<div/>\")).append(this.$resize = $(\"<div/>\").append(this.$resize_icon = $(\"<i/>\")));\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon.addClass(\"fa fa-angle-double-right fa-rotate-45\").show();\n                this.$resize.removeClass().addClass(\"icon-resize\").show().off(\"mousedown\").on(\"mousedown\", function (event) {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $(\"#dd-helper\").show().on(\"mousemove\", function (event) {\n                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n                    }).on(\"mouseup mouseleave\", function () {\n                        $(\"#dd-helper\").hide().off();\n                    });\n                });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function _renderSearchable() {\n            var self = this;\n            this.$el.append(this.$select = $(\"<div/>\")).append(this.$dropdown = $(\"<div/>\"));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function () {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (this.model.get(\"multiple\") && !this.model.get(\"individual\") && !this.model.get(\"readonly\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 && _.each(self.model.get(\"data\"), function (option) {\n                            new_value.push(option.value);\n                        });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function _match(term, text) {\n            return !term || term == \"\" || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n        },\n\n        /** Updates the selection options */\n        _changeData: function _changeData() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function (option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function (option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function query(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function (e) {\n                            var found = false;\n                            _.each(e.tags, function (tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function formatResult(result) {\n                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n                            if (self.matched_tags[tag]) {\n                                return memo + \"&nbsp;\" + '<div class=\"label label-info\">' + _.escape(tag) + \"</div>\";\n                            }\n                            return memo;\n                        }, \"\") + \"</div>\";\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function (option) {\n                    self.$select.append($(\"<option/>\").attr(\"value\", option.value).html(_.escape(option.label)));\n                });\n            }\n            this.model.set(\"disabled\", this.model.get(\"readonly\") || this.length() == 0);\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function _changeDisabled() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(this.model.get(\"disabled\") ? \"disable\" : \"enable\");\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function _changeWait() {\n            this.$dropdown.removeClass().addClass(\"icon-dropdown fa\").addClass(this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\");\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n                }\n            } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function first() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function exists(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function text() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function show() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function hide() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function disabled() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function add(options, sorter) {\n            _.each(this.model.get(\"data\"), function (v) {\n                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function setOnChange(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function length() {\n            return $.isArray(this.model.get(\"data\")) ? this.model.get(\"data\").length : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function (v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function (a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function (v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Base class for options based ui elements **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: \"No options available.\",\n                wait_text: \"Please wait...\",\n                multiple: false,\n                optional: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.$el.empty().removeClass().addClass(\"ui-options\").append(this.$message = $(\"<div/>\")).append(this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")).append(this.$options = $(this._template()));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        self.$(\"input\").prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function _changeData() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(this._templateOptions(this.model.get(\"data\")));\n            } else {\n                _.each(this.model.get(\"data\"), function (option) {\n                    self.$options.append($(self._templateOption(option)).addClass(\"ui-option\").tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    }));\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function _changeWait() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this._getValue() === null && !this.model.get(\"multiple\") && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function first() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function length() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function (v) {\n                        self.$('input[value=\"' + v + '\"]').first().prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function _getValue() {\n            var selected = [];\n            this.$(\":checked\").each(function () {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function _messageShow(text, status) {\n            this.$message.show().removeClass().addClass(\"ui-message alert alert-\" + status).html(text);\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function _templateOption(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\").addClass(\"ui-option\").append($(\"<input/>\").attr({\n                id: id,\n                type: this.model.get(\"type\"),\n                name: this.model.id,\n                value: pair.value\n            })).append($(\"<label/>\").addClass(\"ui-options-label\").attr(\"for\", id).html(pair.label));\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function initialize(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function _setValue(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]').prop(\"checked\", true).closest(\"label\").addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function _templateOption(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon && $el.append($(\"<i/>\").addClass(\"fa\").addClass(pair.icon).addClass(!pair.label && \"no-padding\"));\n            $el.append($(\"<input/>\").attr({\n                type: \"radio\",\n                name: this.model.id,\n                value: pair.value\n            }));\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"btn-group ui-radiobutton\").attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function onclick() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function value(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function () {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this).find(\".ui-list-name\").html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function add(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(this._templateRow({\n                        id: options.id,\n                        name: options.name\n                    }));\n                    $el.on(\"click\", function () {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function () {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function () {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + \"</div>\" + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + \"</div>\";\n        },\n\n        /** Row Template */\n        _templateRow: function _templateRow(options) {\n            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + \"</span>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    //jquery\n    //backbone\n], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // =============================================================================\n    /**\n    * view for a popup menu\n    */\n    var PopupMenu = Backbone.View.extend({\n        //TODO: maybe better as singleton off the Galaxy obj\n        /** Cache the desired button element and options, set up the button click handler\n        *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n        */\n        initialize: function initialize($button, options) {\n            // default settings\n            this.$button = $button;\n            if (!this.$button.length) {\n                this.$button = $(\"<div/>\");\n            }\n            this.options = options || [];\n            this.$button.data(\"popupmenu\", this);\n\n            // set up button click -> open menu behavior\n            var menu = this;\n            this.$button.click(function (event) {\n                // if there's already a menu open, remove it\n                $(\".popmenu-wrapper\").remove();\n                menu._renderAndShow(event);\n                return false;\n            });\n        },\n\n        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n        _renderAndShow: function _renderAndShow(clickEvent) {\n            this.render();\n            this.$el.appendTo(\"body\").css(this._getShownPosition(clickEvent)).show();\n            this._setUpCloseBehavior();\n        },\n\n        // render the menu\n        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n        render: function render() {\n            // render the menu body absolute and hidden, fill with template\n            this.$el.addClass(\"popmenu-wrapper\").hide().css({ position: \"absolute\" }).html(this.template(this.$button.attr(\"id\"), this.options));\n\n            // set up behavior on each link/anchor elem\n            if (this.options.length) {\n                var menu = this;\n                //precondition: there should be one option per li\n                this.$el.find(\"li\").each(function (i, li) {\n                    var option = menu.options[i];\n\n                    // if the option has 'func', call that function when the anchor is clicked\n                    if (option.func) {\n                        $(this).children(\"a.popupmenu-option\").click(function (event) {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                    }\n                });\n            }\n            return this;\n        },\n\n        template: function template(id, options) {\n            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n        },\n\n        _templateOptions: function _templateOptions(options) {\n            if (!options.length) {\n                return \"<li>(no options)</li>\";\n            }\n            return _.map(options, function (option) {\n                if (option.divider) {\n                    return '<li class=\"divider\"></li>';\n                } else if (option.header) {\n                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n                }\n                var href = option.href || \"javascript:void(0);\",\n                    target = option.target ? ' target=\"' + option.target + '\"' : \"\",\n                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, \">\", check, option.html, \"</a></li>\"].join(\"\");\n            }).join(\"\");\n        },\n\n        // get the absolute position/offset for the menu\n        _getShownPosition: function _getShownPosition(clickEvent) {\n            // display menu horiz. centered on click...\n            var menuWidth = this.$el.width();\n            var x = clickEvent.pageX - menuWidth / 2;\n\n            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n            return {\n                top: clickEvent.pageY,\n                left: x\n            };\n        },\n\n        // bind an event handler to all available frames so that when anything is clicked\n        // the menu is removed from the DOM and the event handler unbinds itself\n        _setUpCloseBehavior: function _setUpCloseBehavior() {\n            var menu = this;\n            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n            // function to close popup and unbind itself\n            function closePopup(event) {\n                $(document).off(\"click.close_popup\");\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document).off(\"click.close_popup\");\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\").contents().off(\"click.close_popup\");\n                    } catch (err) {}\n                }\n                menu.remove();\n            }\n\n            $(\"html\").one(\"click.close_popup\", closePopup);\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).find(\"html\").one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\").contents().one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            }\n        },\n\n        // add a menu option/item at the given index\n        addItem: function addItem(item, index) {\n            // append to end if no index\n            index = index >= 0 ? index : this.options.length;\n            this.options.splice(index, 0, item);\n            return this;\n        },\n\n        // remove a menu option/item at the given index\n        removeItem: function removeItem(index) {\n            if (index >= 0) {\n                this.options.splice(index, 1);\n            }\n            return this;\n        },\n\n        // search for a menu option by its html\n        findIndexByHtml: function findIndexByHtml(html) {\n            for (var i = 0; i < this.options.length; i++) {\n                if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                    return i;\n                }\n            }\n            return null;\n        },\n\n        // search for a menu option by its html\n        findItemByHtml: function findItemByHtml(html) {\n            return this.options[this.findIndexByHtml(html)];\n        },\n\n        // string representation\n        toString: function toString() {\n            return \"PopupMenu\";\n        }\n    });\n    /** shortcut to new for when you don't need to preserve the ref */\n    PopupMenu.create = function _create($button, options) {\n        return new PopupMenu($button, options);\n    };\n\n    // -----------------------------------------------------------------------------\n    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n    // to the newer backbone.js PopupMenu\n\n    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n    *      Converts initial_options to object array used by PopupMenu.\n    *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n    *  @param {Object} initial_options map of key -> values, where\n    *      key is option text, value is fn to call when option is clicked\n    *  @returns {PopupMenu} the PopupMenu created\n    */\n    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n        var convertedOptions = [];\n        _.each(initial_options, function (optionVal, optionKey) {\n            var newOption = { html: optionKey };\n\n            // keys with null values indicate: header\n            if (optionVal === null) {\n                // !optionVal? (null only?)\n                newOption.header = true;\n\n                // keys with function values indicate: a menu option\n            } else if (jQuery.type(optionVal) === \"function\") {\n                newOption.func = optionVal;\n            }\n            //TODO:?? any other special optionVals?\n            // there was no divider option originally\n            convertedOptions.push(newOption);\n        });\n        return new PopupMenu($(button_element), convertedOptions);\n    };\n\n    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n    *  @param {jQuery} $parent the element that contains the links to convert to options\n    *  @param {String} selector jq selector string to find links\n    *  @returns {Object[]} the options array to initialize a PopupMenu\n    */\n    //TODO: lose parent and selector, pass in array of links, use map to return options\n    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n        $parent = $($parent);\n        selector = selector || \"a\";\n        var options = [];\n        $parent.find(selector).each(function (elem, i) {\n            var option = {},\n                $link = $(elem);\n\n            // convert link text to the option text (html) and the href into the option func\n            option.html = $link.text();\n            if ($link.attr(\"href\")) {\n                var linkHref = $link.attr(\"href\"),\n                    linkTarget = $link.attr(\"target\"),\n                    confirmText = $link.attr(\"confirm\");\n\n                option.func = function () {\n                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                    //  if the user cancels - do nothing\n                    if (confirmText && !confirm(confirmText)) {\n                        return;\n                    }\n\n                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n                    switch (linkTarget) {\n                        // relocate the center panel\n                        case \"_parent\":\n                            window.parent.location = linkHref;\n                            break;\n\n                        // relocate the entire window\n                        case \"_top\":\n                            window.top.location = linkHref;\n                            break;\n\n                        // relocate this panel\n                        default:\n                            window.location = linkHref;\n                    }\n                };\n            }\n            options.push(option);\n        });\n        return options;\n    };\n\n    /** Create a single popupmenu from existing DOM button and anchor elements\n    *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n    *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n    *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n    *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n    */\n    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n        $buttonElement = $($buttonElement);\n        $menuElement = $($menuElement);\n        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n        // we're done with the menu (having converted it to an options map)\n        $menuElement.remove();\n        return new PopupMenu($buttonElement, options);\n    };\n\n    /** Create all popupmenus within a document or a more specific element\n    *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n    *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n    *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n    *      Will be passed $menuElement, parent.\n    *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n    *  @returns {PopupMenu[]} array of popupmenus created\n    */\n    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n        parent = parent || document;\n        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n        //  which contains the id of the button that activates the menu\n        menuSelector = menuSelector || \"div[popupmenu]\";\n        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n            return \"#\" + $menuElement.attr(\"popupmenu\");\n        };\n\n        // aggregate and return all PopupMenus\n        var popupMenusCreated = [];\n        $(parent).find(menuSelector).each(function () {\n            var $menuElement = $(this),\n                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass(\"popup\");\n        });\n        return popupMenusCreated;\n    };\n\n    // =============================================================================\n    return PopupMenu;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui table element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function addHeader($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function appendHeader() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function add($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function append(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function prepend(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function get(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function del(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function delAll() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function value(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function size() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function _commit(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function _row() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function _onclick(e) {\n            var old_value = this.value();\n            var new_value = $(e.target).closest(\"tr\").attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function _ondblclick(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function _refresh() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function _template() {\n            return \"<div>\" + '<table class=\"' + this.options.cls + '\">' + \"<thead/>\" + \"<tbody/>\" + \"</table>\" + \"<tmessage>\" + this.options.content + \"</tmessage>\" + \"<div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* This class maps the form dom to an api compatible javascript dictionary. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function initialize(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function checksum() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function () {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum += id + \":\" + JSON.stringify(field.value && field.value()) + \":\" + field.collapsed + \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function create() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(section_label);\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(parseInt(block_label.substr(pos)));\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(0, pos);\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function (a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(flat_id + \"_\" + index++, node[block_prefix + block_indices[i]]);\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[input.id].value();\n                                add(flat_id + \"|\" + input.test_param.name, input.id, value);\n                                var selectedCase = _matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(flat_id, head[input.id + \"-section-\" + selectedCase]);\n                                }\n                                break;\n                            case \"section\":\n                                convert(!input.flat && flat_id || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (input.ignore === undefined || input.ignore != value) {\n                                        if (field.collapsed && input.collapsible_value) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(p_id, input.id, input.payload[p_id]);\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function match(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function matchCase(input, value) {\n            return _matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function matchModel(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function (input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function matchResponse(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function _iterate(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function () {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = input && { input: input } || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var _matchCase = function _matchCase(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function visitInputs(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function (input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function (cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(node.test_param, name + \"|\" + node.test_param.name, context);\n                        var selectedCase = _matchCase(node, node.test_param.value);\n                        if (selectedCase != -1) {\n                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                        } else {\n                            Galaxy.emit.debug(\"form-data::visitInputs() - Invalid case for \" + name + \".\");\n                        }\n                    } else {\n                        Galaxy.emit.debug(\"form-data::visitInputs() - Conditional test parameter missing for \" + name + \".\");\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 27:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n        * Return true if operation can be done asynchronously.\n        */\n        can_async_op: function can_async_op(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n        * Add filtering criterion.\n        */\n        add_filter: function add_filter(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n        * Remove filtering criterion.\n        */\n        remove_filter: function remove_filter(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n        * Returns URL data for obtaining a new grid.\n        */\n        get_url_data: function get_url_data() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function (k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function get_url(args) {\n            return this.get(\"url_base\") + \"?\" + $.param(this.get_url_data()) + \"&\" + $.param(args);\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function grid(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl = '<div class=\"loading-elt-overlay\"></div>' + \"<table>\" + \"<tr>\" + '<td width=\"75%\">' + this.grid_header(options) + \"</td>\" + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"<tr>\" + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"</table>\" + this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function grid_table(options) {\n            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + \"</table>\" + \"</form>\";\n        },\n\n        // template\n        grid_header: function grid_header(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl += \"<li>\" + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + \"</a>\" + \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function header(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl += '<span class=\"sort-arrow\">' + column.extra + \"</span>\" + \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function body(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                            }\n                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || \"\") + \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function footer(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl += \"...\" + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + \"</td>\" + \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl += \"<tr>\" + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + \"<td></td>\" + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">' + options.legend + \"</td>\" + \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function message(options) {\n            var status = str(options.status);\n            if (status.indexOf([\"success\", \"ok\"]) != -1) {\n                status = \"done\";\n            }\n            return \"<p>\" + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + \"</div>\" + '<div style=\"clear: both\"></div>' + \"</p>\";\n        },\n\n        // template\n        grid_filters: function grid_filters(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + \"<table>\" + \"<tr>\" + '<td style=\"padding: 0;\">' + \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + \"<table>\" + \"<tr>\" + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + \"</td>\" + \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function grid_column_filter(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(column_key, column_filter);\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + \"</button>\" + \"</span>\" + \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + \"</a>\" + \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function filter_element(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + \"</a>\" + \"</span>\";\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                min: null,\n                max: null,\n                step: null,\n                precise: false,\n                split: 10000,\n                value: null,\n                onchange: function onchange() {}\n            }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text.on(\"change\", function () {\n                self.value($(this).val());\n            }).on(\"keyup\", function (e) {\n                pressed[e.which] = false;\n            }).on(\"keydown\", function (e) {\n                var v = e.which;\n                pressed[v] = true;\n                if (self.model.get(\"is_workflow\") && pressed[16] && v == 52) {\n                    self.value(\"$\");\n                    event.preventDefault();\n                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf(\".\") == -1 && self.model.get(\"precise\") || (v == 189 || v == 109) && $(this).val().indexOf(\"-\") == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on(\"slide\", function (event, ui) {\n                    self.value(ui.value);\n                });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function value(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (new_val !== null && new_val !== \"\" && !this._isParameter(new_val)) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null && (new_val = Math.min(new_val, options.max));\n                    options.min !== null && (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function _isParameter(value) {\n            return this.model.get(\"is_workflow\") && String(value).substring(0, 1) === \"$\";\n        },\n\n        /** Slider template */\n        _template: function _template() {\n            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates/wraps a drill down element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function _setValue(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (new_value !== undefined && new_value !== null && this.header_index) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function (v) {\n                    var list = self.header_index[v];\n                    _.each(list, function (element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function _setState(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button.removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button.removeClass(\"fa-minus-square\").addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function _templateOptions() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function () {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\").addClass(\"button-\" + header_id).addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\").addClass(\"subgroup-\" + header_id).addClass(\"ui-drilldown-subgroup\");\n                        $group.append($(\"<div/>\").append($button).append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        })));\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        }));\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list drilldown-container\").attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(8), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement($(\"<div/>\"));\n            this.render();\n        },\n\n        /** Render section view */\n        render: function render() {\n            var self = this;\n            this.$el.empty();\n            _.each(this.inputs, function (input) {\n                self.add(input);\n            });\n        },\n\n        /** Add a new input element */\n        add: function add(input) {\n            var input_def = jQuery.extend(true, {}, input);\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[input_def.id] = input_def;\n            switch (input_def.type) {\n                case \"conditional\":\n                    this._addConditional(input_def);\n                    break;\n                case \"repeat\":\n                    this._addRepeat(input_def);\n                    break;\n                case \"section\":\n                    this._addSection(input_def);\n                    break;\n                default:\n                    this._addRow(input_def);\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function _addConditional(input_def) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n            var field = this._addRow(input_def.test_param);\n\n            // set onchange event for test parameter\n            field.model && field.model.set(\"onchange\", function (value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(\"#\" + input_def.id + \"-section-\" + i);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, {\n                    inputs: input_def.cases[i].inputs\n                });\n                this._append(sub_section.$el.addClass(\"ui-form-section\"), input_def.id + \"-section-\" + i);\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger(\"change\");\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function _addRepeat(input_def) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title: input_def.title || \"Repeat\",\n                min: input_def.min,\n                max: input_def.max,\n                onnew: function onnew() {\n                    create(input_def.inputs);\n                    self.app.trigger(\"change\");\n                }\n            });\n\n            // helper function to create new repeat blocks\n            function create(inputs) {\n                var sub_section_id = input_def.id + \"-section-\" + block_index++;\n                var sub_section = new View(self.app, { inputs: inputs });\n                repeat.add({\n                    id: sub_section_id,\n                    $el: sub_section.$el,\n                    ondel: function ondel() {\n                        repeat.del(sub_section_id);\n                        self.app.trigger(\"change\");\n                    }\n                });\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size(input_def.cache);\n            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n            }\n\n            // hide options\n            this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement(this.app, {\n                label: input_def.title || input_def.name,\n                help: input_def.help,\n                field: repeat\n            });\n            this._append(input_element.$el, input_def.id);\n        },\n\n        /** Add a customized section */\n        _addSection: function _addSection(input_def) {\n            var portlet = new Portlet.View({\n                title: input_def.title || input_def.name,\n                cls: \"ui-portlet-section\",\n                collapsible: true,\n                collapsible_button: true,\n                collapsed: !input_def.expanded\n            });\n            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n            portlet.append($(\"<div/>\").addClass(\"ui-form-info\").html(input_def.help));\n            this.app.on(\"expand\", function (input_id) {\n                portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n            });\n            this._append(portlet.$el, input_def.id);\n        },\n\n        /** Add a single input field element */\n        _addRow: function _addRow(input_def) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function () {\n                self.app.trigger(\"change\", id);\n            };\n            var field = this.parameters.create(input_def);\n            this.app.field_list[id] = field;\n            var input_element = new InputElement(this.app, {\n                name: input_def.name,\n                label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n                value: input_def.value,\n                text_value: input_def.text_value,\n                collapsible_value: input_def.collapsible_value,\n                collapsible_preview: input_def.collapsible_preview,\n                help: input_def.help,\n                argument: input_def.argument,\n                disabled: input_def.disabled,\n                color: input_def.color,\n                style: input_def.style,\n                backdrop: input_def.backdrop,\n                hidden: input_def.hidden,\n                fixed: input_def.fixed,\n                field: field\n            });\n            this.app.element_list[id] = input_element;\n            this._append(input_element.$el, input_def.id);\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function _append($el, id) {\n            this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui component which enables the dynamic creation of portlets */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function onclick() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement($(\"<div/>\").append(this.$list = $(\"<div/>\")).append($(\"<div/>\").append(this.button_new.$el)));\n        },\n\n        /** Number of repeat blocks */\n        size: function size() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function add(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\"form-repeat::add()\", \"Duplicate or invalid repeat block id.\");\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function onclick() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function del(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\"form-repeat::del()\", \"Invalid repeat block id.\");\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function delAll() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function hideOptions() {\n            this.button_new.$el.hide();\n            _.each(this.list, function (portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) && this.$el.append($(\"<div/>\").addClass(\"ui-form-info\").html(this.options.empty_text));\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[this.size() > this.options.min ? \"showOperation\" : \"hideOperation\"](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form input element wrapper\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable: this.app_options.text_enable || \"Enable\",\n                text_disable: this.app_options.text_disable || \"Disable\",\n                cls_enable: this.app_options.cls_enable || \"fa fa-caret-square-o-down\",\n                cls_disable: this.app_options.cls_disable || \"fa fa-caret-square-o-up\",\n                always_refresh: this.app_options.always_refresh\n            }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get(\"value\")) == JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function () {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function () {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function backdrop() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function error(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function reset() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function render() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (help_argument && help_text.indexOf(\"(\" + help_argument + \")\") == -1) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview[this.field.collapsed && this.model.get(\"collapsible_preview\") || this.model.get(\"disabled\") ? \"show\" : \"hide\"]().html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\") ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set({\n                color: this.model.get(\"color\"),\n                style: this.model.get(\"style\")\n            });\n            // render collapsible options\n            if (!this.model.get(\"disabled\") && this.model.get(\"collapsible_value\") !== undefined) {\n                var collapsible_state = this.field.collapsed ? \"enable\" : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon.removeClass().addClass(\"icon\").addClass(this.model.get(\"cls_\" + collapsible_state)).attr(\"data-original-title\", this.model.get(\"text_\" + collapsible_state)).tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-form-element\").append($(\"<div/>\").addClass(\"ui-form-error ui-error\").append($(\"<span/>\").addClass(\"fa fa-arrow-down\")).append($(\"<span/>\").addClass(\"ui-form-error-text\"))).append($(\"<div/>\").addClass(\"ui-form-title\").append($(\"<div/>\").addClass(\"ui-form-collapsible\").append($(\"<i/>\").addClass(\"ui-form-collapsible-icon\")).append($(\"<span/>\").addClass(\"ui-form-collapsible-text\"))).append($(\"<span/>\").addClass(\"ui-form-title-text\"))).append($(\"<div/>\").addClass(\"ui-form-field\").append($(\"<span/>\").addClass(\"ui-form-info\")).append($(\"<div/>\").addClass(\"ui-form-backdrop\"))).append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            text: \"_fieldText\",\n            password: \"_fieldText\",\n            select: \"_fieldSelect\",\n            data_column: \"_fieldSelect\",\n            genomebuild: \"_fieldSelect\",\n            data: \"_fieldData\",\n            data_collection: \"_fieldData\",\n            integer: \"_fieldSlider\",\n            float: \"_fieldSlider\",\n            boolean: \"_fieldBoolean\",\n            drill_down: \"_fieldDrilldown\",\n            color: \"_fieldColor\",\n            hidden: \"_fieldHidden\",\n            hidden_data: \"_fieldHidden\",\n            baseurl: \"_fieldHidden\",\n            library_data: \"_fieldLibrary\",\n            ftpfile: \"_fieldFtp\",\n            upload: \"_fieldUpload\",\n            genomespacefile: \"_fieldGenomeSpace\"\n        },\n\n        /** Returns an input field for a given field type */\n        create: function create(input_def) {\n            var fieldClass = this.types[input_def.type];\n            var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n            if (!field) {\n                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n                Galaxy.emit.debug(\"form-parameters::_addRow()\", \"Auto matched field type (\" + input_def.type + \").\");\n            }\n            input_def.value === undefined && (input_def.value = null);\n            field.value(input_def.value);\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function _fieldData(input_def) {\n            return new SelectContent.View({\n                id: \"field-\" + input_def.id,\n                extensions: input_def.extensions,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                type: input_def.type,\n                flavor: input_def.flavor,\n                data: input_def.options,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function _fieldSelect(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // customize properties\n            if (input_def.type == \"data_column\") {\n                input_def.error_text = \"Missing columns in referenced dataset.\";\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if (!data) {\n                data = [];\n                _.each(input_def.options, function (option) {\n                    data.push({ label: option[0], value: option[1] });\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch (input_def.display) {\n                case \"checkboxes\":\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case \"radio\":\n                    SelectClass = Ui.Radio;\n                    break;\n                case \"radiobutton\":\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id: \"field-\" + input_def.id,\n                data: data,\n                error_text: input_def.error_text || \"No options available\",\n                readonly: input_def.readonly,\n                multiple: input_def.multiple,\n                optional: input_def.optional,\n                onchange: input_def.onchange,\n                individual: input_def.individual,\n                searchable: input_def.flavor !== \"workflow\"\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function _fieldDrilldown(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id: \"field-\" + input_def.id,\n                data: input_def.options,\n                display: input_def.display,\n                optional: input_def.optional,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function _fieldText(input_def) {\n            // field replaces e.g. a select field\n            if (input_def.options && input_def.data) {\n                input_def.area = input_def.multiple;\n                if (Utils.isEmpty(input_def.value)) {\n                    input_def.value = null;\n                } else {\n                    if ($.isArray(input_def.value)) {\n                        var str_value = \"\";\n                        for (var i in input_def.value) {\n                            str_value += String(input_def.value[i]);\n                            if (!input_def.multiple) {\n                                break;\n                            }\n                            str_value += \"\\n\";\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id: \"field-\" + input_def.id,\n                type: input_def.type,\n                area: input_def.area,\n                readonly: input_def.readonly,\n                placeholder: input_def.placeholder,\n                datalist: input_def.datalist,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function _fieldSlider(input_def) {\n            return new Ui.Slider.View({\n                id: \"field-\" + input_def.id,\n                precise: input_def.type == \"float\",\n                is_workflow: input_def.is_workflow,\n                min: input_def.min,\n                max: input_def.max,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function _fieldHidden(input_def) {\n            return new Ui.Hidden({\n                id: \"field-\" + input_def.id,\n                info: input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function _fieldBoolean(input_def) {\n            return new Ui.RadioButton.View({\n                id: \"field-\" + input_def.id,\n                data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function _fieldColor(input_def) {\n            return new ColorPicker({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function _fieldLibrary(input_def) {\n            return new SelectLibrary.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function _fieldFtp(input_def) {\n            return new SelectFtp.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n        */\n        _fieldGenomeSpace: function _fieldGenomeSpace(input_def) {\n            var self = this;\n            return new SelectGenomeSpace.View({\n                id: \"field-\" + input_def.id,\n                onchange: function onchange() {\n                    self.app.trigger(\"change\");\n                }\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function _fieldUpload(input_def) {\n            return new Ui.Upload({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }],\n        data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        module_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }],\n        module_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [{\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip: \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                }, {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }]\n            });\n            var $batch_div = $(\"<div/>\").addClass(\"ui-form-info\").append($(\"<i/>\").addClass(\"fa fa-sitemap\")).append($(\"<span/>\").html(\"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"));\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div.clone().append($(\"<div/>\").append($(\"<div/>\").addClass(\"ui-form-title\").html(\"Batch options:\")).append(this.button_product.$el)).append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el.on(\"dragenter\", function (e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            }).on(\"dragover\", function (e) {\n                e.preventDefault();\n            }).on(\"dragleave\", function (e) {\n                this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n            }).on(\"drop\", function (e) {\n                self._handleDrop(e);\n            });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:type change:optional change:multiple change:extensions\", this._changeType, this);\n            this.render();\n\n            // add change event\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function render() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[id_list[i] + \"_\" + this.config[current].src];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\"ui-select-content::value()\", \"Requested details not found for '\" + id_list[i] + \"'.\");\n                                return null;\n                            }\n                        }\n                        result.values.sort(function (a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\"ui-select-content::value()\", \"Invalid value/source '\" + new_value + \"'.\");\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function _changeCurrent() {\n            var self = this;\n            _.each(this.fields, function (field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function ($batchfield, batchmode) {\n                        $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function _changeType() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id = (this.model.get(\"flavor\") ? this.model.get(\"flavor\") + \"_\" : \"\") + String(this.model.get(\"type\")) + (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\"ui-select-content::_changeType()\", \"Invalid configuration/type id '\" + config_id + \"'.\");\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function (c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\"),\n                    individual: true,\n                    error_text: \"No \" + (extensions ? extensions + \" \" : \"\") + (src_labels[c.src] || \"content\") + \" available.\",\n                    onchange: function onchange() {\n                        self.trigger(\"change\");\n                    }\n                }));\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function onchange(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function (field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function ($batchfield, batchmode) {\n                self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function _changeWait() {\n            var self = this;\n            _.each(this.fields, function (field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function _changeData() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function (items, src) {\n                select_options[src] = [];\n                _.each(items, function (item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function (c, i) {\n                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n                    return b.hid - a.hid;\n                });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function _changeValue() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function (value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function (field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function _handleDrop(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n                var new_id = drop_data.id;\n                var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function _handleDropStatus(status) {\n            var self = this;\n            this.$el.removeClass(\"ui-dragover\").addClass(\"ui-dragover-\" + status);\n            setTimeout(function () {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function _batch(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(22), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n    // collection of libraries\n    var Libraries = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/libraries?deleted=false\"\n    });\n\n    // collection of dataset\n    var LibraryDatasets = Backbone.Collection.extend({\n        initialize: function initialize() {\n            var self = this;\n            this.config = new Backbone.Model({ library_id: null });\n            this.config.on(\"change\", function () {\n                self.fetch({ reset: true });\n            });\n        },\n        url: function url() {\n            return Galaxy.root + \"api/libraries/\" + this.config.get(\"library_id\") + \"/contents\";\n        }\n    });\n\n    // hda/hdca content selector ui element\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // collections\n            this.libraries = new Libraries();\n            this.datasets = new LibraryDatasets();\n\n            // link app and options\n            this.options = options;\n\n            // select field for the library\n            // TODO: Remove this once the library API supports searching for library datasets\n            this.library_select = new Ui.Select.View({\n                onchange: function onchange(value) {\n                    self.datasets.config.set(\"library_id\", value);\n                }\n            });\n\n            // create ui-list view to keep track of selected data libraries\n            this.dataset_list = new List.View({\n                name: \"dataset\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    self.trigger(\"change\");\n                }\n            });\n\n            // add reset handler for fetched libraries\n            this.libraries.on(\"reset\", function () {\n                var data = [];\n                self.libraries.each(function (model) {\n                    data.push({\n                        value: model.id,\n                        label: model.get(\"name\")\n                    });\n                });\n                self.library_select.update(data);\n            });\n\n            // add reset handler for fetched library datasets\n            this.datasets.on(\"reset\", function () {\n                var data = [];\n                var library_current = self.library_select.text();\n                if (library_current !== null) {\n                    self.datasets.each(function (model) {\n                        if (model.get(\"type\") === \"file\") {\n                            data.push({\n                                value: model.id,\n                                label: model.get(\"name\")\n                            });\n                        }\n                    });\n                }\n                self.dataset_list.update(data);\n            });\n\n            // add change event. fires on trigger\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n\n            // create elements\n            this.setElement(this._template());\n            this.$(\".library-select\").append(this.library_select.$el);\n            this.$el.append(this.dataset_list.$el);\n\n            // initial fetch of libraries\n            this.libraries.fetch({\n                reset: true,\n                success: function success() {\n                    self.library_select.trigger(\"change\");\n                    if (self.options.value !== undefined) {\n                        self.value(self.options.value);\n                    }\n                }\n            });\n        },\n\n        /** Return/Set currently selected library datasets */\n        value: function value(val) {\n            return this.dataset_list.value(val);\n        },\n\n        /** Template */\n        _template: function _template() {\n            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + \"</div>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n    /**\n    * FTP file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function success(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function value(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, GenomespaceBrowser) {\n    /**\n    * GenomeSpace file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function onclick() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function browseGenomeSpace(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function successCallback(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-gs-select-file\">' + '<div class=\"ui-gs-browse-field\">' + '<span class=\"ui-gs-browse-button\" />' + '<span class=\"ui-gs-filename-textbox\" />' + \"</div>\" + '<div class=\"ui-gs-token-field\">' + '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' + '<span class=\"ui-gs-token-textbox\" />' + \"</div>\" + \"</div>\";\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function value(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function _getValue() {\n            return this.filename_textbox.value() + \"^\" + this.token_textbox.value();\n        },\n\n        // set value\n        _setValue: function _setValue(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// Provides support for interacting with the GenomeSpace File Browser popup dialogue\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // tool form templates\n    return {\n        openFileBrowser: function openFileBrowser(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL = GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\"message\", function (e) {\n                successCalBack(e.data);\n            }, false);\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null) newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Renders the color picker used e.g. in the tool form **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\"c00000\", \"ff0000\", \"ffc000\", \"ffff00\", \"92d050\", \"00b050\", \"00b0f0\", \"0070c0\", \"002060\", \"7030a0\"],\n            base: [\"ffffff\", \"000000\", \"eeece1\", \"1f497d\", \"4f81bd\", \"c0504d\", \"9bbb59\", \"8064a2\", \"4bacc6\", \"f79646\"],\n            theme: [[\"f2f2f2\", \"7f7f7f\", \"ddd9c3\", \"c6d9f0\", \"dbe5f1\", \"f2dcdb\", \"ebf1dd\", \"e5e0ec\", \"dbeef3\", \"fdeada\"], [\"d8d8d8\", \"595959\", \"c4bd97\", \"8db3e2\", \"b8cce4\", \"e5b9b7\", \"d7e3bc\", \"ccc1d9\", \"b7dde8\", \"fbd5b5\"], [\"bfbfbf\", \"3f3f3f\", \"938953\", \"548dd4\", \"95b3d7\", \"d99694\", \"c3d69b\", \"b2a2c7\", \"92cddc\", \"fac08f\"], [\"a5a5a5\", \"262626\", \"494429\", \"17365d\", \"366092\", \"953734\", \"76923c\", \"5f497a\", \"31859b\", \"e36c09\"], [\"7f7f7e\", \"0c0c0c\", \"1d1b10\", \"0f243e\", \"244061\", \"632423\", \"4f6128\", \"3f3151\", \"205867\", \"974806\"]]\n        },\n\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function () {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function () {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function value(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                var hex = function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                };\n\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function _build() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function _content(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function _templateCheck() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function _templateContent() {\n            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + \"</div>\";\n        },\n\n        /** Box template */\n        _templateBox: function _templateBox(color) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function _template() {\n            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + \"</div>\" + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + \"</div>\";\n            \"</div>\";\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    QUERY_STRING = __webpack_require__(11),\n    Ui = __webpack_require__(5);\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function initialize(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function push(url, data) {\n        data = data || {};\n        data.__identifer = Math.random().toString(36).substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function execute(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function authenticate(args, name) {\n        return true;\n    },\n\n    access_denied: function access_denied() {\n        this.page.display(new Ui.Message({\n            status: \"danger\",\n            message: \"You must be logged in with proper credentials to make this request.\",\n            persistent: true\n        }));\n    }\n});\n\nmodule.exports = Router;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17), __webpack_require__(29), __webpack_require__(18), __webpack_require__(30), __webpack_require__(10), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: \"label\",\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.tagName = options.tagName || this.tagName;\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        title: function title(new_title) {\n            this.model.set(\"title\", new_title);\n        },\n        value: function value() {\n            return this.model.get(\"title\");\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-label\").addClass(this.model.get(\"cls\")).html(this.model.get(\"title\"));\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                message: null,\n                status: \"info\",\n                cls: \"\",\n                persistent: false,\n                fade: true\n            }).set(options);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        update: function update(options) {\n            this.model.set(options);\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-message\").addClass(this.model.get(\"cls\"));\n            var status = this.model.get(\"status\");\n            if (this.model.get(\"large\")) {\n                this.$el.addClass((status == \"success\" && \"done\" || status == \"danger\" && \"error\" || status) + \"messagelarge\");\n            } else {\n                this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n            }\n            if (this.model.get(\"message\")) {\n                this.$el.html(this.messageForDisplay());\n                this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                this.timeout && window.clearTimeout(this.timeout);\n                if (!this.model.get(\"persistent\")) {\n                    var self = this;\n                    this.timeout = window.setTimeout(function () {\n                        self.model.set(\"message\", \"\");\n                    }, 3000);\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function messageForDisplay() {\n            return _.escape(this.model.get(\"message\"));\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function messageForDisplay() {\n            return this.model.get(\"message\");\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                type: \"text\",\n                placeholder: \"\",\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: \"\",\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n            this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        events: {\n            input: \"_onchange\"\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            var self = this;\n            this.$el.removeClass().addClass(\"ui-\" + this.tagName).addClass(this.model.get(\"cls\")).addClass(this.model.get(\"style\")).attr(\"id\", this.model.id).attr(\"type\", this.model.get(\"type\")).attr(\"placeholder\", this.model.get(\"placeholder\")).css(\"color\", this.model.get(\"color\") || \"\").css(\"border-color\", this.model.get(\"color\") || \"\");\n            var datalist = this.model.get(\"datalist\");\n            if ($.isArray(datalist) && datalist.length > 0) {\n                this.$el.autocomplete({\n                    source: function source(request, response) {\n                        response(self.model.get(\"datalist\"));\n                    },\n                    change: function change() {\n                        self._onchange();\n                    }\n                });\n            }\n            if (this.model.get(\"value\") !== this.$el.val()) {\n                this.$el.val(this.model.get(\"value\"));\n            }\n            _.each([\"readonly\", \"disabled\"], function (attr_name) {\n                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n            });\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            return this;\n        },\n        _onchange: function _onchange() {\n            this.value(this.$el.val());\n            this.model.get(\"onchange\") && this.model.get(\"onchange\")(this.model.get(\"value\"));\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$hidden = $(\"<div/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.$hidden.val(this.model.get(\"value\"));\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$file = $(\"<input/>\").attr(\"type\", \"file\").addClass(\"ui-margin-bottom\")).append(this.$text = $(\"<textarea/>\").addClass(\"ui-textarea\").attr(\"disabled\", true)).append(this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.$file.on(\"change\", function (e) {\n                self._readFile(e);\n            });\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            this.model.get(\"value\") ? this.$text.text(this.model.get(\"value\")).show() : this.$text.hide();\n            this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function _readFile(e) {\n            var self = this;\n            var file = e.target.files && e.target.files[0];\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    self.model.set({ wait: false, value: this.result });\n                };\n                this.model.set({ wait: true, value: null });\n                reader.readAsText(file);\n            }\n        }\n    });\n\n    return {\n        Button: Buttons.ButtonDefault,\n        ButtonIcon: Buttons.ButtonIcon,\n        ButtonCheck: Buttons.ButtonCheck,\n        ButtonMenu: Buttons.ButtonMenu,\n        ButtonLink: Buttons.ButtonLink,\n        Input: Input,\n        Label: Label,\n        Message: Message,\n        UnescapedMessage: UnescapedMessage,\n        Upload: Upload,\n        Modal: Modal,\n        RadioButton: Options.RadioButton,\n        Checkbox: Options.Checkbox,\n        Radio: Options.Radio,\n        Select: Select,\n        Hidden: Hidden,\n        Slider: Slider,\n        Drilldown: Drilldown\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 58:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Generic form view */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            }).done(function (response) {\n                var options = $.extend({}, self.model.attributes, response);\n                var form = new Form({\n                    title: options.title,\n                    message: options.message,\n                    status: options.status || \"warning\",\n                    icon: options.icon,\n                    inputs: options.inputs,\n                    buttons: {\n                        submit: new Ui.Button({\n                            tooltip: options.submit_tooltip,\n                            title: options.submit_title || \"Save\",\n                            icon: options.submit_icon || \"fa-save\",\n                            cls: \"btn btn-primary ui-clear-float\",\n                            onclick: function onclick() {\n                                self._submit(form);\n                            }\n                        })\n                    }\n                });\n                self.$el.empty().append(form.$el);\n            }).fail(function (response) {\n                self.$el.empty().append(new Ui.Message({\n                    message: \"Failed to load resource \" + self.url + \".\",\n                    status: \"danger\",\n                    persistent: true\n                }).$el);\n            });\n        },\n\n        _submit: function _submit(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            }).done(function (response) {\n                var success_message = {\n                    message: response.message,\n                    status: \"success\",\n                    persistent: false\n                };\n                if (self.redirect) {\n                    window.location = Galaxy.root + self.redirect + \"?\" + $.param(success_message);\n                } else {\n                    form.data.matchModel(response, function (input, input_id) {\n                        form.field_list[input_id].value(input.value);\n                    });\n                    self._showMessage(form, success_message);\n                }\n            }).fail(function (response) {\n                self._showMessage(form, {\n                    message: response.responseJSON.err_msg,\n                    status: \"danger\",\n                    persistent: false\n                });\n            });\n        },\n\n        _showMessage: function _showMessage(form, options) {\n            var $panel = form.$el.parents().filter(function () {\n                return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n            }).first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-portlet\",\n                title: \"\",\n                icon: \"\",\n                buttons: null,\n                body: null,\n                scrollable: true,\n                nopadding: false,\n                operations: null,\n                collapsible: false,\n                collapsible_button: false,\n                collapsed: false,\n                onchange_title: null\n            }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function onclick() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function ($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\"no-padding\");\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon.removeClass().addClass(\"portlet-title-icon fa\").addClass(options.icon).show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text[options.collapsible ? \"addClass\" : \"removeClass\"](\"no-highlight collapsible\").off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function () {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title && this.$title_text.make_text_editable({\n                on_finish: function on_finish(new_title) {\n                    options.onchange_title(new_title);\n                }\n            });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function append($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function empty() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function header() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function body() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function show() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function hide() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function enableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function disableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function hideOperation(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function showOperation(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function setOperation(id, callback) {\n            this.$operations.find(\"#\" + id).off(\"click\").on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function title(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function collapse() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function expand() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function disable() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function enable() {\n            this.$backdrop.hide();\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").append($(\"<div/>\").addClass(\"portlet-header\").append($(\"<div/>\").addClass(\"portlet-operations\")).append($(\"<div/>\").addClass(\"portlet-title\").append($(\"<i/>\").addClass(\"portlet-title-icon\")).append($(\"<span/>\").addClass(\"portlet-title-text\")))).append($(\"<div/>\").addClass(\"portlet-content\").append($(\"<div/>\").addClass(\"portlet-body\")).append($(\"<div/>\").addClass(\"portlet-buttons\"))).append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5), __webpack_require__(31), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n    return Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model({\n                initial_errors: false,\n                cls: \"ui-portlet-limited\",\n                icon: null,\n                always_refresh: true,\n                status: \"warning\",\n                hide_operations: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        /** Update available options */\n        update: function update(new_model) {\n            var self = this;\n            this.data.matchModel(new_model, function (node, input_id) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        input.options = node.options;\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({\n                                            label: opt[0],\n                                            value: opt[1]\n                                        });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger(\"change\");\n                            Galaxy.emit.debug(\"form-view::update()\", \"Updating options for \" + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function wait(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    field[active ? \"wait\" : \"unwait\"]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function highlight(input_id, message, silent) {\n            var input_element = this.element_list[input_id];\n            if (input_element) {\n                input_element.error(message || \"Please verify this parameter.\");\n                this.portlet.expand();\n                this.trigger(\"expand\", input_id);\n                if (!silent) {\n                    var $panel = this.$el.parents().filter(function () {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    }).first();\n                    $panel.animate({\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    }, 500);\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function errors(options) {\n            this.trigger(\"reset\");\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function render() {\n            var self = this;\n            this.off(\"change\");\n            this.off(\"reset\");\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager(this);\n            this._renderForm();\n            this.data.create();\n            this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on(\"change\", function (input_id) {\n                var input = self.input_list[input_id];\n                if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                    var new_check = self.data.checksum();\n                    if (new_check != current_check) {\n                        current_check = new_check;\n                        self.model.get(\"onchange\")();\n                    }\n                }\n            });\n            this.on(\"reset\", function () {\n                _.each(self.element_list, function (input_element) {\n                    input_element.reset();\n                });\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function _renderForm() {\n            $(\".tooltip\").remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View(this, {\n                inputs: options.inputs\n            });\n            this.portlet = new Portlet.View({\n                icon: options.icon,\n                title: options.title,\n                cls: options.cls,\n                operations: !options.hide_operations && options.operations,\n                buttons: options.buttons,\n                collapsible: options.collapsible,\n                collapsed: options.collapsed,\n                onchange_title: options.onchange_title\n            });\n            this.portlet.append(this.message.$el);\n            this.portlet.append(this.section.$el);\n            this.$el.empty();\n            options.inputs && this.$el.append(this.portlet.$el);\n            options.message && this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n            Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ })\n\n},[158]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","/** This module contains all button views. */\ndefine([\"utils/utils\"], function(Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"btn btn-default\",\n                    wait: false,\n                    wait_text: \"Sending...\",\n                    wait_cls: \"btn btn-info\",\n                    disabled: false,\n                    percentage: -1\n                }).set(options);\n            this.setElement(\n                $(\"<button/>\")\n                    .attr(\"type\", \"button\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n                    .append(\n                        (this.$progress = $(\"<div/>\").append(\n                            (this.$progress_bar = $(\"<div/>\"))\n                        ))\n                    )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"ui-button-default\")\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"id\", options.id)\n                .attr(\"disabled\", options.disabled)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    options.onclick && !self.disabled && options.onclick();\n                })\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress\n                .addClass(\"progress\")\n                .css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar\n                .addClass(\"progress-bar\")\n                .css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon &&\n                    options.title &&\n                    this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"\"\n                }).set(options);\n            this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr({\n                    id: options.id,\n                    href: options.href || \"javascript:void(0)\",\n                    title: options.title,\n                    target: options.target || \"_top\",\n                    disabled: options.disabled\n                })\n                .tooltip({ placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function() {\n                    options.onclick && !options.disabled && options.onclick();\n                });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"Select/Unselect all\",\n                    icons: [\n                        \"fa-square-o\",\n                        \"fa-minus-square-o\",\n                        \"fa-check-square-o\"\n                    ],\n                    value: 0,\n                    onchange: function() {}\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$icon = $(\"<span/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .addClass(\"ui-button-check\")\n                .off(\"click\")\n                .on(\"click\", function() {\n                    self.model.set(\n                        \"value\",\n                        (self.model.get(\"value\") === 0 && 2) || 0\n                    );\n                    options.onclick && options.onclick();\n                });\n            this.$title.html(options.title);\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa ui-margin-right\")\n                .addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = (new_val !== total && 1) || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"ui-button-icon\",\n                    disabled: false\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$button = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"disabled\", options.disabled)\n                .attr(\"id\", options.id)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    !options.disabled && options.onclick && options.onclick();\n                });\n            this.$button\n                .addClass(\"button\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: \"\",\n                    title: \"\",\n                    pull: \"right\",\n                    icon: null,\n                    onclick: null,\n                    cls: \"ui-button-icon ui-button-menu\",\n                    tooltip: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onunload: null,\n                    visible: true,\n                    tag: \"\"\n                }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$root = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(\n                this.collection,\n                \"change add remove reset\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"dropdown\")\n                .addClass(options.cls)\n                .attr(\"id\", options.id)\n                .css({\n                    display:\n                        options.visible &&\n                        this.collection.where({ visible: true }).length > 0\n                            ? \"block\"\n                            : \"none\"\n                });\n            this.$root\n                .addClass(\"root button dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function(e) {\n                    $(\".tooltip\").hide();\n                    e.preventDefault();\n                    options.onclick && options.onclick();\n                });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title\n                .removeClass()\n                .addClass(\"title\")\n                .html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\")\n                    .addClass(\"menu dropdown-menu\")\n                    .addClass(\"pull-\" + self.model.get(\"pull\"))\n                    .attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function(submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\")\n                        .addClass(\"dropdown-item\")\n                        .attr({\n                            href: suboptions.href,\n                            target: suboptions.target\n                        })\n                        .append(\n                            $(\"<i/>\")\n                                .addClass(\"fa\")\n                                .addClass(suboptions.icon)\n                                .css(\n                                    \"display\",\n                                    suboptions.icon ? \"inline-block\" : \"none\"\n                                )\n                        )\n                        .append(suboptions.title)\n                        .on(\"click\", function(e) {\n                            if (suboptions.onclick) {\n                                e.preventDefault();\n                                suboptions.onclick();\n                            }\n                        });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider &&\n                        self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function(options) {\n            this.collection.add(\n                Utils.merge(options, {\n                    title: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onclick: null,\n                    divider: false,\n                    visible: true,\n                    icon: null,\n                    cls: \"button-menu btn-group\"\n                })\n            );\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","var jQuery = require(\"jquery\"),\n    $ = jQuery,\n    GalaxyApp = require(\"galaxy\").GalaxyApp,\n    AdminPanel = require(\"./panels/admin-panel\"),\n    FormWrapper = require(\"mvc/form/form-wrapper\"),\n    GridView = require(\"mvc/grid/grid-view\"),\n    Ui = require(\"mvc/ui/ui-misc\"),\n    QueryStringParsing = require(\"utils/query-string-parsing\"),\n    Router = require(\"layout/router\"),\n    Utils = require(\"utils/utils\"),\n    Page = require(\"layout/page\");\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)repositories\": \"show_repositories\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/users_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_roles: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/roles_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_groups: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/groups_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_repositories: function() {\n            this.page.display(\n                new GridView({\n                    url_base:\n                        Galaxy.root + \"admin_toolshed/browse_repositories\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_tool_versions: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/tool_versions_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_quotas: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/quotas_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_forms: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"forms/forms_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_form: function(form_id) {\n            var id = \"?id=\" + QueryStringParsing.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function() {\n        _.extend(options.config, { active_view: \"admin\" });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(\n            _.extend(options, {\n                Left: AdminPanel,\n                Router: AdminRouter\n            })\n        );\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","var _l = require(\"utils/localization\");\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([\n            {\n                title: \"Server\",\n                items: [\n                    {\n                        title: \"Data types\",\n                        url: \"admin/view_datatypes_registry\"\n                    },\n                    {\n                        title: \"Data tables\",\n                        url: \"admin/view_tool_data_tables\"\n                    },\n                    {\n                        title: \"Data libraries\",\n                        url: \"library_admin/browse_libraries\"\n                    },\n                    {\n                        title: \"Display applications\",\n                        url: \"admin/display_applications\"\n                    },\n                    {\n                        title: \"Manage jobs\",\n                        url: \"admin/jobs\"\n                    },\n                    {\n                        title: \"Local data\",\n                        url: \"data_manager\"\n                    }\n                ]\n            },\n            {\n                title: \"User Management\",\n                items: [\n                    {\n                        title: \"Users\",\n                        url: \"admin/users\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Quotas\",\n                        url: \"admin/quotas\",\n                        target: \"__use_router__\",\n                        enabled: self.config.enable_quotas\n                    },\n                    {\n                        title: \"Groups\",\n                        url: \"admin/groups\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Roles\",\n                        url: \"admin/roles\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Forms\",\n                        url: \"admin/forms\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"API keys\",\n                        url: \"userskeys/all_users\"\n                    },\n                    {\n                        title: \"Impersonate a user\",\n                        url: \"admin/impersonate\",\n                        enabled: self.config.allow_user_impersonation\n                    }\n                ]\n            },\n            {\n                title: \"Tool Management\",\n                items: [\n                    {\n                        title: \"Install new tools\",\n                        url: \"admin_toolshed/browse_tool_sheds\",\n                        enabled: self.settings.is_tool_shed_installed\n                    },\n                    {\n                        title: \"Install new tools (Beta)\",\n                        url: \"admin_toolshed/browse_toolsheds\",\n                        enabled:\n                            self.settings.is_tool_shed_installed &&\n                            self.config.enable_beta_ts_api_install\n                    },\n                    {\n                        title: \"Monitor installation\",\n                        url: \"admin_toolshed/monitor_repository_installation\",\n                        enabled: self.settings.installing_repository_ids\n                    },\n                    {\n                        title: \"Manage tools\",\n                        url: \"admin/repositories\",\n                        enabled: self.settings.is_repo_installed,\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"Manage metadata\",\n                        url:\n                            \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                        enabled: self.settings.is_repo_installed\n                    },\n                    {\n                        title: \"Manage whitelist\",\n                        url: \"admin/sanitize_whitelist\"\n                    },\n                    {\n                        title: \"Manage dependencies\",\n                        url: \"admin/manage_tool_dependencies\"\n                    },\n                    {\n                        title: \"View lineage\",\n                        url: \"admin/tool_versions\",\n                        target: \"__use_router__\"\n                    },\n                    {\n                        title: \"View migration stages\",\n                        url: \"admin/review_tool_migration_stages\"\n                    },\n                    {\n                        title: \"View error logs\",\n                        url: \"admin/tool_errors\"\n                    }\n                ]\n            }\n        ]);\n        this.setElement(this._template());\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function(category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function(item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\")\n                        .attr({ href: self.root + item.url })\n                        .text(_l(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function(e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-side-section-body-title\")\n                            .append($link)\n                    );\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page\n            .$(\"#galaxy_main\")\n            .prop(\n                \"src\",\n                this.root +\n                    \"admin/center?message=\" +\n                    this.message +\n                    \"&status=\" +\n                    this.status\n            );\n    },\n\n    _templateSection: function(options) {\n        return [\n            \"<div>\",\n            '<div class=\"ui-side-section-title\">' +\n                _l(options.title) +\n                \"</div>\",\n            '<div class=\"ui-side-section-body\"/>',\n            \"</div>\"\n        ].join(\"\");\n    },\n\n    _template: function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function() {\n        return \"adminPanel\";\n    }\n});\n\nmodule.exports = AdminPanel;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/grid/grid-model\",\n        \"mvc/grid/grid-template\",\n        \"mvc/ui/popup-menu\"\n    ],\n    function(Utils, GridModel, Templates, PopupMenu) {\n        // grid view\n        return Backbone.View.extend({\n            // model\n            grid: null,\n\n            // Initialize\n            initialize: function(grid_config) {\n                this.grid = new GridModel();\n                this.dict_format = grid_config.dict_format;\n                this.title = grid_config.title;\n                var self = this;\n                window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n                    // Put tag name and value together.\n                    var tag =\n                        tag_name +\n                        (tag_value !== undefined && tag_value !== \"\"\n                            ? \":\" + tag_value\n                            : \"\");\n                    var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                    if (!advanced_search) {\n                        $(\"#standard-search\").slideToggle(\"fast\");\n                        $(\"#advanced-search\").slideToggle(\"fast\");\n                    }\n                    self.add_filter_condition(\"tags\", tag);\n                };\n\n                // set element\n                if (this.dict_format) {\n                    this.setElement(\"<div/>\");\n                    if (grid_config.url_base && !grid_config.items) {\n                        var url_data = grid_config.url_data || {};\n                        _.each(grid_config.filters, function(v, k) {\n                            url_data[\"f-\" + k] = v;\n                        });\n                        $.ajax({\n                            url: grid_config.url_base + \"?\" + $.param(url_data),\n                            success: function(response) {\n                                response.embedded = grid_config.embedded;\n                                response.filters = grid_config.filters || {};\n                                self.init_grid(response);\n                            }\n                        });\n                    } else {\n                        this.init_grid(grid_config);\n                    }\n                } else {\n                    this.setElement(\"#grid-container\");\n                    this.init_grid(grid_config);\n                }\n\n                // fix padding\n                if (grid_config.use_panels) {\n                    $(\"#center\").css({\n                        padding: \"10px\",\n                        overflow: \"auto\"\n                    });\n                }\n            },\n\n            // refresh frames\n            handle_refresh: function(refresh_frames) {\n                if (refresh_frames) {\n                    if ($.inArray(\"history\", refresh_frames) > -1) {\n                        if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                            top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                        }\n                    }\n                }\n            },\n\n            // Initialize\n            init_grid: function(grid_config) {\n                this.grid.set(grid_config);\n\n                // get options\n                var options = this.grid.attributes;\n\n                if (this.allow_title_display && options.title) {\n                    Utils.setWindowTitle(options.title);\n                }\n                // handle refresh requests\n                this.handle_refresh(options.refresh_frames);\n\n                // strip protocol and domain\n                var url = this.grid.get(\"url_base\");\n                url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n                this.grid.set(\"url_base\", url);\n\n                // append main template\n                this.$el.html(Templates.grid(options));\n\n                // update div contents\n                this.$el\n                    .find(\"#grid-table-header\")\n                    .html(Templates.header(options));\n                this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n                this.$el\n                    .find(\"#grid-table-footer\")\n                    .html(Templates.footer(options));\n\n                // update message\n                if (options.message) {\n                    this.$el\n                        .find(\"#grid-message\")\n                        .html(Templates.message(options));\n                    var self = this;\n                    if (options.use_hide_message) {\n                        setTimeout(function() {\n                            self.$el.find(\"#grid-message\").html(\"\");\n                        }, 5000);\n                    }\n                }\n\n                // configure elements\n                this.init_grid_elements();\n                this.init_grid_controls();\n\n                // attach global event handler\n                // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n                init_refresh_on_change();\n            },\n\n            // Initialize grid controls\n            init_grid_controls: function() {\n                // link\n                var self = this;\n\n                // Initialize grid operation button.\n                this.$el.find(\".operation-button\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.submit_operation(this);\n                        return false;\n                    });\n                });\n\n                // Initialize text filters to select text on click and use normal font when user is typing.\n                this.$el.find(\"input[type=text]\").each(function() {\n                    $(this).off();\n                    $(this)\n                        .click(function() {\n                            $(this).select();\n                        })\n                        .keyup(function() {\n                            $(this).css(\"font-style\", \"normal\");\n                        });\n                });\n\n                // Initialize sort links.\n                this.$el.find(\".sort-link\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_sort_condition($(this).attr(\"sort_key\"));\n                        return false;\n                    });\n                });\n\n                // Initialize text filters.\n                this.$el.find(\".text-filter-form\").each(function() {\n                    $(this).off();\n                    $(this).submit(function() {\n                        var column_key = $(this).attr(\"column_key\");\n                        var text_input_obj = $(\n                            \"#input-\" + column_key + \"-filter\"\n                        );\n                        var text_input = text_input_obj.val();\n                        text_input_obj.val(\"\");\n                        self.add_filter_condition(column_key, text_input);\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".text-filter-val > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        // Remove visible element.\n                        $(this)\n                            .parent()\n                            .remove();\n\n                        // Remove filter condition.\n                        self.remove_filter_condition(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n\n                        // Return\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".categorical-filter > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_categorical_filter(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n                        return false;\n                    });\n                });\n\n                // Initialize standard, advanced search toggles.\n                this.$el.find(\".advanced-search-toggle\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                        self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                        return false;\n                    });\n                });\n\n                // Add event to check all box\n                this.$el.find(\"#check_all\").off();\n                this.$el.find(\"#check_all\").on(\"click\", function() {\n                    self.check_all_items();\n                });\n            },\n\n            // Initialize grid elements.\n            init_grid_elements: function() {\n                // Initialize grid selection checkboxes.\n                this.$el.find(\".grid\").each(function() {\n                    var checkboxes = $(this).find(\n                        \"input.grid-row-select-checkbox\"\n                    );\n                    var check_count = $(this).find(\"span.grid-selected-count\");\n                    var update_checked = function() {\n                        check_count.text(\n                            $(checkboxes).filter(\":checked\").length\n                        );\n                    };\n\n                    $(checkboxes).each(function() {\n                        $(this).change(update_checked);\n                    });\n                    update_checked();\n                });\n\n                // Initialize ratings.\n                if (this.$el.find(\".community_rating_star\").length !== 0)\n                    this.$el.find(\".community_rating_star\").rating({});\n\n                // get options\n                var options = this.grid.attributes;\n                var self = this;\n\n                //\n                // add page click events\n                //\n                this.$el.find(\".page-link > a\").each(function() {\n                    $(this).click(function() {\n                        self.set_page($(this).attr(\"page_num\"));\n                        return false;\n                    });\n                });\n\n                //\n                // add inbound/outbound events\n                //\n                this.$el.find(\".use-target\").each(function() {\n                    $(this).click(function(e) {\n                        self.execute({\n                            href: $(this).attr(\"href\"),\n                            target: $(this).attr(\"target\")\n                        });\n                        return false;\n                    });\n                });\n\n                // empty grid?\n                var items_length = options.items.length;\n                if (items_length == 0) {\n                    return;\n                }\n\n                // add operation popup menus\n                _.each(options.items, function(item, index) {\n                    var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                    var popup = new PopupMenu(button);\n                    _.each(options[\"operations\"], function(operation) {\n                        self._add_operation(popup, operation, item);\n                    });\n                });\n            },\n\n            /** Add an operation to the items menu */\n            _add_operation: function(popup, operation, item) {\n                var self = this;\n                var settings = item.operation_config[operation.label];\n                if (settings.allowed && operation.allow_popup) {\n                    popup.addItem({\n                        html: operation.label,\n                        href: settings.url_args,\n                        target: settings.target,\n                        confirmation_text: operation.confirm,\n                        func: function(e) {\n                            e.preventDefault();\n                            var label = $(e.target).html();\n                            if (operation.onclick) {\n                                operation.onclick(item.encode_id);\n                            } else {\n                                self.execute(this.findItemByHtml(label));\n                            }\n                        }\n                    });\n                }\n            },\n\n            // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n            add_filter_condition: function(name, value) {\n                // Do nothing is value is empty.\n                if (value === \"\") {\n                    return false;\n                }\n\n                // Add condition to grid.\n                this.grid.add_filter(name, value, true);\n\n                // Add button that displays filter and provides a button to delete it.\n                var t = $(Templates.filter_element(name, value));\n                var self = this;\n                t.click(function() {\n                    // Remove visible element.\n                    $(this).remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition(name, value);\n                });\n\n                // append to container\n                var container = this.$el.find(\n                    \"#\" + name + \"-filtering-criteria\"\n                );\n                container.append(t);\n\n                // execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n            remove_filter_condition: function(name, value) {\n                // Remove filter condition.\n                this.grid.remove_filter(name, value);\n\n                // Execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set sort condition for grid.\n            set_sort_condition: function(col_key) {\n                // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n                // currently sorted column, sort is reversed.\n                var cur_sort = this.grid.get(\"sort_key\");\n                var new_sort = col_key;\n                if (cur_sort.indexOf(col_key) !== -1) {\n                    // Reverse sort.\n                    if (cur_sort.substring(0, 1) !== \"-\") {\n                        new_sort = \"-\" + col_key;\n                    }\n                }\n\n                // Remove sort arrows elements.\n                this.$el.find(\".sort-arrow\").remove();\n\n                // Add sort arrow element to new sort column.\n                var sort_arrow =\n                    new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n                var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\n                    \"sort-arrow\"\n                );\n\n                // Add to header\n                this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n                // Update grid.\n                this.grid.set(\"sort_key\", new_sort);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set new value for categorical filter.\n            set_categorical_filter: function(name, new_value) {\n                // Update filter hyperlinks to reflect new filter value.\n                var category_filter = this.grid.get(\"categorical_filters\")[\n                        name\n                    ],\n                    cur_value = this.grid.get(\"filters\")[name];\n                var self = this;\n                this.$el.find(\".\" + name + \"-filter\").each(function() {\n                    var text = $.trim($(this).text());\n                    var filter = category_filter[text];\n                    var filter_value = filter[name];\n                    if (filter_value == new_value) {\n                        // Remove filter link since grid will be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        $(this).empty();\n                        $(this).addClass(\"current-filter\");\n                        $(this).append(text);\n                    } else if (filter_value == cur_value) {\n                        // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        $(this).empty();\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_categorical_filter(name, filter_value);\n                        });\n                        $(this).removeClass(\"current-filter\");\n                        $(this).append(t);\n                    }\n                });\n\n                // Update grid.\n                this.grid.add_filter(name, new_value);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set page to view.\n            set_page: function(new_page) {\n                // Update page hyperlink to reflect new page.\n                var self = this;\n                this.$el.find(\".page-link\").each(function() {\n                    var id = $(this).attr(\"id\"),\n                        page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                        cur_page = self.grid.get(\"cur_page\"),\n                        text;\n                    if (page_num === new_page) {\n                        // Remove link to page since grid will be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        text = $(this)\n                            .children()\n                            .text();\n                        $(this).empty();\n                        $(this).addClass(\"inactive-link\");\n                        $(this).text(text);\n                    } else if (page_num === cur_page) {\n                        // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        text = $(this).text();\n                        $(this).empty();\n                        $(this).removeClass(\"inactive-link\");\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_page(page_num);\n                        });\n                        $(this).append(t);\n                    }\n                });\n\n                if (new_page === \"all\") {\n                    this.grid.set(\"cur_page\", new_page);\n                } else {\n                    this.grid.set(\"cur_page\", parseInt(new_page, 10));\n                }\n                this.execute();\n            },\n\n            // confirmation/submission of operation request\n            submit_operation: function(operation_button, confirmation_text) {\n                // identify operation\n                var operation_name = $(operation_button).val();\n\n                // verify in any item is selected\n                var number_of_checked_ids = this.$el.find(\n                    'input[name=\"id\"]:checked'\n                ).length;\n                if (!number_of_checked_ids > 0) {\n                    return false;\n                }\n\n                // Check to see if there's grid confirmation text for this operation\n                var operation = _.findWhere(this.grid.attributes.operations, {\n                    label: operation_name\n                });\n                if (operation && !confirmation_text) {\n                    confirmation_text = operation.confirm || \"\";\n                }\n\n                // collect ids\n                var item_ids = [];\n                this.$el.find(\"input[name=id]:checked\").each(function() {\n                    item_ids.push($(this).val());\n                });\n\n                // execute operation\n                var options = {\n                    operation: operation_name,\n                    id: item_ids,\n                    confirmation_text: confirmation_text\n                };\n                if (operation.target == \"top\") {\n                    options = _.extend(options, {\n                        href: operation.href,\n                        target: operation.target\n                    });\n                }\n                this.execute(options);\n                return true;\n            },\n\n            check_all_items: function() {\n                var check = this.$(\".grid-row-select-checkbox\");\n                var state = this.$(\"#check_all\").prop(\"checked\");\n                _.each(check, function(c) {\n                    $(c).prop(\"checked\", state);\n                });\n                this.init_grid_elements();\n            },\n\n            // Go back to page one; this is useful when a filter is applied.\n            go_page_one: function() {\n                // Need to go back to page 1 if not showing all.\n                var cur_page = this.grid.get(\"cur_page\");\n                if (\n                    cur_page !== null &&\n                    cur_page !== undefined &&\n                    cur_page !== \"all\"\n                ) {\n                    this.grid.set(\"cur_page\", 1);\n                }\n            },\n\n            //\n            // execute operations and hyperlink requests\n            //\n            execute: function(options) {\n                // get url\n                var id = null;\n                var href = null;\n                var operation = null;\n                var confirmation_text = null;\n                var target = null;\n\n                // check for options\n                if (options) {\n                    // get options\n                    href = options.href;\n                    operation = options.operation;\n                    id = options.id;\n                    confirmation_text = options.confirmation_text;\n                    target = options.target;\n\n                    // check if input contains the operation tag\n                    if (\n                        href !== undefined &&\n                        href.indexOf(\"operation=\") != -1\n                    ) {\n                        // Get operation, id in hyperlink's href.\n                        var href_parts = href.split(\"?\");\n                        if (href_parts.length > 1) {\n                            var href_parms_str = href_parts[1];\n                            var href_parms = href_parms_str.split(\"&\");\n                            for (\n                                var index = 0;\n                                index < href_parms.length;\n                                index++\n                            ) {\n                                if (\n                                    href_parms[index].indexOf(\"operation\") != -1\n                                ) {\n                                    // Found operation parm; get operation value.\n                                    operation = href_parms[index].split(\"=\")[1];\n                                    operation = operation.replace(/\\+/g, \" \");\n                                } else if (\n                                    href_parms[index].indexOf(\"id\") != -1\n                                ) {\n                                    // Found id parm; get id value.\n                                    id = href_parms[index].split(\"=\")[1];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // check for operation details\n                if (operation && id) {\n                    // show confirmation box\n                    if (\n                        confirmation_text &&\n                        confirmation_text != \"\" &&\n                        confirmation_text != \"None\" &&\n                        confirmation_text != \"null\"\n                    )\n                        if (!confirm(confirmation_text)) return false;\n\n                    // use small characters for operation?!\n                    operation = operation.toLowerCase();\n\n                    // Update grid.\n                    this.grid.set({\n                        operation: operation,\n                        item_ids: id\n                    });\n\n                    // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                    if (target == \"top\") {\n                        window.top.location =\n                            href + \"?\" + $.param(this.grid.get_url_data());\n                    } else if (\n                        this.grid.can_async_op(operation) ||\n                        this.dict_format\n                    ) {\n                        this.update_grid();\n                    } else {\n                        this.go_to(target, href);\n                    }\n\n                    // done\n                    return false;\n                }\n\n                // refresh grid\n                if (href) {\n                    this.go_to(target, href);\n                    return false;\n                }\n\n                // refresh grid\n                if (this.grid.get(\"async\") || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            },\n\n            // go to url\n            go_to: function(target, href) {\n                // get aysnc status\n                var async = this.grid.get(\"async\");\n                this.grid.set(\"async\", false);\n\n                // get slide status\n                var advanced_search = this.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n                this.grid.set(\"advanced_search\", advanced_search);\n\n                // get default url\n                if (!href) {\n                    href =\n                        this.grid.get(\"url_base\") +\n                        \"?\" +\n                        $.param(this.grid.get_url_data());\n                }\n\n                // clear grid of transient request attributes.\n                this.grid.set({\n                    operation: undefined,\n                    item_ids: undefined,\n                    async: async\n                });\n                switch (target) {\n                    case \"center\":\n                        $(\"#galaxy_main\").attr(\"src\", href);\n                        break;\n                    case \"top\":\n                        window.top.location = href;\n                        break;\n                    default:\n                        window.location = href;\n                }\n            },\n\n            // Update grid.\n            update_grid: function() {\n                // If there's an operation, do POST; otherwise, do GET.\n                var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n                // Show overlay to indicate loading and prevent user actions.\n                this.$el.find(\".loading-elt-overlay\").show();\n                var self = this;\n                $.ajax({\n                    type: method,\n                    url: self.grid.get(\"url_base\"),\n                    data: self.grid.get_url_data(),\n                    error: function(response) {\n                        alert(\"Grid refresh failed\");\n                    },\n                    success: function(response_text) {\n                        // backup\n                        var embedded = self.grid.get(\"embedded\");\n                        var insert = self.grid.get(\"insert\");\n                        var advanced_search = self.$el\n                            .find(\"#advanced-search\")\n                            .is(\":visible\");\n\n                        // request new configuration\n                        var json = self.dict_format\n                            ? response_text\n                            : $.parseJSON(response_text);\n\n                        // update\n                        json.embedded = embedded;\n                        json.insert = insert;\n                        json.advanced_search = advanced_search;\n\n                        // Initialize new grid config\n                        self.init_grid(json);\n\n                        // Hide loading overlay.\n                        self.$el.find(\".loading-elt-overlay\").hide();\n                    },\n                    complete: function() {\n                        // Clear grid of transient request attributes.\n                        self.grid.set({\n                            operation: undefined,\n                            item_ids: undefined\n                        });\n                    }\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-select\",\n                    error_text: \"No options available\",\n                    empty_text: \"Nothing selected\",\n                    visible: true,\n                    wait: false,\n                    multiple: false,\n                    searchable: true,\n                    optional: false,\n                    disabled: false,\n                    readonly: false,\n                    onchange: function() {},\n                    value: null,\n                    individual: false,\n                    pagesize: 20\n                }).set(options);\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\") &&\n                    self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:disabled\",\n                this._changeDisabled,\n                this\n            );\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:multiple change:searchable change:cls change:id\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.model.get(\"searchable\")\n                ? this._renderSearchable()\n                : this._renderClassic();\n            this.$el\n                .addClass(this.model.get(\"cls\"))\n                .attr(\"id\", this.model.get(\"id\"));\n            this.$select\n                .empty()\n                .addClass(\"select\")\n                .attr(\"id\", this.model.get(\"id\") + \"_select\")\n                .prop(\"multiple\", this.model.get(\"multiple\"))\n                .on(\"change\", function() {\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function() {\n            var self = this;\n            this.$el\n                .addClass(\n                    this.model.get(\"multiple\")\n                        ? \"ui-select-multiple\"\n                        : \"ui-select\"\n                )\n                .append((this.$select = $(\"<select/>\")))\n                .append((this.$dropdown = $(\"<div/>\")))\n                .append(\n                    (this.$resize = $(\"<div/>\").append(\n                        (this.$resize_icon = $(\"<i/>\"))\n                    ))\n                );\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon\n                    .addClass(\"fa fa-angle-double-right fa-rotate-45\")\n                    .show();\n                this.$resize\n                    .removeClass()\n                    .addClass(\"icon-resize\")\n                    .show()\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", function(event) {\n                        var currentY = event.pageY;\n                        var currentHeight = self.$select.height();\n                        self.minHeight = self.minHeight || currentHeight;\n                        $(\"#dd-helper\")\n                            .show()\n                            .on(\"mousemove\", function(event) {\n                                self.$select.height(\n                                    Math.max(\n                                        currentHeight +\n                                            (event.pageY - currentY),\n                                        self.minHeight\n                                    )\n                                );\n                            })\n                            .on(\"mouseup mouseleave\", function() {\n                                $(\"#dd-helper\")\n                                    .hide()\n                                    .off();\n                            });\n                    });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function() {\n            var self = this;\n            this.$el\n                .append((this.$select = $(\"<div/>\")))\n                .append((this.$dropdown = $(\"<div/>\")));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function() {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (\n                this.model.get(\"multiple\") &&\n                !this.model.get(\"individual\") &&\n                !this.model.get(\"readonly\")\n            ) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 &&\n                            _.each(self.model.get(\"data\"), function(option) {\n                                new_value.push(option.value);\n                            });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function(term, text) {\n            return (\n                !term ||\n                term == \"\" ||\n                String(text)\n                    .toUpperCase()\n                    .indexOf(term.toUpperCase()) >= 0\n            );\n        },\n\n        /** Updates the selection options */\n        _changeData: function() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function(option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function(option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function(e) {\n                            var found = false;\n                            _.each(e.tags, function(tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice(\n                                (q.page - 1) * pagesize,\n                                q.page * pagesize\n                            ),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function(result) {\n                        return (\n                            _.escape(result.text) +\n                            '<div class=\"ui-tags\">' +\n                            _.reduce(\n                                result.tags,\n                                function(memo, tag) {\n                                    if (self.matched_tags[tag]) {\n                                        return (\n                                            memo +\n                                            \"&nbsp;\" +\n                                            '<div class=\"label label-info\">' +\n                                            _.escape(tag) +\n                                            \"</div>\"\n                                        );\n                                    }\n                                    return memo;\n                                },\n                                \"\"\n                            ) +\n                            \"</div>\"\n                        );\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function(option) {\n                    self.$select.append(\n                        $(\"<option/>\")\n                            .attr(\"value\", option.value)\n                            .html(_.escape(option.label))\n                    );\n                });\n            }\n            this.model.set(\n                \"disabled\",\n                this.model.get(\"readonly\") || this.length() == 0\n            );\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(\n                    this.model.get(\"disabled\") ? \"disable\" : \"enable\"\n                );\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function() {\n            this.$dropdown\n                .removeClass()\n                .addClass(\"icon-dropdown fa\")\n                .addClass(\n                    this.model.get(\"wait\")\n                        ? \"fa-spinner fa-spin\"\n                        : \"fa-caret-down\"\n                );\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value(\n                        $.isArray(value) ? value.length : 0,\n                        this.length()\n                    );\n                }\n            } else if (\n                this._getValue() === null &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function(options, sorter) {\n            _.each(this.model.get(\"data\"), function(v) {\n                v.keep &&\n                    !_.findWhere(options, { value: v.value }) &&\n                    options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function() {\n            return $.isArray(this.model.get(\"data\"))\n                ? this.model.get(\"data\").length\n                : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function(v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function(a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function(v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self\n                            .$(\"input\")\n                            .prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(\n                    this._templateOptions(this.model.get(\"data\"))\n                );\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (\n                this._getValue() === null &&\n                !this.model.get(\"multiple\") &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value(\n                    $.isArray(this._getValue()) ? this._getValue().length : 0,\n                    this.length()\n                );\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function() {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this)\n                        .find(\".ui-list-name\")\n                        .html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(\n                        this._templateRow({\n                            id: options.id,\n                            name: options.name\n                        })\n                    );\n                    $el.on(\"click\", function() {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function() {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function() {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-list\">' +\n                '<div class=\"ui-margin-top\">' +\n                '<span class=\"ui-list-button\"/>' +\n                '<span class=\"ui-list-select\"/>' +\n                \"</div>\" +\n                '<div class=\"ui-list-message\"/>' +\n                '<div class=\"ui-list-portlet\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Row Template */\n        _templateRow: function(options) {\n            return (\n                '<div id=\"' +\n                options.id +\n                '\" class=\"ui-list-id\">' +\n                '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                '<span class=\"ui-list-name\">' +\n                options.name +\n                \"</span>\" +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return [\n                    '<ul id=\"',\n                    id,\n                    '-menu\" class=\"dropdown-menu\">',\n                    this._templateOptions(options),\n                    \"</ul>\"\n                ].join(\"\");\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return [\n                            '<li class=\"head\"><a href=\"javascript:void(0);\">',\n                            option.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target\n                            ? ' target=\"' + option.target + '\"'\n                            : \"\",\n                        check = option.checked\n                            ? '<span class=\"fa fa-check\"></span>'\n                            : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() + $(window).width() - menuWidth - 5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (\n                        _.has(this.options[i], \"html\") &&\n                        this.options[i].html === html\n                    ) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function(\n            $buttonElement,\n            $menuElement,\n            menuElementLinkSelector\n        ) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions(\n                $menuElement,\n                menuElementLinkSelector\n            );\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(\n            parent,\n            menuSelector,\n            buttonSelectorBuildFn\n        ) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(\n                            buttonSelectorBuildFn($menuElement, parent)\n                        );\n                    popupMenusCreated.push(\n                        PopupMenu.fromDom($buttonElement, $menuElement)\n                    );\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/** This class creates a ui table element. */\ndefine([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $(e.target)\n                .closest(\"tr\")\n                .attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return (\n                \"<div>\" +\n                '<table class=\"' +\n                this.options.cls +\n                '\">' +\n                \"<thead/>\" +\n                \"<tbody/>\" +\n                \"</table>\" +\n                \"<tmessage>\" +\n                this.options.content +\n                \"</tmessage>\" +\n                \"<div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([\"utils/utils\"], function(Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function() {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum +=\n                        id +\n                        \":\" +\n                        JSON.stringify(field.value && field.value()) +\n                        \":\" +\n                        field.collapsed +\n                        \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] &&\n                    self.app.element_list[input_id].$el.attr(\n                        \"tour_id\",\n                        flat_id\n                    );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(\n                                        section_label\n                                    );\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(\n                                            parseInt(block_label.substr(pos))\n                                        );\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(\n                                                0,\n                                                pos\n                                            );\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function(a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(\n                                        flat_id + \"_\" + index++,\n                                        node[block_prefix + block_indices[i]]\n                                    );\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[\n                                    input.id\n                                ].value();\n                                add(\n                                    flat_id + \"|\" + input.test_param.name,\n                                    input.id,\n                                    value\n                                );\n                                var selectedCase = matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(\n                                        flat_id,\n                                        head[\n                                            input.id +\n                                                \"-section-\" +\n                                                selectedCase\n                                        ]\n                                    );\n                                }\n                                break;\n                            case \"section\":\n                                convert((!input.flat && flat_id) || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (\n                                        input.ignore === undefined ||\n                                        input.ignore != value\n                                    ) {\n                                        if (\n                                            field.collapsed &&\n                                            input.collapsible_value\n                                        ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(\n                                                    p_id,\n                                                    input.id,\n                                                    input.payload[p_id]\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function(input, value) {\n            return matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function(input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function() {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = (input && { input: input }) || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function(input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function(cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(\n                            node.test_param,\n                            name + \"|\" + node.test_param.name,\n                            context\n                        );\n                        var selectedCase = matchCase(\n                            node,\n                            node.test_param.value\n                        );\n                        if (selectedCase != -1) {\n                            visitInputs(\n                                node.cases[selectedCase].inputs,\n                                callback,\n                                name,\n                                context\n                            );\n                        } else {\n                            Galaxy.emit.debug(\n                                \"form-data::visitInputs() - Invalid case for \" +\n                                    name +\n                                    \".\"\n                            );\n                        }\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","// dependencies\ndefine([], function() {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n     * Return true if operation can be done asynchronously.\n     */\n        can_async_op: function(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n     * Add filtering criterion.\n     */\n        add_filter: function(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n     * Remove filtering criterion.\n     */\n        remove_filter: function(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n     * Returns URL data for obtaining a new grid.\n     */\n        get_url_data: function() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function(k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function(args) {\n            return (\n                this.get(\"url_base\") +\n                \"?\" +\n                $.param(this.get_url_data()) +\n                \"&\" +\n                $.param(args)\n            );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine([\"utils/utils\"], function(Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl =\n                    '<div class=\"loading-elt-overlay\"></div>' +\n                    \"<table>\" +\n                    \"<tr>\" +\n                    '<td width=\"75%\">' +\n                    this.grid_header(options) +\n                    \"</td>\" +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"<tr>\" +\n                    '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"</table>\" +\n                    this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl +=\n                    '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' +\n                    options.info_text +\n                    \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function(options) {\n            return (\n                '<form method=\"post\" onsubmit=\"return false;\">' +\n                '<table id=\"grid-table\" class=\"grid\">' +\n                '<thead id=\"grid-table-header\"></thead>' +\n                '<tbody id=\"grid-table-body\"></tbody>' +\n                '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                \"</table>\" +\n                \"</form>\"\n            );\n        },\n\n        // template\n        grid_header: function(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl +=\n                        '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                        '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl +=\n                        \"<li>\" +\n                        '<a class=\"action-button use-target\" target=\"' +\n                        action.target +\n                        '\" href=\"' +\n                        action.url_args +\n                        '\" onclick=\"return false;\" >' +\n                        action.label +\n                        \"</a>\" +\n                        \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl +=\n                        '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                        '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl +=\n                            '<a href=\"' +\n                            column.href +\n                            '\" class=\"sort-link\" sort_key=\"' +\n                            column.key +\n                            '\">' +\n                            column.label +\n                            \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl +=\n                        '<span class=\"sort-arrow\">' +\n                        column.extra +\n                        \"</span>\" +\n                        \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl +=\n                        '<td style=\"width: 1.5em;\">' +\n                        '<input type=\"checkbox\" name=\"id\" value=\"' +\n                        encoded_id +\n                        '\" id=\"' +\n                        encoded_id +\n                        '\" class=\"grid-row-select-checkbox\" />' +\n                        \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl +=\n                                    '<div id=\"' +\n                                    id +\n                                    '\" class=\"' +\n                                    cls +\n                                    '\" style=\"float: left;\">';\n                            }\n                            tmpl +=\n                                '<a class=\"menubutton-label use-target\" target=\"' +\n                                target +\n                                '\" href=\"' +\n                                link +\n                                '\" onclick=\"return false;\">' +\n                                value +\n                                \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl +=\n                                '<div id=\"' +\n                                id +\n                                '\" class=\"' +\n                                cls +\n                                '\"><label id=\"' +\n                                column.label_id_prefix +\n                                encoded_id +\n                                '\" for=\"' +\n                                encoded_id +\n                                '\">' +\n                                (value || \"\") +\n                                \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl +=\n                    '<td colspan=\"100\">' +\n                    '<span id=\"page-link-container\">' +\n                    \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl +=\n                        '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (\n                    var page_index = min_page;\n                    page_index < max_page + 1;\n                    page_index++\n                ) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl +=\n                            '<span class=\"page-link inactive-link\" id=\"page-link-' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"page-link\" id=\"page-link-' +\n                            page_index +\n                            '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl +=\n                        \"...\" +\n                        '<span class=\"page-link\" id=\"page-link-' +\n                        num_pages +\n                        '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                        num_pages +\n                        '\">' +\n                        num_pages +\n                        \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl +=\n                    '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl +=\n                    \"<tr>\" +\n                    '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                    \"<td></td>\" +\n                    '<td colspan=\"100\">' +\n                    'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl +=\n                            '<input type=\"button\" value=\"' +\n                            operation.label +\n                            '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl +=\n                            '<a class=\"action-button\" href=\"' +\n                            operation.global_operation +\n                            '\">' +\n                            operation.label +\n                            \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl +=\n                    \"<tr>\" +\n                    '<td colspan=\"100\">' +\n                    options.legend +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function(options) {\n            var status = str(options.status);\n            if (status.indexOf([\"success\", \"ok\"]) != -1) {\n                status = \"done\";\n            }\n            return (\n                \"<p>\" +\n                '<div class=\"' +\n                status +\n                'message transient-message\">' +\n                _.escape(options.message) +\n                \"</div>\" +\n                '<div style=\"clear: both\"></div>' +\n                \"</p>\"\n            );\n        },\n\n        // template\n        grid_filters: function(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl =\n                '<div id=\"standard-search\" style=\"display: ' +\n                standard_search_display +\n                ';\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"padding: 0;\">' +\n                \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl +=\n                    '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl +=\n                '<div id=\"advanced-search\" style=\"display: ' +\n                advanced_search_display +\n                '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"text-align: left\" colspan=\"100\">' +\n                '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                \"</td>\" +\n                \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl +=\n                    '<td align=\"left\" style=\"padding-left: 10px\">' +\n                    column_label +\n                    \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl +=\n                    '<form class=\"text-filter-form\" column_key=\"' +\n                    column_key +\n                    '\" action=\"' +\n                    options.url +\n                    '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl +=\n                                '<input type=\"hidden\" id=\"' +\n                                temp_column.key +\n                                '\" name=\"f-' +\n                                temp_column.key +\n                                '\" value=\"' +\n                                filter_value +\n                                '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(\n                                column_key,\n                                column_filter\n                            );\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl +=\n                    '<span class=\"search-box\">' +\n                    '<input class=\"search-box-input\" id=\"input-' +\n                    column_key +\n                    '-filter\" name=\"f-' +\n                    column_key +\n                    '\" type=\"text\" placeholder=\"' +\n                    value +\n                    '\" size=\"' +\n                    size +\n                    '\"/>' +\n                    '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                    '<i class=\"fa fa-search\"></i>' +\n                    \"</button>\" +\n                    \"</span>\" +\n                    \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter current-filter\">' +\n                            cf_label +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter\">' +\n                            '<a href=\"javascript:void(0);\" filter_key=\"' +\n                            cf_key +\n                            '\" filter_val=\"' +\n                            cf_arg +\n                            '\">' +\n                            cf_label +\n                            \"</a>\" +\n                            \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return (\n                '<span class=\"text-filter-val\">' +\n                filter_value +\n                '<a href=\"javascript:void(0);\" filter_key=\"' +\n                filter_key +\n                '\" filter_val=\"' +\n                filter_value +\n                '\">' +\n                '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                \"</a>\" +\n                \"</span>\"\n            );\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","define([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    min: null,\n                    max: null,\n                    step: null,\n                    precise: false,\n                    split: 10000,\n                    value: null,\n                    onchange: function() {}\n                }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text\n                .on(\"change\", function() {\n                    self.value($(this).val());\n                })\n                .on(\"keyup\", function(e) {\n                    pressed[e.which] = false;\n                })\n                .on(\"keydown\", function(e) {\n                    var v = e.which;\n                    pressed[v] = true;\n                    if (\n                        self.model.get(\"is_workflow\") &&\n                        pressed[16] &&\n                        v == 52\n                    ) {\n                        self.value(\"$\");\n                        event.preventDefault();\n                    } else if (\n                        !(\n                            v == 8 ||\n                            v == 9 ||\n                            v == 13 ||\n                            v == 37 ||\n                            v == 39 ||\n                            (v >= 48 && v <= 57 && !pressed[16]) ||\n                            (v >= 96 && v <= 105) ||\n                            ((v == 190 || v == 110) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\".\") == -1 &&\n                                self.model.get(\"precise\")) ||\n                            ((v == 189 || v == 109) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\"-\") == -1) ||\n                            self._isParameter($(this).val()) ||\n                            pressed[91] ||\n                            pressed[17]\n                        )\n                    ) {\n                        event.preventDefault();\n                    }\n                });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider =\n                opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider\n                    .slider({ min: opts.min, max: opts.max, step: step })\n                    .on(\"slide\", function(event, ui) {\n                        self.value(ui.value);\n                    });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (\n                    new_val !== null &&\n                    new_val !== \"\" &&\n                    !this._isParameter(new_val)\n                ) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null &&\n                        (new_val = Math.min(new_val, options.max));\n                    options.min !== null &&\n                        (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function(value) {\n            return (\n                this.model.get(\"is_workflow\") &&\n                String(value).substring(0, 1) === \"$\"\n            );\n        },\n\n        /** Slider template */\n        _template: function() {\n            return (\n                '<div class=\"ui-form-slider\">' +\n                '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                '<div class=\"ui-form-slider-element\"/>' +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","/** This class creates/wraps a drill down element. */\ndefine([\"utils/utils\", \"mvc/ui/ui-options\"], function(Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (\n                new_value !== undefined &&\n                new_value !== null &&\n                this.header_index\n            ) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function(v) {\n                    var list = self.header_index[v];\n                    _.each(list, function(element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button\n                    .removeClass(\"fa-plus-square\")\n                    .addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button\n                    .removeClass(\"fa-minus-square\")\n                    .addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function() {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\")\n                            .addClass(\"button-\" + header_id)\n                            .addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\")\n                            .addClass(\"subgroup-\" + header_id)\n                            .addClass(\"ui-drilldown-subgroup\");\n                        $group.append(\n                            $(\"<div/>\")\n                                .append($button)\n                                .append(\n                                    self._templateOption({\n                                        label: level.name,\n                                        value: level.value\n                                    })\n                                )\n                        );\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(\n                            self._templateOption({\n                                label: level.name,\n                                value: level.value\n                            })\n                        );\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-options-list drilldown-container\")\n                .attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/form/form-repeat\",\n        \"mvc/form/form-input\",\n        \"mvc/form/form-parameters\"\n    ],\n    function(Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n        var View = Backbone.View.extend({\n            initialize: function(app, options) {\n                this.app = app;\n                this.inputs = options.inputs;\n                this.parameters = new Parameters();\n                this.setElement($(\"<div/>\"));\n                this.render();\n            },\n\n            /** Render section view */\n            render: function() {\n                var self = this;\n                this.$el.empty();\n                _.each(this.inputs, function(input) {\n                    self.add(input);\n                });\n            },\n\n            /** Add a new input element */\n            add: function(input) {\n                var input_def = jQuery.extend(true, {}, input);\n                input_def.id = input.id = Utils.uid();\n                this.app.input_list[input_def.id] = input_def;\n                switch (input_def.type) {\n                    case \"conditional\":\n                        this._addConditional(input_def);\n                        break;\n                    case \"repeat\":\n                        this._addRepeat(input_def);\n                        break;\n                    case \"section\":\n                        this._addSection(input_def);\n                        break;\n                    default:\n                        this._addRow(input_def);\n                }\n            },\n\n            /** Add a conditional block */\n            _addConditional: function(input_def) {\n                var self = this;\n                input_def.test_param.id = input_def.id;\n                this.app.model.get(\"sustain_conditionals\") &&\n                    (input_def.test_param.disabled = true);\n                var field = this._addRow(input_def.test_param);\n\n                // set onchange event for test parameter\n                field.model &&\n                    field.model.set(\"onchange\", function(value) {\n                        var selectedCase = self.app.data.matchCase(\n                            input_def,\n                            value\n                        );\n                        for (var i in input_def.cases) {\n                            var case_def = input_def.cases[i];\n                            var section_row = self.$(\n                                \"#\" + input_def.id + \"-section-\" + i\n                            );\n                            var nonhidden = false;\n                            for (var j in case_def.inputs) {\n                                if (!case_def.inputs[j].hidden) {\n                                    nonhidden = true;\n                                    break;\n                                }\n                            }\n                            if (i == selectedCase && nonhidden) {\n                                section_row.fadeIn(\"fast\");\n                            } else {\n                                section_row.hide();\n                            }\n                        }\n                        self.app.trigger(\"change\");\n                    });\n\n                // add conditional sub sections\n                for (var i in input_def.cases) {\n                    var sub_section = new View(this.app, {\n                        inputs: input_def.cases[i].inputs\n                    });\n                    this._append(\n                        sub_section.$el.addClass(\"ui-form-section\"),\n                        input_def.id + \"-section-\" + i\n                    );\n                }\n\n                // trigger refresh on conditional input field after all input elements have been created\n                field.trigger(\"change\");\n            },\n\n            /** Add a repeat block */\n            _addRepeat: function(input_def) {\n                var self = this;\n                var block_index = 0;\n\n                // create repeat block element\n                var repeat = new Repeat.View({\n                    title: input_def.title || \"Repeat\",\n                    min: input_def.min,\n                    max: input_def.max,\n                    onnew: function() {\n                        create(input_def.inputs);\n                        self.app.trigger(\"change\");\n                    }\n                });\n\n                // helper function to create new repeat blocks\n                function create(inputs) {\n                    var sub_section_id =\n                        input_def.id + \"-section-\" + block_index++;\n                    var sub_section = new View(self.app, { inputs: inputs });\n                    repeat.add({\n                        id: sub_section_id,\n                        $el: sub_section.$el,\n                        ondel: function() {\n                            repeat.del(sub_section_id);\n                            self.app.trigger(\"change\");\n                        }\n                    });\n                }\n\n                //\n                // add parsed/minimum number of repeat blocks\n                //\n                var n_cache = _.size(input_def.cache);\n                for (\n                    var i = 0;\n                    i <\n                    Math.max(\n                        Math.max(n_cache, input_def.min || 0),\n                        input_def.default || 0\n                    );\n                    i++\n                ) {\n                    create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n                }\n\n                // hide options\n                this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n                // create input field wrapper\n                var input_element = new InputElement(this.app, {\n                    label: input_def.title || input_def.name,\n                    help: input_def.help,\n                    field: repeat\n                });\n                this._append(input_element.$el, input_def.id);\n            },\n\n            /** Add a customized section */\n            _addSection: function(input_def) {\n                var portlet = new Portlet.View({\n                    title: input_def.title || input_def.name,\n                    cls: \"ui-portlet-section\",\n                    collapsible: true,\n                    collapsible_button: true,\n                    collapsed: !input_def.expanded\n                });\n                portlet.append(\n                    new View(this.app, { inputs: input_def.inputs }).$el\n                );\n                portlet.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(input_def.help)\n                );\n                this.app.on(\"expand\", function(input_id) {\n                    portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n                });\n                this._append(portlet.$el, input_def.id);\n            },\n\n            /** Add a single input field element */\n            _addRow: function(input_def) {\n                var self = this;\n                var id = input_def.id;\n                input_def.onchange =\n                    input_def.onchange ||\n                    function() {\n                        self.app.trigger(\"change\", id);\n                    };\n                var field = this.parameters.create(input_def);\n                this.app.field_list[id] = field;\n                var input_element = new InputElement(this.app, {\n                    name: input_def.name,\n                    label: input_def.hide_label\n                        ? \"\"\n                        : input_def.label || input_def.name,\n                    value: input_def.value,\n                    text_value: input_def.text_value,\n                    collapsible_value: input_def.collapsible_value,\n                    collapsible_preview: input_def.collapsible_preview,\n                    help: input_def.help,\n                    argument: input_def.argument,\n                    disabled: input_def.disabled,\n                    color: input_def.color,\n                    style: input_def.style,\n                    backdrop: input_def.backdrop,\n                    hidden: input_def.hidden,\n                    fixed: input_def.fixed,\n                    field: field\n                });\n                this.app.element_list[id] = input_element;\n                this._append(input_element.$el, input_def.id);\n                return field;\n            },\n\n            /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n            _append: function($el, id) {\n                this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$list = $(\"<div/>\")))\n                    .append($(\"<div/>\").append(this.button_new.$el))\n            );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::add()\",\n                    \"Duplicate or invalid repeat block id.\"\n                );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 &&\n                this.size() >= this.options.max &&\n                this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::del()\",\n                    \"Invalid repeat block id.\"\n                );\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each(this.list, function(portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) &&\n                this.$el.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(this.options.empty_text)\n                );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[\n                    this.size() > this.options.min\n                        ? \"showOperation\"\n                        : \"hideOperation\"\n                ](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = (options && options.field) || new Backbone.View();\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    text_enable: this.app_options.text_enable || \"Enable\",\n                    text_disable: this.app_options.text_disable || \"Disable\",\n                    cls_enable:\n                        this.app_options.cls_enable ||\n                        \"fa fa-caret-square-o-down\",\n                    cls_disable:\n                        this.app_options.cls_disable ||\n                        \"fa fa-caret-square-o-up\",\n                    always_refresh: this.app_options.always_refresh\n                }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed =\n                collapsible_value !== undefined &&\n                JSON.stringify(this.model.get(\"value\")) ==\n                    JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function() {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (\n                help_argument &&\n                help_text.indexOf(\"(\" + help_argument + \")\") == -1\n            ) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview\n                [\n                    (this.field.collapsed &&\n                        this.model.get(\"collapsible_preview\")) ||\n                    this.model.get(\"disabled\")\n                        ? \"show\"\n                        : \"hide\"\n                ]()\n                .html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\")\n                ? this.$field.hide()\n                : this.$field.show();\n            // render input field color and style\n            this.field.model &&\n                this.field.model.set({\n                    color: this.model.get(\"color\"),\n                    style: this.model.get(\"style\")\n                });\n            // render collapsible options\n            if (\n                !this.model.get(\"disabled\") &&\n                this.model.get(\"collapsible_value\") !== undefined\n            ) {\n                var collapsible_state = this.field.collapsed\n                    ? \"enable\"\n                    : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon\n                    .removeClass()\n                    .addClass(\"icon\")\n                    .addClass(this.model.get(\"cls_\" + collapsible_state))\n                    .attr(\n                        \"data-original-title\",\n                        this.model.get(\"text_\" + collapsible_state)\n                    )\n                    .tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-form-element\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-error ui-error\")\n                        .append($(\"<span/>\").addClass(\"fa fa-arrow-down\"))\n                        .append($(\"<span/>\").addClass(\"ui-form-error-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-title\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-collapsible\")\n                                .append(\n                                    $(\"<i/>\").addClass(\n                                        \"ui-form-collapsible-icon\"\n                                    )\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\n                                        \"ui-form-collapsible-text\"\n                                    )\n                                )\n                        )\n                        .append($(\"<span/>\").addClass(\"ui-form-title-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-field\")\n                        .append($(\"<span/>\").addClass(\"ui-form-info\"))\n                        .append($(\"<div/>\").addClass(\"ui-form-backdrop\"))\n                )\n                .append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-select-content\",\n        \"mvc/ui/ui-select-library\",\n        \"mvc/ui/ui-select-ftp\",\n        \"mvc/ui/ui-select-genomespace\",\n        \"mvc/ui/ui-color-picker\"\n    ],\n    function(\n        Utils,\n        Ui,\n        SelectContent,\n        SelectLibrary,\n        SelectFtp,\n        SelectGenomeSpace,\n        ColorPicker\n    ) {\n        // create form view\n        return Backbone.Model.extend({\n            /** Available parameter types */\n            types: {\n                text: \"_fieldText\",\n                password: \"_fieldText\",\n                select: \"_fieldSelect\",\n                data_column: \"_fieldSelect\",\n                genomebuild: \"_fieldSelect\",\n                data: \"_fieldData\",\n                data_collection: \"_fieldData\",\n                integer: \"_fieldSlider\",\n                float: \"_fieldSlider\",\n                boolean: \"_fieldBoolean\",\n                drill_down: \"_fieldDrilldown\",\n                color: \"_fieldColor\",\n                hidden: \"_fieldHidden\",\n                hidden_data: \"_fieldHidden\",\n                baseurl: \"_fieldHidden\",\n                library_data: \"_fieldLibrary\",\n                ftpfile: \"_fieldFtp\",\n                upload: \"_fieldUpload\",\n                genomespacefile: \"_fieldGenomeSpace\"\n            },\n\n            /** Returns an input field for a given field type */\n            create: function(input_def) {\n                var fieldClass = this.types[input_def.type];\n                var field =\n                    typeof this[fieldClass] === \"function\"\n                        ? this[fieldClass].call(this, input_def)\n                        : null;\n                if (!field) {\n                    field = input_def.options\n                        ? this._fieldSelect(input_def)\n                        : this._fieldText(input_def);\n                    Galaxy.emit.debug(\n                        \"form-parameters::_addRow()\",\n                        \"Auto matched field type (\" + input_def.type + \").\"\n                    );\n                }\n                input_def.value === undefined && (input_def.value = null);\n                field.value(input_def.value);\n                return field;\n            },\n\n            /** Data input field */\n            _fieldData: function(input_def) {\n                return new SelectContent.View({\n                    id: \"field-\" + input_def.id,\n                    extensions: input_def.extensions,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    type: input_def.type,\n                    flavor: input_def.flavor,\n                    data: input_def.options,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Select/Checkbox/Radio options field */\n            _fieldSelect: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // customize properties\n                if (input_def.type == \"data_column\") {\n                    input_def.error_text =\n                        \"Missing columns in referenced dataset.\";\n                }\n\n                // identify available options\n                var data = input_def.data;\n                if (!data) {\n                    data = [];\n                    _.each(input_def.options, function(option) {\n                        data.push({ label: option[0], value: option[1] });\n                    });\n                }\n\n                // identify display type\n                var SelectClass = Ui.Select;\n                switch (input_def.display) {\n                    case \"checkboxes\":\n                        SelectClass = Ui.Checkbox;\n                        break;\n                    case \"radio\":\n                        SelectClass = Ui.Radio;\n                        break;\n                    case \"radiobutton\":\n                        SelectClass = Ui.RadioButton;\n                        break;\n                }\n\n                // create select field\n                return new SelectClass.View({\n                    id: \"field-\" + input_def.id,\n                    data: data,\n                    error_text: input_def.error_text || \"No options available\",\n                    readonly: input_def.readonly,\n                    multiple: input_def.multiple,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange,\n                    individual: input_def.individual,\n                    searchable: input_def.flavor !== \"workflow\"\n                });\n            },\n\n            /** Drill down options field */\n            _fieldDrilldown: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // create drill down field\n                return new Ui.Drilldown.View({\n                    id: \"field-\" + input_def.id,\n                    data: input_def.options,\n                    display: input_def.display,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Text input field */\n            _fieldText: function(input_def) {\n                // field replaces e.g. a select field\n                if (input_def.options && input_def.data) {\n                    input_def.area = input_def.multiple;\n                    if (Utils.isEmpty(input_def.value)) {\n                        input_def.value = null;\n                    } else {\n                        if ($.isArray(input_def.value)) {\n                            var str_value = \"\";\n                            for (var i in input_def.value) {\n                                str_value += String(input_def.value[i]);\n                                if (!input_def.multiple) {\n                                    break;\n                                }\n                                str_value += \"\\n\";\n                            }\n                            input_def.value = str_value;\n                        }\n                    }\n                }\n                // create input element\n                return new Ui.Input({\n                    id: \"field-\" + input_def.id,\n                    type: input_def.type,\n                    area: input_def.area,\n                    readonly: input_def.readonly,\n                    placeholder: input_def.placeholder,\n                    datalist: input_def.datalist,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Slider field */\n            _fieldSlider: function(input_def) {\n                return new Ui.Slider.View({\n                    id: \"field-\" + input_def.id,\n                    precise: input_def.type == \"float\",\n                    is_workflow: input_def.is_workflow,\n                    min: input_def.min,\n                    max: input_def.max,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Hidden field */\n            _fieldHidden: function(input_def) {\n                return new Ui.Hidden({\n                    id: \"field-\" + input_def.id,\n                    info: input_def.info\n                });\n            },\n\n            /** Boolean field */\n            _fieldBoolean: function(input_def) {\n                return new Ui.RadioButton.View({\n                    id: \"field-\" + input_def.id,\n                    data: [\n                        { label: \"Yes\", value: \"true\" },\n                        { label: \"No\", value: \"false\" }\n                    ],\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Color picker field */\n            _fieldColor: function(input_def) {\n                return new ColorPicker({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Library dataset field */\n            _fieldLibrary: function(input_def) {\n                return new SelectLibrary.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** FTP file field */\n            _fieldFtp: function(input_def) {\n                return new SelectFtp.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** GenomeSpace file select field\n         */\n            _fieldGenomeSpace: function(input_def) {\n                var self = this;\n                return new SelectGenomeSpace.View({\n                    id: \"field-\" + input_def.id,\n                    onchange: function() {\n                        self.app.trigger(\"change\");\n                    }\n                });\n            },\n\n            /** Upload file field */\n            _fieldUpload: function(input_def) {\n                return new Ui.Upload({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(\n    Utils,\n    Ui,\n    Select\n) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip:\n                            \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target &&\n                        self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:current\",\n                this._changeCurrent,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[\n                                id_list[i] + \"_\" + this.config[current].src\n                            ];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" +\n                                        id_list[i] +\n                                        \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\n                    \"ui-select-content::value()\",\n                    \"Invalid value/source '\" + new_value + \"'.\"\n                );\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[\n                            self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                        ]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\")\n                    ? this.model.get(\"flavor\") + \"_\"\n                    : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple ||\n                            (data &&\n                                data[c.src] &&\n                                data[c.src].length >\n                                    self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append(\n                    $batchfield.css({ \"margin-left\": button_width })\n                );\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (\n                        c.src == src &&\n                        [multiple, true].indexOf(c.multiple) !== -1\n                    ) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(\n                    ev.originalEvent.dataTransfer.getData(\"text\")\n                )[0];\n                var new_id = drop_data.id;\n                var new_src =\n                    drop_data.history_content_type == \"dataset\"\n                        ? \"hda\"\n                        : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el\n                .removeClass(\"ui-dragover\")\n                .addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (\n                    config.batch == Batch.ENABLED &&\n                    this.button_product.value() === \"true\"\n                ) {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(\n    [\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"],\n    function(Utils, Ui, Table, List) {\n        // collection of libraries\n        var Libraries = Backbone.Collection.extend({\n            url: Galaxy.root + \"api/libraries?deleted=false\"\n        });\n\n        // collection of dataset\n        var LibraryDatasets = Backbone.Collection.extend({\n            initialize: function() {\n                var self = this;\n                this.config = new Backbone.Model({ library_id: null });\n                this.config.on(\"change\", function() {\n                    self.fetch({ reset: true });\n                });\n            },\n            url: function() {\n                return (\n                    Galaxy.root +\n                    \"api/libraries/\" +\n                    this.config.get(\"library_id\") +\n                    \"/contents\"\n                );\n            }\n        });\n\n        // hda/hdca content selector ui element\n        var View = Backbone.View.extend({\n            // initialize\n            initialize: function(options) {\n                // link this\n                var self = this;\n\n                // collections\n                this.libraries = new Libraries();\n                this.datasets = new LibraryDatasets();\n\n                // link app and options\n                this.options = options;\n\n                // select field for the library\n                // TODO: Remove this once the library API supports searching for library datasets\n                this.library_select = new Ui.Select.View({\n                    onchange: function(value) {\n                        self.datasets.config.set(\"library_id\", value);\n                    }\n                });\n\n                // create ui-list view to keep track of selected data libraries\n                this.dataset_list = new List.View({\n                    name: \"dataset\",\n                    optional: options.optional,\n                    multiple: options.multiple,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                });\n\n                // add reset handler for fetched libraries\n                this.libraries.on(\"reset\", function() {\n                    var data = [];\n                    self.libraries.each(function(model) {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    });\n                    self.library_select.update(data);\n                });\n\n                // add reset handler for fetched library datasets\n                this.datasets.on(\"reset\", function() {\n                    var data = [];\n                    var library_current = self.library_select.text();\n                    if (library_current !== null) {\n                        self.datasets.each(function(model) {\n                            if (model.get(\"type\") === \"file\") {\n                                data.push({\n                                    value: model.id,\n                                    label: model.get(\"name\")\n                                });\n                            }\n                        });\n                    }\n                    self.dataset_list.update(data);\n                });\n\n                // add change event. fires on trigger\n                this.on(\"change\", function() {\n                    options.onchange && options.onchange(self.value());\n                });\n\n                // create elements\n                this.setElement(this._template());\n                this.$(\".library-select\").append(this.library_select.$el);\n                this.$el.append(this.dataset_list.$el);\n\n                // initial fetch of libraries\n                this.libraries.fetch({\n                    reset: true,\n                    success: function() {\n                        self.library_select.trigger(\"change\");\n                        if (self.options.value !== undefined) {\n                            self.value(self.options.value);\n                        }\n                    }\n                });\n            },\n\n            /** Return/Set currently selected library datasets */\n            value: function(val) {\n                return this.dataset_list.value(val);\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                    '<span class=\"library-title\">Select Library</span>' +\n                    '<span class=\"library-select\"/>' +\n                    \"</div>\" +\n                    \"</div>\"\n                );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-list\"], function(Utils, List) {\n    /**\n * FTP file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/tool/tool-genomespace\"], function(\n    Utils,\n    Ui,\n    GenomespaceBrowser\n) {\n    /**\n * GenomeSpace file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-gs-select-file\">' +\n                '<div class=\"ui-gs-browse-field\">' +\n                '<span class=\"ui-gs-browse-button\" />' +\n                '<span class=\"ui-gs-filename-textbox\" />' +\n                \"</div>\" +\n                '<div class=\"ui-gs-token-field\">' +\n                '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' +\n                '<span class=\"ui-gs-token-textbox\" />' +\n                \"</div>\" +\n                \"</div>\"\n            );\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function() {\n            return (\n                this.filename_textbox.value() + \"^\" + this.token_textbox.value()\n            );\n        },\n\n        // set value\n        _setValue: function(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-genomespace.js","// Provides support for interacting with the GenomeSpace File Browser popup dialogue\ndefine([], function() {\n    // tool form templates\n    return {\n        openFileBrowser: function(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL =\n                GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(\n                GS_UPLOAD_URL,\n                \"GenomeSpace File Browser\",\n                \"height=360px,width=600px\"\n            );\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\n                \"message\",\n                function(e) {\n                    successCalBack(e.data);\n                },\n                false\n            );\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null)\n                newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-genomespace.js","/** Renders the color picker used e.g. in the tool form **/\ndefine([\"utils/utils\"], function(Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\n                \"c00000\",\n                \"ff0000\",\n                \"ffc000\",\n                \"ffff00\",\n                \"92d050\",\n                \"00b050\",\n                \"00b0f0\",\n                \"0070c0\",\n                \"002060\",\n                \"7030a0\"\n            ],\n            base: [\n                \"ffffff\",\n                \"000000\",\n                \"eeece1\",\n                \"1f497d\",\n                \"4f81bd\",\n                \"c0504d\",\n                \"9bbb59\",\n                \"8064a2\",\n                \"4bacc6\",\n                \"f79646\"\n            ],\n            theme: [\n                [\n                    \"f2f2f2\",\n                    \"7f7f7f\",\n                    \"ddd9c3\",\n                    \"c6d9f0\",\n                    \"dbe5f1\",\n                    \"f2dcdb\",\n                    \"ebf1dd\",\n                    \"e5e0ec\",\n                    \"dbeef3\",\n                    \"fdeada\"\n                ],\n                [\n                    \"d8d8d8\",\n                    \"595959\",\n                    \"c4bd97\",\n                    \"8db3e2\",\n                    \"b8cce4\",\n                    \"e5b9b7\",\n                    \"d7e3bc\",\n                    \"ccc1d9\",\n                    \"b7dde8\",\n                    \"fbd5b5\"\n                ],\n                [\n                    \"bfbfbf\",\n                    \"3f3f3f\",\n                    \"938953\",\n                    \"548dd4\",\n                    \"95b3d7\",\n                    \"d99694\",\n                    \"c3d69b\",\n                    \"b2a2c7\",\n                    \"92cddc\",\n                    \"fac08f\"\n                ],\n                [\n                    \"a5a5a5\",\n                    \"262626\",\n                    \"494429\",\n                    \"17365d\",\n                    \"366092\",\n                    \"953734\",\n                    \"76923c\",\n                    \"5f497a\",\n                    \"31859b\",\n                    \"e36c09\"\n                ],\n                [\n                    \"7f7f7e\",\n                    \"0c0c0c\",\n                    \"1d1b10\",\n                    \"0f243e\",\n                    \"244061\",\n                    \"632423\",\n                    \"4f6128\",\n                    \"3f3151\",\n                    \"205867\",\n                    \"974806\"\n                ]\n            ]\n        },\n\n        initialize: function(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function() {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function() {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                }\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return (\n                '<div class=\"ui-color-picker-content\">' +\n                '<div class=\"line\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Box template */\n        _templateBox: function(color) {\n            return (\n                '<div id=\"' +\n                color +\n                '\" class=\"ui-color-picker-box\" style=\"background-color: #' +\n                color +\n                ';\"/>'\n            );\n        },\n\n        /** Main template */\n        _template: function() {\n            return (\n                '<div class=\"ui-color-picker\">' +\n                '<div class=\"ui-color-picker-header\">' +\n                '<div class=\"ui-color-picker-value\"/>' +\n                '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                \"</div>\" +\n                '<div class=\"ui-color-picker-view ui-input\">' +\n                '<div class=\"ui-color-picker-panel\"/>' +\n                \"</div>\"\n            );\n            (\"</div>\");\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","var jQuery = require(\"jquery\"),\n    $ = jQuery,\n    QUERY_STRING = require(\"utils/query-string-parsing\"),\n    Ui = require(\"mvc/ui/ui-misc\");\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function(url, data) {\n        data = data || {};\n        data.__identifer = Math.random()\n            .toString(36)\n            .substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function(args, name) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display(\n            new Ui.Message({\n                status: \"danger\",\n                message:\n                    \"You must be logged in with proper credentials to make this request.\",\n                persistent: true\n            })\n        );\n    }\n});\n\nmodule.exports = Router;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") ||\n                            (status == \"danger\" && \"error\") ||\n                            status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined &&\n                    this.model.set(\n                        \"value\",\n                        typeof new_val === \"string\" ? new_val : \"\"\n                    );\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name)\n                        ? self.$el.attr(attr_name, true)\n                        : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") &&\n                    this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append(\n                            (this.$wait = $(\"<i/>\").addClass(\n                                \"fa fa-spinner fa-spin\"\n                            ))\n                        )\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                this.model.get(\"value\")\n                    ? this.$text.text(this.model.get(\"value\")).show()\n                    : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","/** Generic form view */\ndefine([\"mvc/form/form-view\", \"mvc/ui/ui-misc\"], function(Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            })\n                .done(function(response) {\n                    var options = $.extend({}, self.model.attributes, response);\n                    var form = new Form({\n                        title: options.title,\n                        message: options.message,\n                        status: options.status || \"warning\",\n                        icon: options.icon,\n                        inputs: options.inputs,\n                        buttons: {\n                            submit: new Ui.Button({\n                                tooltip: options.submit_tooltip,\n                                title: options.submit_title || \"Save\",\n                                icon: options.submit_icon || \"fa-save\",\n                                cls: \"btn btn-primary ui-clear-float\",\n                                onclick: function() {\n                                    self._submit(form);\n                                }\n                            })\n                        }\n                    });\n                    self.$el.empty().append(form.$el);\n                })\n                .fail(function(response) {\n                    self.$el.empty().append(\n                        new Ui.Message({\n                            message:\n                                \"Failed to load resource \" + self.url + \".\",\n                            status: \"danger\",\n                            persistent: true\n                        }).$el\n                    );\n                });\n        },\n\n        _submit: function(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            })\n                .done(function(response) {\n                    var success_message = {\n                        message: response.message,\n                        status: \"success\",\n                        persistent: false\n                    };\n                    if (self.redirect) {\n                        window.location =\n                            Galaxy.root +\n                            self.redirect +\n                            \"?\" +\n                            $.param(success_message);\n                    } else {\n                        form.data.matchModel(response, function(\n                            input,\n                            input_id\n                        ) {\n                            form.field_list[input_id].value(input.value);\n                        });\n                        self._showMessage(form, success_message);\n                    }\n                })\n                .fail(function(response) {\n                    self._showMessage(form, {\n                        message: response.responseJSON.err_msg,\n                        status: \"danger\",\n                        persistent: false\n                    });\n                });\n        },\n\n        _showMessage: function(form, options) {\n            var $panel = form.$el\n                .parents()\n                .filter(function() {\n                    return (\n                        [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) !=\n                        -1\n                    );\n                })\n                .first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","define([\"utils/utils\", \"mvc/ui/ui-misc\"], function(Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-portlet\",\n                    title: \"\",\n                    icon: \"\",\n                    buttons: null,\n                    body: null,\n                    scrollable: true,\n                    nopadding: false,\n                    operations: null,\n                    collapsible: false,\n                    collapsible_button: false,\n                    collapsed: false,\n                    onchange_title: null\n                }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\n                    \"no-padding\"\n                );\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon\n                    .removeClass()\n                    .addClass(\"portlet-title-icon fa\")\n                    .addClass(options.icon)\n                    .show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text\n                [options.collapsible ? \"addClass\" : \"removeClass\"](\n                    \"no-highlight collapsible\"\n                )\n                .off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title &&\n                this.$title_text.make_text_editable({\n                    on_finish: function(new_title) {\n                        options.onchange_title(new_title);\n                    }\n                });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function(id, callback) {\n            this.$operations\n                .find(\"#\" + id)\n                .off(\"click\")\n                .on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function() {\n            this.$backdrop.hide();\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-header\")\n                        .append($(\"<div/>\").addClass(\"portlet-operations\"))\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"portlet-title\")\n                                .append(\n                                    $(\"<i/>\").addClass(\"portlet-title-icon\")\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\"portlet-title-text\")\n                                )\n                        )\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-content\")\n                        .append($(\"<div/>\").addClass(\"portlet-body\"))\n                        .append($(\"<div/>\").addClass(\"portlet-buttons\"))\n                )\n                .append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-section\",\n        \"mvc/form/form-data\"\n    ],\n    function(Utils, Portlet, Ui, FormSection, FormData) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.model = new Backbone.Model({\n                    initial_errors: false,\n                    cls: \"ui-portlet-limited\",\n                    icon: null,\n                    always_refresh: true,\n                    status: \"warning\",\n                    hide_operations: false,\n                    onchange: function() {}\n                }).set(options);\n                this.setElement(\"<div/>\");\n                this.render();\n            },\n\n            /** Update available options */\n            update: function(new_model) {\n                var self = this;\n                this.data.matchModel(new_model, function(node, input_id) {\n                    var input = self.input_list[input_id];\n                    if (input && input.options) {\n                        if (!_.isEqual(input.options, node.options)) {\n                            input.options = node.options;\n                            var field = self.field_list[input_id];\n                            if (field.update) {\n                                var new_options = [];\n                                if (\n                                    [\n                                        \"data\",\n                                        \"data_collection\",\n                                        \"drill_down\"\n                                    ].indexOf(input.type) != -1\n                                ) {\n                                    new_options = input.options;\n                                } else {\n                                    for (var i in node.options) {\n                                        var opt = node.options[i];\n                                        if (opt.length > 2) {\n                                            new_options.push({\n                                                label: opt[0],\n                                                value: opt[1]\n                                            });\n                                        }\n                                    }\n                                }\n                                field.update(new_options);\n                                field.trigger(\"change\");\n                                Galaxy.emit.debug(\n                                    \"form-view::update()\",\n                                    \"Updating options for \" + input_id\n                                );\n                            }\n                        }\n                    }\n                });\n            },\n\n            /** Set form into wait mode */\n            wait: function(active) {\n                for (var i in this.input_list) {\n                    var field = this.field_list[i];\n                    var input = this.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        field[active ? \"wait\" : \"unwait\"]();\n                    }\n                }\n            },\n\n            /** Highlight and scroll to input element (currently only used for error notifications) */\n            highlight: function(input_id, message, silent) {\n                var input_element = this.element_list[input_id];\n                if (input_element) {\n                    input_element.error(\n                        message || \"Please verify this parameter.\"\n                    );\n                    this.portlet.expand();\n                    this.trigger(\"expand\", input_id);\n                    if (!silent) {\n                        var $panel = this.$el\n                            .parents()\n                            .filter(function() {\n                                return (\n                                    [\"auto\", \"scroll\"].indexOf(\n                                        $(this).css(\"overflow\")\n                                    ) != -1\n                                );\n                            })\n                            .first();\n                        $panel.animate(\n                            {\n                                scrollTop:\n                                    $panel.scrollTop() +\n                                    input_element.$el.offset().top -\n                                    120\n                            },\n                            500\n                        );\n                    }\n                }\n            },\n\n            /** Highlights errors */\n            errors: function(options) {\n                this.trigger(\"reset\");\n                if (options && options.errors) {\n                    var error_messages = this.data.matchResponse(\n                        options.errors\n                    );\n                    for (var input_id in this.element_list) {\n                        var input = this.element_list[input_id];\n                        if (error_messages[input_id]) {\n                            this.highlight(\n                                input_id,\n                                error_messages[input_id],\n                                true\n                            );\n                        }\n                    }\n                }\n            },\n\n            /** Render tool form */\n            render: function() {\n                var self = this;\n                this.off(\"change\");\n                this.off(\"reset\");\n                // contains the dom field elements as created by the parameter factory i.e. form-parameters\n                this.field_list = {};\n                // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n                this.input_list = {};\n                // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n                this.element_list = {};\n                // converts the form into a json data structure\n                this.data = new FormData.Manager(this);\n                this._renderForm();\n                this.data.create();\n                this.model.get(\"initial_errors\") &&\n                    this.errors(this.model.attributes);\n                // add listener which triggers on checksum change, and reset the form input wrappers\n                var current_check = this.data.checksum();\n                this.on(\"change\", function(input_id) {\n                    var input = self.input_list[input_id];\n                    if (\n                        !input ||\n                        input.refresh_on_change ||\n                        self.model.get(\"always_refresh\")\n                    ) {\n                        var new_check = self.data.checksum();\n                        if (new_check != current_check) {\n                            current_check = new_check;\n                            self.model.get(\"onchange\")();\n                        }\n                    }\n                });\n                this.on(\"reset\", function() {\n                    _.each(self.element_list, function(input_element) {\n                        input_element.reset();\n                    });\n                });\n                return this;\n            },\n\n            /** Renders/appends dom elements of the form */\n            _renderForm: function() {\n                $(\".tooltip\").remove();\n                var options = this.model.attributes;\n                this.message = new Ui.UnescapedMessage();\n                this.section = new FormSection.View(this, {\n                    inputs: options.inputs\n                });\n                this.portlet = new Portlet.View({\n                    icon: options.icon,\n                    title: options.title,\n                    cls: options.cls,\n                    operations: !options.hide_operations && options.operations,\n                    buttons: options.buttons,\n                    collapsible: options.collapsible,\n                    collapsed: options.collapsed,\n                    onchange_title: options.onchange_title\n                });\n                this.portlet.append(this.message.$el);\n                this.portlet.append(this.section.$el);\n                this.$el.empty();\n                options.inputs && this.$el.append(this.portlet.$el);\n                options.message &&\n                    this.message.update({\n                        persistent: true,\n                        status: options.status,\n                        message: options.message\n                    });\n                Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js"],"sourceRoot":""}